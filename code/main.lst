
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00001f3a  00001fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a3  008001fa  008001fa  000020c8  2**0
                  ALLOC
  3 .stab         00003744  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001207  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_14>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_18>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_24>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e3       	ldi	r30, 0x3A	; 58
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	aa 3f       	cpi	r26, 0xFA	; 250
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	15 e0       	ldi	r17, 0x05	; 5
      94:	aa ef       	ldi	r26, 0xFA	; 250
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ad 39       	cpi	r26, 0x9D	; 157
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <main>
      a6:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <uart_init>:
#define BAUD 9600UL
#define UBRRVAL (F_CPU/(BAUD*16)-1)
#define U_M	1000
uint16_t u_c;
void uart_init() {
    UBRRH = UBRRVAL >> 8;
      ae:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
      b2:	81 e8       	ldi	r24, 0x81	; 129
      b4:	80 93 c4 00 	sts	0x00C4, r24
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
      b8:	86 e0       	ldi	r24, 0x06	; 6
      ba:	80 93 c2 00 	sts	0x00C2, r24
    UCSRB = (1 << RXEN) | (1 << TXEN);
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	80 93 c1 00 	sts	0x00C1, r24
}
      c4:	08 95       	ret

000000c6 <uart_putc>:

void uart_putc(uint8_t c) {
      c6:	98 2f       	mov	r25, r24
	u_c=0;
      c8:	10 92 99 05 	sts	0x0599, r1
      cc:	10 92 98 05 	sts	0x0598, r1
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <uart_putc+0x14>
    while(!(UCSRA&(1<<UDRE))&&(u_c<U_M)) {
      d6:	2f 5f       	subi	r18, 0xFF	; 255
      d8:	3f 4f       	sbci	r19, 0xFF	; 255
      da:	80 91 c0 00 	lds	r24, 0x00C0
      de:	85 fd       	sbrc	r24, 5
      e0:	04 c0       	rjmp	.+8      	; 0xea <uart_putc+0x24>
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	28 3e       	cpi	r18, 0xE8	; 232
      e6:	38 07       	cpc	r19, r24
      e8:	b0 f3       	brcs	.-20     	; 0xd6 <uart_putc+0x10>
      ea:	30 93 99 05 	sts	0x0599, r19
      ee:	20 93 98 05 	sts	0x0598, r18
		u_c++;
	}
    UDR = c;
      f2:	90 93 c6 00 	sts	0x00C6, r25
}
      f6:	08 95       	ret

000000f8 <uart_getc>:

uint8_t uart_getc() {
	u_c=0;
      f8:	10 92 99 05 	sts	0x0599, r1
      fc:	10 92 98 05 	sts	0x0598, r1
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <uart_getc+0x12>
	static uint8_t c;
    while(!(UCSRA & (1 << RXC))&&(u_c<U_M)) {
     106:	2f 5f       	subi	r18, 0xFF	; 255
     108:	3f 4f       	sbci	r19, 0xFF	; 255
     10a:	80 91 c0 00 	lds	r24, 0x00C0
     10e:	87 fd       	sbrc	r24, 7
     110:	04 c0       	rjmp	.+8      	; 0x11a <uart_getc+0x22>
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	28 3e       	cpi	r18, 0xE8	; 232
     116:	38 07       	cpc	r19, r24
     118:	b0 f3       	brcs	.-20     	; 0x106 <uart_getc+0xe>
     11a:	30 93 99 05 	sts	0x0599, r19
     11e:	20 93 98 05 	sts	0x0598, r18
		u_c++;
	}
	c=UDR;
     122:	80 91 c6 00 	lds	r24, 0x00C6
     126:	80 93 10 02 	sts	0x0210, r24
    return c;
}
     12a:	08 95       	ret

0000012c <uart_flush>:

void uart_flush( void ) {
     12c:	90 91 0f 02 	lds	r25, 0x020F
     130:	02 c0       	rjmp	.+4      	; 0x136 <uart_flush+0xa>
  static unsigned char dummy;
  while ( UCSRA & (1<<RXC) ) dummy = UDR;
     132:	90 91 c6 00 	lds	r25, 0x00C6
     136:	80 91 c0 00 	lds	r24, 0x00C0
     13a:	87 fd       	sbrc	r24, 7
     13c:	fa cf       	rjmp	.-12     	; 0x132 <uart_flush+0x6>
     13e:	90 93 0f 02 	sts	0x020F, r25
}
     142:	08 95       	ret

00000144 <uart_communicate>:

void uart_communicate(unsigned char w_byte) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
    static uint8_t c;
    c=uart_getc();
     148:	0e 94 7c 00 	call	0xf8	; 0xf8 <uart_getc>
     14c:	80 93 0e 02 	sts	0x020E, r24
    if(c=='g') uart_putc(w_byte);
     150:	87 36       	cpi	r24, 0x67	; 103
     152:	19 f4       	brne	.+6      	; 0x15a <uart_communicate+0x16>
     154:	81 2f       	mov	r24, r17
     156:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_putc>
     15a:	90 91 0f 02 	lds	r25, 0x020F
     15e:	02 c0       	rjmp	.+4      	; 0x164 <uart_communicate+0x20>
    return c;
}

void uart_flush( void ) {
  static unsigned char dummy;
  while ( UCSRA & (1<<RXC) ) dummy = UDR;
     160:	90 91 c6 00 	lds	r25, 0x00C6
     164:	80 91 c0 00 	lds	r24, 0x00C0
     168:	87 fd       	sbrc	r24, 7
     16a:	fa cf       	rjmp	.-12     	; 0x160 <uart_communicate+0x1c>
     16c:	90 93 0f 02 	sts	0x020F, r25
void uart_communicate(unsigned char w_byte) {
    static uint8_t c;
    c=uart_getc();
    if(c=='g') uart_putc(w_byte);
    uart_flush();
}
     170:	1f 91       	pop	r17
     172:	08 95       	ret

00000174 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     174:	28 e8       	ldi	r18, 0x88	; 136
     176:	33 e1       	ldi	r19, 0x13	; 19
     178:	04 c0       	rjmp	.+8      	; 0x182 <delay_ms+0xe>
     17a:	f9 01       	movw	r30, r18
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <delay_ms+0x8>
     180:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	d1 f7       	brne	.-12     	; 0x17a <delay_ms+0x6>
		_delay_ms(1);
}
     186:	08 95       	ret

00000188 <delay_us>:

void delay_us(unsigned long long  int delay) {
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	16 2f       	mov	r17, r22
     194:	f7 2e       	mov	r15, r23
     196:	79 2f       	mov	r23, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     198:	96 e0       	ldi	r25, 0x06	; 6
     19a:	d9 2e       	mov	r13, r25
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <delay_us+0x1c>
     19e:	ed 2d       	mov	r30, r13
     1a0:	ea 95       	dec	r30
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <delay_us+0x18>
	while(delay--)
     1a4:	e2 2e       	mov	r14, r18
     1a6:	ea 94       	dec	r14
     1a8:	f1 e0       	ldi	r31, 0x01	; 1
     1aa:	e2 16       	cp	r14, r18
     1ac:	08 f0       	brcs	.+2      	; 0x1b0 <delay_us+0x28>
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	23 2f       	mov	r18, r19
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	e1 e0       	ldi	r30, 0x01	; 1
     1b6:	23 17       	cp	r18, r19
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <delay_us+0x34>
     1ba:	e0 e0       	ldi	r30, 0x00	; 0
     1bc:	0f 2f       	mov	r16, r31
     1be:	02 0f       	add	r16, r18
     1c0:	31 e0       	ldi	r19, 0x01	; 1
     1c2:	02 17       	cp	r16, r18
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <delay_us+0x40>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	e3 2b       	or	r30, r19
     1ca:	24 2f       	mov	r18, r20
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	24 17       	cp	r18, r20
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <delay_us+0x4e>
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	6e 2f       	mov	r22, r30
     1d8:	62 0f       	add	r22, r18
     1da:	31 e0       	ldi	r19, 0x01	; 1
     1dc:	62 17       	cp	r22, r18
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <delay_us+0x5a>
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f3 2b       	or	r31, r19
     1e4:	25 2f       	mov	r18, r21
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	41 e0       	ldi	r20, 0x01	; 1
     1ea:	25 17       	cp	r18, r21
     1ec:	08 f0       	brcs	.+2      	; 0x1f0 <delay_us+0x68>
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	9f 2f       	mov	r25, r31
     1f2:	92 0f       	add	r25, r18
     1f4:	31 e0       	ldi	r19, 0x01	; 1
     1f6:	92 17       	cp	r25, r18
     1f8:	08 f0       	brcs	.+2      	; 0x1fc <delay_us+0x74>
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	43 2b       	or	r20, r19
     1fe:	21 2f       	mov	r18, r17
     200:	21 50       	subi	r18, 0x01	; 1
     202:	51 e0       	ldi	r21, 0x01	; 1
     204:	21 17       	cp	r18, r17
     206:	08 f0       	brcs	.+2      	; 0x20a <delay_us+0x82>
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	b4 2f       	mov	r27, r20
     20c:	b2 0f       	add	r27, r18
     20e:	31 e0       	ldi	r19, 0x01	; 1
     210:	b2 17       	cp	r27, r18
     212:	08 f0       	brcs	.+2      	; 0x216 <delay_us+0x8e>
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	53 2b       	or	r21, r19
     218:	2f 2d       	mov	r18, r15
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	2f 15       	cp	r18, r15
     220:	08 f0       	brcs	.+2      	; 0x224 <delay_us+0x9c>
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	a5 2f       	mov	r26, r21
     226:	a2 0f       	add	r26, r18
     228:	31 e0       	ldi	r19, 0x01	; 1
     22a:	a2 17       	cp	r26, r18
     22c:	08 f0       	brcs	.+2      	; 0x230 <delay_us+0xa8>
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	43 2b       	or	r20, r19
     232:	28 2f       	mov	r18, r24
     234:	21 50       	subi	r18, 0x01	; 1
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	28 17       	cp	r18, r24
     23a:	08 f0       	brcs	.+2      	; 0x23e <delay_us+0xb6>
     23c:	e0 e0       	ldi	r30, 0x00	; 0
     23e:	f4 2f       	mov	r31, r20
     240:	f2 0f       	add	r31, r18
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	f2 17       	cp	r31, r18
     246:	08 f0       	brcs	.+2      	; 0x24a <delay_us+0xc2>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	e8 2b       	or	r30, r24
     24c:	71 50       	subi	r23, 0x01	; 1
     24e:	2e 2d       	mov	r18, r14
     250:	30 2f       	mov	r19, r16
     252:	46 2f       	mov	r20, r22
     254:	59 2f       	mov	r21, r25
     256:	1b 2f       	mov	r17, r27
     258:	fa 2e       	mov	r15, r26
     25a:	8f 2f       	mov	r24, r31
     25c:	7e 0f       	add	r23, r30
     25e:	2f 3f       	cpi	r18, 0xFF	; 255
     260:	09 f0       	breq	.+2      	; 0x264 <delay_us+0xdc>
     262:	9d cf       	rjmp	.-198    	; 0x19e <delay_us+0x16>
     264:	0f 3f       	cpi	r16, 0xFF	; 255
     266:	09 f0       	breq	.+2      	; 0x26a <delay_us+0xe2>
     268:	9a cf       	rjmp	.-204    	; 0x19e <delay_us+0x16>
     26a:	6f 3f       	cpi	r22, 0xFF	; 255
     26c:	09 f0       	breq	.+2      	; 0x270 <delay_us+0xe8>
     26e:	97 cf       	rjmp	.-210    	; 0x19e <delay_us+0x16>
     270:	9f 3f       	cpi	r25, 0xFF	; 255
     272:	09 f0       	breq	.+2      	; 0x276 <delay_us+0xee>
     274:	94 cf       	rjmp	.-216    	; 0x19e <delay_us+0x16>
     276:	bf 3f       	cpi	r27, 0xFF	; 255
     278:	09 f0       	breq	.+2      	; 0x27c <delay_us+0xf4>
     27a:	91 cf       	rjmp	.-222    	; 0x19e <delay_us+0x16>
     27c:	af 3f       	cpi	r26, 0xFF	; 255
     27e:	09 f0       	breq	.+2      	; 0x282 <delay_us+0xfa>
     280:	8e cf       	rjmp	.-228    	; 0x19e <delay_us+0x16>
     282:	ff 3f       	cpi	r31, 0xFF	; 255
     284:	09 f0       	breq	.+2      	; 0x288 <delay_us+0x100>
     286:	8b cf       	rjmp	.-234    	; 0x19e <delay_us+0x16>
     288:	7f 3f       	cpi	r23, 0xFF	; 255
     28a:	09 f0       	breq	.+2      	; 0x28e <delay_us+0x106>
     28c:	88 cf       	rjmp	.-240    	; 0x19e <delay_us+0x16>
		_delay_us(1);
}
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	08 95       	ret

0000029a <lcd_databits>:

#define SEND_CMD 1
#define SEND_DATA 2

void lcd_databits(uint8_t cmd,uint8_t src) {
  DATAPORT=src;
     29a:	68 b9       	out	0x08, r22	; 8
  if(cmd==SEND_DATA) CMDPORT|=DI;
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	11 f4       	brne	.+4      	; 0x2a4 <lcd_databits+0xa>
     2a0:	5d 9a       	sbi	0x0b, 5	; 11
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <lcd_databits+0xc>
  else CMDPORT&=~DI;
     2a4:	5d 98       	cbi	0x0b, 5	; 11
  CMDPORT|=EN;
     2a6:	5e 9a       	sbi	0x0b, 6	; 11
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	36 e0       	ldi	r19, 0x06	; 6
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <lcd_databits+0x1c>
     2b0:	23 2f       	mov	r18, r19
     2b2:	2a 95       	dec	r18
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_databits+0x18>
     2b6:	01 96       	adiw	r24, 0x01	; 1
	while(delay--)
		_delay_ms(1);
}

void delay_us(unsigned long long  int delay) {
	while(delay--)
     2b8:	87 30       	cpi	r24, 0x07	; 7
     2ba:	91 05       	cpc	r25, r1
     2bc:	c9 f7       	brne	.-14     	; 0x2b0 <lcd_databits+0x16>
  DATAPORT=src;
  if(cmd==SEND_DATA) CMDPORT|=DI;
  else CMDPORT&=~DI;
  CMDPORT|=EN;
  delay_us(6);
  CMDPORT&=~EN;
     2be:	5e 98       	cbi	0x0b, 6	; 11
  CMDPORT&=~DI;
     2c0:	5d 98       	cbi	0x0b, 5	; 11
  DATAPORT=0;
     2c2:	18 b8       	out	0x08, r1	; 8
}
     2c4:	08 95       	ret

000002c6 <lcd_goto_xblock>:

void lcd_goto_xblock(uint8_t s) { //s={0,1...127}
     2c6:	68 2f       	mov	r22, r24
  if(s>=64) {
     2c8:	80 34       	cpi	r24, 0x40	; 64
     2ca:	20 f0       	brcs	.+8      	; 0x2d4 <lcd_goto_xblock+0xe>
    CMDPORT|=CSEL2;
     2cc:	5b 9a       	sbi	0x0b, 3	; 11
    CMDPORT&=~CSEL1;
     2ce:	5a 98       	cbi	0x0b, 2	; 11
    lcd_databits(SEND_CMD,(1<<6)|(s-64));
     2d0:	60 54       	subi	r22, 0x40	; 64
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_goto_xblock+0x12>
  }
  else {
    CMDPORT|=CSEL1;
     2d4:	5a 9a       	sbi	0x0b, 2	; 11
    CMDPORT&=~CSEL2;
     2d6:	5b 98       	cbi	0x0b, 3	; 11
    lcd_databits(SEND_CMD,(1<<6)|s);
     2d8:	60 64       	ori	r22, 0x40	; 64
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     2e0:	08 95       	ret

000002e2 <lcd_goto_yblock>:
  }
}

void lcd_goto_yblock(uint8_t s) { //s={0,1...7}
  lcd_databits(SEND_CMD,0xb8|s);
     2e2:	68 2f       	mov	r22, r24
     2e4:	68 6b       	ori	r22, 0xB8	; 184
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     2ec:	08 95       	ret

000002ee <lcd_goto>:
void lcd_goto(uint8_t x,uint8_t y) {
     2ee:	1f 93       	push	r17
     2f0:	16 2f       	mov	r17, r22
	lcd_goto_xblock(x);
     2f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
	lcd_goto_yblock(y);
     2f6:	81 2f       	mov	r24, r17
     2f8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
}
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <lcd_block>:
void lcd_block(uint8_t x,uint8_t y,uint8_t block) {
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	16 2f       	mov	r17, r22
     306:	04 2f       	mov	r16, r20
  lcd_goto_xblock(x);
     308:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
  lcd_goto_yblock(y);
     30c:	81 2f       	mov	r24, r17
     30e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
  lcd_databits(SEND_DATA,block);
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	60 2f       	mov	r22, r16
     316:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret

00000320 <lcd_all>:

void lcd_all(uint8_t w) {
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	f8 2e       	mov	r15, r24
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
     32c:	8b b1       	in	r24, 0x0b	; 11
     32e:	8c 60       	ori	r24, 0x0C	; 12
     330:	8b b9       	out	0x0b, r24	; 11
     332:	80 91 0a 02 	lds	r24, 0x020A
     336:	90 91 0b 02 	lds	r25, 0x020B
     33a:	00 e0       	ldi	r16, 0x00	; 0
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	12 c0       	rjmp	.+36     	; 0x364 <lcd_all+0x44>
  for(i=0;i<8;i++) {
   lcd_goto_yblock(i);
     340:	80 2f       	mov	r24, r16
     342:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
     346:	c0 e0       	ldi	r28, 0x00	; 0
     348:	d0 e0       	ldi	r29, 0x00	; 0
     34a:	04 c0       	rjmp	.+8      	; 0x354 <lcd_all+0x34>
   for(si=0;si<64;si++)
     lcd_databits(SEND_DATA,w);
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	6f 2d       	mov	r22, r15
     350:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     354:	21 96       	adiw	r28, 0x01	; 1
void lcd_all(uint8_t w) {
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
  for(i=0;i<8;i++) {
   lcd_goto_yblock(i);
   for(si=0;si<64;si++)
     356:	c1 34       	cpi	r28, 0x41	; 65
     358:	d1 05       	cpc	r29, r1
     35a:	c1 f7       	brne	.-16     	; 0x34c <lcd_all+0x2c>
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	80 e4       	ldi	r24, 0x40	; 64
     362:	90 e0       	ldi	r25, 0x00	; 0
}

void lcd_all(uint8_t w) {
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
  for(i=0;i<8;i++) {
     364:	08 30       	cpi	r16, 0x08	; 8
     366:	11 05       	cpc	r17, r1
     368:	58 f3       	brcs	.-42     	; 0x340 <lcd_all+0x20>
     36a:	90 93 0b 02 	sts	0x020B, r25
     36e:	80 93 0a 02 	sts	0x020A, r24
     372:	10 93 0d 02 	sts	0x020D, r17
     376:	00 93 0c 02 	sts	0x020C, r16
   lcd_goto_yblock(i);
   for(si=0;si<64;si++)
     lcd_databits(SEND_DATA,w);
  }
}
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e5 e0       	ldi	r30, 0x05	; 5
     380:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__epilogue_restores__+0x1a>

00000384 <lcd_init>:

void lcd_init() {
  CMDDDR=CSEL1|CSEL2|RW|RS|EN|DI;
     384:	8c ef       	ldi	r24, 0xFC	; 252
     386:	8a b9       	out	0x0a, r24	; 10
  CMDPORT=0x00;
     388:	1b b8       	out	0x0b, r1	; 11
  DATADDR=0xff;
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	87 b9       	out	0x07, r24	; 7
  DATAPORT=0x00;
     38e:	18 b8       	out	0x08, r1	; 8
     390:	28 ee       	ldi	r18, 0xE8	; 232
     392:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     394:	48 e8       	ldi	r20, 0x88	; 136
     396:	53 e1       	ldi	r21, 0x13	; 19
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_init+0x1c>
     39a:	ca 01       	movw	r24, r20
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x18>
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	30 40       	sbci	r19, 0x00	; 0
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	2f 3f       	cpi	r18, 0xFF	; 255
     3a8:	38 07       	cpc	r19, r24
     3aa:	b9 f7       	brne	.-18     	; 0x39a <lcd_init+0x16>
  CMDDDR=CSEL1|CSEL2|RW|RS|EN|DI;
  CMDPORT=0x00;
  DATADDR=0xff;
  DATAPORT=0x00;
  delay_ms(1000);
  CMDPORT=RS|CSEL1|CSEL2;
     3ac:	8c e8       	ldi	r24, 0x8C	; 140
     3ae:	8b b9       	out	0x0b, r24	; 11
  lcd_databits(SEND_CMD,0x3f);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	6f e3       	ldi	r22, 0x3F	; 63
     3b4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xc0);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	60 ec       	ldi	r22, 0xC0	; 192
     3bc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0x40);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	60 e4       	ldi	r22, 0x40	; 64
     3c4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xb8);
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	68 eb       	ldi	r22, 0xB8	; 184
     3cc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_all(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 90 01 	call	0x320	; 0x320 <lcd_all>
}
     3d6:	08 95       	ret

000003d8 <lcd_read>:
		x+=6;
	}
}

uint8_t lcd_read(uint8_t x,uint8_t y) {
	lcd_goto(x,y);
     3d8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
	CMDPORT|=DI|RW;
     3dc:	8b b1       	in	r24, 0x0b	; 11
     3de:	80 63       	ori	r24, 0x30	; 48
     3e0:	8b b9       	out	0x0b, r24	; 11
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3e6:	36 e0       	ldi	r19, 0x06	; 6
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <lcd_read+0x18>
     3ea:	23 2f       	mov	r18, r19
     3ec:	2a 95       	dec	r18
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_read+0x14>
     3f0:	01 96       	adiw	r24, 0x01	; 1
	while(delay--)
		_delay_ms(1);
}

void delay_us(unsigned long long  int delay) {
	while(delay--)
     3f2:	87 30       	cpi	r24, 0x07	; 7
     3f4:	91 05       	cpc	r25, r1
     3f6:	c9 f7       	brne	.-14     	; 0x3ea <lcd_read+0x12>

uint8_t lcd_read(uint8_t x,uint8_t y) {
	lcd_goto(x,y);
	CMDPORT|=DI|RW;
	delay_us(6);
	CMDPORT&=~(DI|RW);
     3f8:	8b b1       	in	r24, 0x0b	; 11
     3fa:	8f 7c       	andi	r24, 0xCF	; 207
     3fc:	8b b9       	out	0x0b, r24	; 11
	return(DATAPORT);
     3fe:	88 b1       	in	r24, 0x08	; 8
	
}
     400:	08 95       	ret

00000402 <lcd_pixel>:

inline void lcd_pixel(uint8_t x,uint8_t y) {
     402:	e8 2f       	mov	r30, r24
    lcd_block(x,(y-y%8)/8,1<<(y%8));
     404:	26 2f       	mov	r18, r22
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	c9 01       	movw	r24, r18
     40a:	88 7f       	andi	r24, 0xF8	; 248
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__divmodhi4>
     414:	27 70       	andi	r18, 0x07	; 7
     416:	30 70       	andi	r19, 0x00	; 0
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <lcd_pixel+0x20>
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	2a 95       	dec	r18
     424:	e2 f7       	brpl	.-8      	; 0x41e <lcd_pixel+0x1c>
     426:	8e 2f       	mov	r24, r30
     428:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
}
     42c:	08 95       	ret

0000042e <lcd_pixel_share>:

void lcd_pixel_share(uint8_t x,uint8_t y) {
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	e8 2e       	mov	r14, r24
	lcd_block(x,(y-y%8)/8,(1<<(y%8))|lcd_read(x,(y-y%8)/8));
     438:	06 2f       	mov	r16, r22
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	c8 01       	movw	r24, r16
     43e:	88 7f       	andi	r24, 0xF8	; 248
     440:	68 e0       	ldi	r22, 0x08	; 8
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__divmodhi4>
     448:	f6 2e       	mov	r15, r22
     44a:	8e 2d       	mov	r24, r14
     44c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_read>
     450:	07 70       	andi	r16, 0x07	; 7
     452:	10 70       	andi	r17, 0x00	; 0
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <lcd_pixel_share+0x30>
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	0a 95       	dec	r16
     460:	e2 f7       	brpl	.-8      	; 0x45a <lcd_pixel_share+0x2c>
     462:	48 2f       	mov	r20, r24
     464:	42 2b       	or	r20, r18
     466:	8e 2d       	mov	r24, r14
     468:	6f 2d       	mov	r22, r15
     46a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
}
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	08 95       	ret

00000478 <lcd_line_from_bottom>:

void lcd_line_from_bottom(uint8_t x1,uint8_t y1) {
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e2 e4       	ldi	r30, 0x42	; 66
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x16>
     484:	d8 2e       	mov	r13, r24
	int y=0;
	uint8_t res=0;
	for(y=7;y>(7-((y1-y1%8)/8));y--) {
     486:	e6 2e       	mov	r14, r22
     488:	ff 24       	eor	r15, r15
     48a:	c7 01       	movw	r24, r14
     48c:	88 7f       	andi	r24, 0xF8	; 248
     48e:	68 e0       	ldi	r22, 0x08	; 8
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__divmodhi4>
     496:	00 27       	eor	r16, r16
     498:	11 27       	eor	r17, r17
     49a:	06 1b       	sub	r16, r22
     49c:	17 0b       	sbc	r17, r23
     49e:	09 5f       	subi	r16, 0xF9	; 249
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	c7 e0       	ldi	r28, 0x07	; 7
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	0b c0       	rjmp	.+22     	; 0x4be <lcd_line_from_bottom+0x46>
		lcd_goto_xblock(x1);
     4a8:	8d 2d       	mov	r24, r13
     4aa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     4ae:	8c 2f       	mov	r24, r28
     4b0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_databits(SEND_DATA,0xff);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	6f ef       	ldi	r22, 0xFF	; 255
     4b8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}

void lcd_line_from_bottom(uint8_t x1,uint8_t y1) {
	int y=0;
	uint8_t res=0;
	for(y=7;y>(7-((y1-y1%8)/8));y--) {
     4bc:	21 97       	sbiw	r28, 0x01	; 1
     4be:	0c 17       	cp	r16, r28
     4c0:	1d 07       	cpc	r17, r29
     4c2:	94 f3       	brlt	.-28     	; 0x4a8 <lcd_line_from_bottom+0x30>
		lcd_goto_xblock(x1);
		lcd_goto_yblock(y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto_xblock(x1);
     4c4:	8d 2d       	mov	r24, r13
     4c6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
	lcd_goto_yblock(y);
     4ca:	8c 2f       	mov	r24, r28
     4cc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
     4d0:	27 e0       	ldi	r18, 0x07	; 7
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
	for(y=7;y>=(7-y1%8);y--) {
     4d6:	b7 01       	movw	r22, r14
     4d8:	60 95       	com	r22
     4da:	70 95       	com	r23
     4dc:	67 70       	andi	r22, 0x07	; 7
     4de:	70 70       	andi	r23, 0x00	; 0
		res|=1<<y;
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	0a c0       	rjmp	.+20     	; 0x4fa <lcd_line_from_bottom+0x82>
     4e6:	cf 01       	movw	r24, r30
     4e8:	02 2e       	mov	r0, r18
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <lcd_line_from_bottom+0x78>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <lcd_line_from_bottom+0x74>
     4f4:	48 2b       	or	r20, r24
		lcd_goto_yblock(y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto_xblock(x1);
	lcd_goto_yblock(y);
	for(y=7;y>=(7-y1%8);y--) {
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	30 40       	sbci	r19, 0x00	; 0
     4fa:	26 17       	cp	r18, r22
     4fc:	37 07       	cpc	r19, r23
     4fe:	9c f7       	brge	.-26     	; 0x4e6 <lcd_line_from_bottom+0x6e>
		res|=1<<y;
	}
	if(res) lcd_databits(SEND_DATA,res);
     500:	44 23       	and	r20, r20
     502:	21 f0       	breq	.+8      	; 0x50c <lcd_line_from_bottom+0x94>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	64 2f       	mov	r22, r20
     508:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	e7 e0       	ldi	r30, 0x07	; 7
     512:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x16>

00000516 <lcd_pixel_line_from_left>:

void lcd_pixel_line_from_left(uint8_t y, uint16_t v) {
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e1 e9       	ldi	r30, 0x91	; 145
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x16>
     522:	d8 2e       	mov	r13, r24
     524:	7b 01       	movw	r14, r22
	uint16_t s=(v-v%8)/8,x;
     526:	8b 01       	movw	r16, r22
     528:	23 e0       	ldi	r18, 0x03	; 3
     52a:	16 95       	lsr	r17
     52c:	07 95       	ror	r16
     52e:	2a 95       	dec	r18
     530:	e1 f7       	brne	.-8      	; 0x52a <lcd_pixel_line_from_left+0x14>
     532:	c0 e0       	ldi	r28, 0x00	; 0
     534:	d0 e0       	ldi	r29, 0x00	; 0
     536:	09 c0       	rjmp	.+18     	; 0x54a <lcd_pixel_line_from_left+0x34>
	uint8_t r;
	for(x=0;x<s;x++) {
		lcd_goto(x,y);
     538:	8c 2f       	mov	r24, r28
     53a:	6d 2d       	mov	r22, r13
     53c:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
		lcd_databits(SEND_DATA,0xff);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	6f ef       	ldi	r22, 0xFF	; 255
     544:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}

void lcd_pixel_line_from_left(uint8_t y, uint16_t v) {
	uint16_t s=(v-v%8)/8,x;
	uint8_t r;
	for(x=0;x<s;x++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c0 17       	cp	r28, r16
     54c:	d1 07       	cpc	r29, r17
     54e:	a0 f3       	brcs	.-24     	; 0x538 <lcd_pixel_line_from_left+0x22>
		lcd_goto(x,y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto(x,y);
     550:	80 2f       	mov	r24, r16
     552:	6d 2d       	mov	r22, r13
     554:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
	s=v%8;
     558:	b7 01       	movw	r22, r14
     55a:	67 70       	andi	r22, 0x07	; 7
     55c:	70 70       	andi	r23, 0x00	; 0
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e0       	ldi	r20, 0x00	; 0
	r=0;
	for(x=0;x<=s;x++) {
		r|=1<<(7-x);
     564:	a7 e0       	ldi	r26, 0x07	; 7
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	e1 e0       	ldi	r30, 0x01	; 1
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	cd 01       	movw	r24, r26
     56e:	82 1b       	sub	r24, r18
     570:	93 0b       	sbc	r25, r19
     572:	ef 01       	movw	r28, r30
     574:	02 c0       	rjmp	.+4      	; 0x57a <lcd_pixel_line_from_left+0x64>
     576:	cc 0f       	add	r28, r28
     578:	dd 1f       	adc	r29, r29
     57a:	8a 95       	dec	r24
     57c:	e2 f7       	brpl	.-8      	; 0x576 <lcd_pixel_line_from_left+0x60>
     57e:	4c 2b       	or	r20, r28
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto(x,y);
	s=v%8;
	r=0;
	for(x=0;x<=s;x++) {
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	62 17       	cp	r22, r18
     586:	73 07       	cpc	r23, r19
     588:	88 f7       	brcc	.-30     	; 0x56c <lcd_pixel_line_from_left+0x56>
		r|=1<<(7-x);
	}
	lcd_databits(SEND_DATA,r);
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	64 2f       	mov	r22, r20
     58e:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	e7 e0       	ldi	r30, 0x07	; 7
     598:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x16>

0000059c <lcd_yblockof>:
		x-=FONT_SIZE+1;
		n-=m;
		n/=10;
	}
}
inline uint8_t lcd_yblockof(uint8_t y) {
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	88 7f       	andi	r24, 0xF8	; 248
     5a0:	68 e0       	ldi	r22, 0x08	; 8
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__divmodhi4>
     5a8:	86 2f       	mov	r24, r22
	return((y-y%8)/8);
}
     5aa:	08 95       	ret

000005ac <lcd_constx_line>:
void lcd_constx_line(uint8_t x,uint8_t ymin,uint8_t ymax) {
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	e8 2e       	mov	r14, r24
     5ba:	16 2f       	mov	r17, r22
     5bc:	f4 2e       	mov	r15, r20
     5be:	00 e0       	ldi	r16, 0x00	; 0
	static uint8_t buf;
	buf=0;
	while(ymin<=ymax) {
		buf|=1<<(ymin%8);
     5c0:	c1 e0       	ldi	r28, 0x01	; 1
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
     5c4:	1e c0       	rjmp	.+60     	; 0x602 <lcd_constx_line+0x56>
     5c6:	81 2f       	mov	r24, r17
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	87 70       	andi	r24, 0x07	; 7
     5cc:	90 70       	andi	r25, 0x00	; 0
     5ce:	9e 01       	movw	r18, r28
     5d0:	08 2e       	mov	r0, r24
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <lcd_constx_line+0x2c>
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <lcd_constx_line+0x28>
     5dc:	02 2b       	or	r16, r18
		if(((ymin%8)==7)||(ymin==ymax)) {
     5de:	07 97       	sbiw	r24, 0x07	; 7
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <lcd_constx_line+0x3a>
     5e2:	1f 15       	cp	r17, r15
     5e4:	69 f4       	brne	.+26     	; 0x600 <lcd_constx_line+0x54>
			lcd_goto_xblock(x);
     5e6:	8e 2d       	mov	r24, r14
     5e8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
			lcd_goto_yblock(lcd_yblockof(ymin));
     5ec:	81 2f       	mov	r24, r17
     5ee:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_yblockof>
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
			lcd_databits(SEND_DATA,buf);
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	60 2f       	mov	r22, r16
     5fa:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     5fe:	00 e0       	ldi	r16, 0x00	; 0
			buf=0;
		}
		ymin++;
     600:	1f 5f       	subi	r17, 0xFF	; 255
	return((y-y%8)/8);
}
void lcd_constx_line(uint8_t x,uint8_t ymin,uint8_t ymax) {
	static uint8_t buf;
	buf=0;
	while(ymin<=ymax) {
     602:	f1 16       	cp	r15, r17
     604:	00 f7       	brcc	.-64     	; 0x5c6 <lcd_constx_line+0x1a>
     606:	00 93 08 02 	sts	0x0208, r16
			lcd_databits(SEND_DATA,buf);
			buf=0;
		}
		ymin++;
	}
}
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	e6 e0       	ldi	r30, 0x06	; 6
     610:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__epilogue_restores__+0x18>

00000614 <buttons_update>:

//temp
uint16_t ymin,ymax,c,c1;

inline void buttons_update() {
	right_state1=right_state();
     614:	83 b1       	in	r24, 0x03	; 3
     616:	82 70       	andi	r24, 0x02	; 2
     618:	80 93 fd 01 	sts	0x01FD, r24
	left_state1=left_state();
     61c:	83 b1       	in	r24, 0x03	; 3
     61e:	84 70       	andi	r24, 0x04	; 4
     620:	80 93 fc 01 	sts	0x01FC, r24
	top_state1=top_state();
     624:	83 b1       	in	r24, 0x03	; 3
     626:	81 70       	andi	r24, 0x01	; 1
     628:	80 93 fb 01 	sts	0x01FB, r24
	up_state1=up_state();
     62c:	83 b1       	in	r24, 0x03	; 3
     62e:	80 71       	andi	r24, 0x10	; 16
     630:	80 93 fe 01 	sts	0x01FE, r24
	down_state1=down_state();
     634:	83 b1       	in	r24, 0x03	; 3
     636:	80 72       	andi	r24, 0x20	; 32
     638:	80 93 ff 01 	sts	0x01FF, r24
}
     63c:	08 95       	ret

0000063e <todisplay>:
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     63e:	80 91 f1 01 	lds	r24, 0x01F1
     642:	8f 3f       	cpi	r24, 0xFF	; 255
     644:	21 f4       	brne	.+8      	; 0x64e <todisplay+0x10>
     646:	96 95       	lsr	r25
     648:	8f e3       	ldi	r24, 0x3F	; 63
     64a:	89 1b       	sub	r24, r25
     64c:	08 95       	ret
	else return(DISPLAY_Y-1-(a>>10));
     64e:	96 95       	lsr	r25
     650:	96 95       	lsr	r25
     652:	8f e3       	ldi	r24, 0x3F	; 63
     654:	89 1b       	sub	r24, r25
}
     656:	08 95       	ret

00000658 <draw_signal>:
		if(menu_state==MENU_MODE) lcd_str("mode",0,1);
		lcd_arrows(0,2);
	}
}

void draw_signal() {
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
	for(m=0;m<ALL_N;m++) {
     65c:	10 92 f8 01 	sts	0x01F8, r1
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
	else return(DISPLAY_Y-1-(a>>10));
     660:	1f e3       	ldi	r17, 0x3F	; 63
		}
		if(menu_state==-1) {
			for(s=0;s<8;s++) lcd_block(u,s,0);
		}
		else {
			for(s=4;s<8;s++) lcd_block(u,s,0);
     662:	04 e0       	ldi	r16, 0x04	; 4
     664:	46 c1       	rjmp	.+652    	; 0x8f2 <draw_signal+0x29a>
	}
}

void draw_signal() {
	for(m=0;m<ALL_N;m++) {
		c=todisplay(capture[m]);
     666:	a6 2f       	mov	r26, r22
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	fd 01       	movw	r30, r26
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	ea 56       	subi	r30, 0x6A	; 106
     672:	fb 4f       	sbci	r31, 0xFB	; 251
     674:	81 81       	ldd	r24, Z+1	; 0x01
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     676:	70 91 f1 01 	lds	r23, 0x01F1
     67a:	7f 3f       	cpi	r23, 0xFF	; 255
     67c:	11 f4       	brne	.+4      	; 0x682 <draw_signal+0x2a>
     67e:	86 95       	lsr	r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <draw_signal+0x2e>
	else return(DISPLAY_Y-1-(a>>10));
     682:	86 95       	lsr	r24
     684:	86 95       	lsr	r24
     686:	91 2f       	mov	r25, r17
     688:	98 1b       	sub	r25, r24
	}
}

void draw_signal() {
	for(m=0;m<ALL_N;m++) {
		c=todisplay(capture[m]);
     68a:	49 2f       	mov	r20, r25
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	50 93 94 04 	sts	0x0494, r21
     692:	40 93 93 04 	sts	0x0493, r20
		if(mode==MODE_DUAL)  {
     696:	80 91 ee 01 	lds	r24, 0x01EE
     69a:	84 30       	cpi	r24, 0x04	; 4
     69c:	09 f0       	breq	.+2      	; 0x6a0 <draw_signal+0x48>
     69e:	7e c0       	rjmp	.+252    	; 0x79c <draw_signal+0x144>
			//prev
			if(m>1) {
     6a0:	62 30       	cpi	r22, 0x02	; 2
     6a2:	60 f1       	brcs	.+88     	; 0x6fc <draw_signal+0xa4>
				c1=todisplay(capture[m-2]);
     6a4:	fd 01       	movw	r30, r26
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	ee 56       	subi	r30, 0x6E	; 110
     6ac:	fb 4f       	sbci	r31, 0xFB	; 251
     6ae:	81 81       	ldd	r24, Z+1	; 0x01
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     6b0:	7f 3f       	cpi	r23, 0xFF	; 255
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <draw_signal+0x60>
     6b4:	86 95       	lsr	r24
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <draw_signal+0x64>
	else return(DISPLAY_Y-1-(a>>10));
     6b8:	86 95       	lsr	r24
     6ba:	86 95       	lsr	r24
     6bc:	91 2f       	mov	r25, r17
     6be:	98 1b       	sub	r25, r24
	for(m=0;m<ALL_N;m++) {
		c=todisplay(capture[m]);
		if(mode==MODE_DUAL)  {
			//prev
			if(m>1) {
				c1=todisplay(capture[m-2]);
     6c0:	29 2f       	mov	r18, r25
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	30 93 92 04 	sts	0x0492, r19
     6c8:	20 93 91 04 	sts	0x0491, r18
				if(c1<c) ymin=(c1+c)>>1;
     6cc:	24 17       	cp	r18, r20
     6ce:	35 07       	cpc	r19, r21
     6d0:	48 f4       	brcc	.+18     	; 0x6e4 <draw_signal+0x8c>
     6d2:	c9 01       	movw	r24, r18
     6d4:	84 0f       	add	r24, r20
     6d6:	95 1f       	adc	r25, r21
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	90 93 97 05 	sts	0x0597, r25
     6e0:	80 93 96 05 	sts	0x0596, r24
				if(c1>c) ymax=(c1+c)>>1;
     6e4:	42 17       	cp	r20, r18
     6e6:	53 07       	cpc	r21, r19
     6e8:	88 f4       	brcc	.+34     	; 0x70c <draw_signal+0xb4>
     6ea:	24 0f       	add	r18, r20
     6ec:	35 1f       	adc	r19, r21
     6ee:	36 95       	lsr	r19
     6f0:	27 95       	ror	r18
     6f2:	30 93 9b 05 	sts	0x059B, r19
     6f6:	20 93 9a 05 	sts	0x059A, r18
     6fa:	08 c0       	rjmp	.+16     	; 0x70c <draw_signal+0xb4>
			}
			else {
				ymin=c;
     6fc:	50 93 97 05 	sts	0x0597, r21
     700:	40 93 96 05 	sts	0x0596, r20
				ymax=c;
     704:	50 93 9b 05 	sts	0x059B, r21
     708:	40 93 9a 05 	sts	0x059A, r20
			}
			
			//next
			if(m<(ALL_N-2)) {
     70c:	6e 37       	cpi	r22, 0x7E	; 126
     70e:	f0 f5       	brcc	.+124    	; 0x78c <draw_signal+0x134>
				c1=todisplay(capture[m+2]);
     710:	aa 0f       	add	r26, r26
     712:	bb 1f       	adc	r27, r27
     714:	a6 56       	subi	r26, 0x66	; 102
     716:	bb 4f       	sbci	r27, 0xFB	; 251
     718:	11 96       	adiw	r26, 0x01	; 1
     71a:	ec 91       	ld	r30, X
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     71c:	7f 3f       	cpi	r23, 0xFF	; 255
     71e:	29 f4       	brne	.+10     	; 0x72a <draw_signal+0xd2>
     720:	e6 95       	lsr	r30
     722:	81 2f       	mov	r24, r17
     724:	8e 1b       	sub	r24, r30
     726:	e8 2f       	mov	r30, r24
     728:	05 c0       	rjmp	.+10     	; 0x734 <draw_signal+0xdc>
	else return(DISPLAY_Y-1-(a>>10));
     72a:	e6 95       	lsr	r30
     72c:	e6 95       	lsr	r30
     72e:	91 2f       	mov	r25, r17
     730:	9e 1b       	sub	r25, r30
     732:	e9 2f       	mov	r30, r25
				ymax=c;
			}
			
			//next
			if(m<(ALL_N-2)) {
				c1=todisplay(capture[m+2]);
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	f0 93 92 04 	sts	0x0492, r31
     73a:	e0 93 91 04 	sts	0x0491, r30
				if(c1<c) ymin=min(ymin,(c+c1)>>1);
     73e:	e4 17       	cp	r30, r20
     740:	f5 07       	cpc	r31, r21
     742:	88 f4       	brcc	.+34     	; 0x766 <draw_signal+0x10e>
     744:	cf 01       	movw	r24, r30
     746:	84 0f       	add	r24, r20
     748:	95 1f       	adc	r25, r21
     74a:	20 91 96 05 	lds	r18, 0x0596
     74e:	30 91 97 05 	lds	r19, 0x0597
     752:	96 95       	lsr	r25
     754:	87 95       	ror	r24
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	08 f4       	brcc	.+2      	; 0x75e <draw_signal+0x106>
     75c:	c9 01       	movw	r24, r18
     75e:	90 93 97 05 	sts	0x0597, r25
     762:	80 93 96 05 	sts	0x0596, r24
				if(c1>c) ymax=max(ymax,(c1+c)>>1);
     766:	4e 17       	cp	r20, r30
     768:	5f 07       	cpc	r21, r31
     76a:	80 f4       	brcc	.+32     	; 0x78c <draw_signal+0x134>
     76c:	e4 0f       	add	r30, r20
     76e:	f5 1f       	adc	r31, r21
     770:	80 91 9a 05 	lds	r24, 0x059A
     774:	90 91 9b 05 	lds	r25, 0x059B
     778:	f6 95       	lsr	r31
     77a:	e7 95       	ror	r30
     77c:	e8 17       	cp	r30, r24
     77e:	f9 07       	cpc	r31, r25
     780:	08 f4       	brcc	.+2      	; 0x784 <draw_signal+0x12c>
     782:	fc 01       	movw	r30, r24
     784:	f0 93 9b 05 	sts	0x059B, r31
     788:	e0 93 9a 05 	sts	0x059A, r30
			}
			
			u=m/2;
     78c:	86 2f       	mov	r24, r22
     78e:	86 95       	lsr	r24
     790:	80 93 9c 05 	sts	0x059C, r24
			m++;
     794:	6f 5f       	subi	r22, 0xFF	; 255
     796:	60 93 f8 01 	sts	0x01F8, r22
     79a:	79 c0       	rjmp	.+242    	; 0x88e <draw_signal+0x236>
		}
		else {
			
			//prev
			if(m) {
     79c:	66 23       	and	r22, r22
     79e:	61 f1       	breq	.+88     	; 0x7f8 <draw_signal+0x1a0>
				c1=todisplay(capture[m-1]);
     7a0:	fd 01       	movw	r30, r26
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	ec 56       	subi	r30, 0x6C	; 108
     7a8:	fb 4f       	sbci	r31, 0xFB	; 251
     7aa:	81 81       	ldd	r24, Z+1	; 0x01
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     7ac:	7f 3f       	cpi	r23, 0xFF	; 255
     7ae:	11 f4       	brne	.+4      	; 0x7b4 <draw_signal+0x15c>
     7b0:	86 95       	lsr	r24
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <draw_signal+0x160>
	else return(DISPLAY_Y-1-(a>>10));
     7b4:	86 95       	lsr	r24
     7b6:	86 95       	lsr	r24
     7b8:	91 2f       	mov	r25, r17
     7ba:	98 1b       	sub	r25, r24
		}
		else {
			
			//prev
			if(m) {
				c1=todisplay(capture[m-1]);
     7bc:	29 2f       	mov	r18, r25
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	30 93 92 04 	sts	0x0492, r19
     7c4:	20 93 91 04 	sts	0x0491, r18
				if(c1<c) ymin=(c1+c)>>1;
     7c8:	24 17       	cp	r18, r20
     7ca:	35 07       	cpc	r19, r21
     7cc:	48 f4       	brcc	.+18     	; 0x7e0 <draw_signal+0x188>
     7ce:	c9 01       	movw	r24, r18
     7d0:	84 0f       	add	r24, r20
     7d2:	95 1f       	adc	r25, r21
     7d4:	96 95       	lsr	r25
     7d6:	87 95       	ror	r24
     7d8:	90 93 97 05 	sts	0x0597, r25
     7dc:	80 93 96 05 	sts	0x0596, r24
				if(c1>c) ymax=(c1+c)>>1;
     7e0:	42 17       	cp	r20, r18
     7e2:	53 07       	cpc	r21, r19
     7e4:	90 f4       	brcc	.+36     	; 0x80a <draw_signal+0x1b2>
     7e6:	24 0f       	add	r18, r20
     7e8:	35 1f       	adc	r19, r21
     7ea:	36 95       	lsr	r19
     7ec:	27 95       	ror	r18
     7ee:	30 93 9b 05 	sts	0x059B, r19
     7f2:	20 93 9a 05 	sts	0x059A, r18
     7f6:	09 c0       	rjmp	.+18     	; 0x80a <draw_signal+0x1b2>
			}
			else {
				ymin=c;
     7f8:	50 93 97 05 	sts	0x0597, r21
     7fc:	40 93 96 05 	sts	0x0596, r20
				ymax=c;
     800:	50 93 9b 05 	sts	0x059B, r21
     804:	40 93 9a 05 	sts	0x059A, r20
     808:	02 c0       	rjmp	.+4      	; 0x80e <draw_signal+0x1b6>
			}
			
			//next
			if(m<(ALL_N-1)) {
     80a:	6f 37       	cpi	r22, 0x7F	; 127
     80c:	f0 f5       	brcc	.+124    	; 0x88a <draw_signal+0x232>
				c1=todisplay(capture[m+1]);
     80e:	aa 0f       	add	r26, r26
     810:	bb 1f       	adc	r27, r27
     812:	a8 56       	subi	r26, 0x68	; 104
     814:	bb 4f       	sbci	r27, 0xFB	; 251
     816:	11 96       	adiw	r26, 0x01	; 1
     818:	ec 91       	ld	r30, X
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     81a:	7f 3f       	cpi	r23, 0xFF	; 255
     81c:	29 f4       	brne	.+10     	; 0x828 <draw_signal+0x1d0>
     81e:	e6 95       	lsr	r30
     820:	81 2f       	mov	r24, r17
     822:	8e 1b       	sub	r24, r30
     824:	e8 2f       	mov	r30, r24
     826:	05 c0       	rjmp	.+10     	; 0x832 <draw_signal+0x1da>
	else return(DISPLAY_Y-1-(a>>10));
     828:	e6 95       	lsr	r30
     82a:	e6 95       	lsr	r30
     82c:	91 2f       	mov	r25, r17
     82e:	9e 1b       	sub	r25, r30
     830:	e9 2f       	mov	r30, r25
				ymax=c;
			}
			
			//next
			if(m<(ALL_N-1)) {
				c1=todisplay(capture[m+1]);
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	f0 93 92 04 	sts	0x0492, r31
     838:	e0 93 91 04 	sts	0x0491, r30
				if(c1<c) ymin=min(ymin,(c+c1)>>1);
     83c:	e4 17       	cp	r30, r20
     83e:	f5 07       	cpc	r31, r21
     840:	88 f4       	brcc	.+34     	; 0x864 <draw_signal+0x20c>
     842:	cf 01       	movw	r24, r30
     844:	84 0f       	add	r24, r20
     846:	95 1f       	adc	r25, r21
     848:	20 91 96 05 	lds	r18, 0x0596
     84c:	30 91 97 05 	lds	r19, 0x0597
     850:	96 95       	lsr	r25
     852:	87 95       	ror	r24
     854:	28 17       	cp	r18, r24
     856:	39 07       	cpc	r19, r25
     858:	08 f4       	brcc	.+2      	; 0x85c <draw_signal+0x204>
     85a:	c9 01       	movw	r24, r18
     85c:	90 93 97 05 	sts	0x0597, r25
     860:	80 93 96 05 	sts	0x0596, r24
				if(c1>c) ymax=max(ymax,(c1+c)>>1);
     864:	4e 17       	cp	r20, r30
     866:	5f 07       	cpc	r21, r31
     868:	80 f4       	brcc	.+32     	; 0x88a <draw_signal+0x232>
     86a:	e4 0f       	add	r30, r20
     86c:	f5 1f       	adc	r31, r21
     86e:	80 91 9a 05 	lds	r24, 0x059A
     872:	90 91 9b 05 	lds	r25, 0x059B
     876:	f6 95       	lsr	r31
     878:	e7 95       	ror	r30
     87a:	e8 17       	cp	r30, r24
     87c:	f9 07       	cpc	r31, r25
     87e:	08 f4       	brcc	.+2      	; 0x882 <draw_signal+0x22a>
     880:	fc 01       	movw	r30, r24
     882:	f0 93 9b 05 	sts	0x059B, r31
     886:	e0 93 9a 05 	sts	0x059A, r30
			}
			u=m;
     88a:	60 93 9c 05 	sts	0x059C, r22
		}
		if(menu_state==-1) {
     88e:	7f 3f       	cpi	r23, 0xFF	; 255
     890:	91 f4       	brne	.+36     	; 0x8b6 <draw_signal+0x25e>
			for(s=0;s<8;s++) lcd_block(u,s,0);
     892:	10 92 95 04 	sts	0x0495, r1
     896:	0a c0       	rjmp	.+20     	; 0x8ac <draw_signal+0x254>
     898:	80 91 9c 05 	lds	r24, 0x059C
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     8a2:	80 91 95 04 	lds	r24, 0x0495
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 95 04 	sts	0x0495, r24
     8ac:	60 91 95 04 	lds	r22, 0x0495
     8b0:	68 30       	cpi	r22, 0x08	; 8
     8b2:	90 f3       	brcs	.-28     	; 0x898 <draw_signal+0x240>
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <draw_signal+0x280>
		}
		else {
			for(s=4;s<8;s++) lcd_block(u,s,0);
     8b6:	00 93 95 04 	sts	0x0495, r16
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <draw_signal+0x278>
     8bc:	80 91 9c 05 	lds	r24, 0x059C
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     8c6:	80 91 95 04 	lds	r24, 0x0495
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	80 93 95 04 	sts	0x0495, r24
     8d0:	60 91 95 04 	lds	r22, 0x0495
     8d4:	68 30       	cpi	r22, 0x08	; 8
     8d6:	90 f3       	brcs	.-28     	; 0x8bc <draw_signal+0x264>
		}
		lcd_constx_line(u,ymin,ymax);
     8d8:	80 91 9c 05 	lds	r24, 0x059C
     8dc:	60 91 96 05 	lds	r22, 0x0596
     8e0:	40 91 9a 05 	lds	r20, 0x059A
     8e4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_constx_line>
		lcd_arrows(0,2);
	}
}

void draw_signal() {
	for(m=0;m<ALL_N;m++) {
     8e8:	80 91 f8 01 	lds	r24, 0x01F8
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	80 93 f8 01 	sts	0x01F8, r24
     8f2:	60 91 f8 01 	lds	r22, 0x01F8
     8f6:	67 ff       	sbrs	r22, 7
     8f8:	b6 ce       	rjmp	.-660    	; 0x666 <draw_signal+0xe>
		else {
			for(s=4;s<8;s++) lcd_block(u,s,0);
		}
		lcd_constx_line(u,ymin,ymax);
	}
}
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <__vector_14>:

ISR(TIMER1_COMPB_vect) {
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	8f 93       	push	r24
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
	TCNT1=0;
     910:	10 92 85 00 	sts	0x0085, r1
     914:	10 92 84 00 	sts	0x0084, r1
	ADCSRA|=1<<6;
     918:	ea e7       	ldi	r30, 0x7A	; 122
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	80 64       	ori	r24, 0x40	; 64
     920:	80 83       	st	Z, r24
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	8f 91       	pop	r24
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0
     92e:	1f 90       	pop	r1
     930:	18 95       	reti

00000932 <__vector_24>:

ISR(ADC_vect) {
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
	if((current<ALL_N)||mode==MODE_UART) {
     952:	80 91 fa 01 	lds	r24, 0x01FA
     956:	87 ff       	sbrs	r24, 7
     958:	05 c0       	rjmp	.+10     	; 0x964 <__vector_24+0x32>
     95a:	80 91 ee 01 	lds	r24, 0x01EE
     95e:	85 30       	cpi	r24, 0x05	; 5
     960:	09 f0       	breq	.+2      	; 0x964 <__vector_24+0x32>
     962:	79 c0       	rjmp	.+242    	; 0xa56 <__vector_24+0x124>
		if(mode==MODE_UART) current=ALL_N-1;
     964:	a0 91 ee 01 	lds	r26, 0x01EE
     968:	a5 30       	cpi	r26, 0x05	; 5
     96a:	19 f4       	brne	.+6      	; 0x972 <__vector_24+0x40>
     96c:	8f e7       	ldi	r24, 0x7F	; 127
     96e:	80 93 fa 01 	sts	0x01FA, r24
		if(mode==MODE_SIGNAL||mode==MODE_SPECTRUM||mode==MODE_DUAL||mode==MODE_UART_BUF) {
     972:	8a 2f       	mov	r24, r26
     974:	81 50       	subi	r24, 0x01	; 1
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	28 f0       	brcs	.+10     	; 0x984 <__vector_24+0x52>
     97a:	a4 30       	cpi	r26, 0x04	; 4
     97c:	19 f0       	breq	.+6      	; 0x984 <__vector_24+0x52>
     97e:	a6 30       	cpi	r26, 0x06	; 6
     980:	09 f0       	breq	.+2      	; 0x984 <__vector_24+0x52>
     982:	42 c0       	rjmp	.+132    	; 0xa08 <__vector_24+0xd6>
			if(adc_reset_c>=adc_reset) {
     984:	40 91 06 02 	lds	r20, 0x0206
     988:	50 91 07 02 	lds	r21, 0x0207
     98c:	80 91 f6 01 	lds	r24, 0x01F6
     990:	90 91 f7 01 	lds	r25, 0x01F7
     994:	48 17       	cp	r20, r24
     996:	59 07       	cpc	r21, r25
     998:	38 f0       	brcs	.+14     	; 0x9a8 <__vector_24+0x76>
				adc_reset_c=0;
     99a:	10 92 07 02 	sts	0x0207, r1
     99e:	10 92 06 02 	sts	0x0206, r1
				array_filled=0;
     9a2:	10 92 01 02 	sts	0x0201, r1
     9a6:	2d c0       	rjmp	.+90     	; 0xa02 <__vector_24+0xd0>
				current=0;
				return;
			}
			if(array_filled&&(abs(ADC-capture[current])>adc_error)&&current<adc_check) {
     9a8:	80 91 01 02 	lds	r24, 0x0201
     9ac:	88 23       	and	r24, r24
     9ae:	61 f1       	breq	.+88     	; 0xa08 <__vector_24+0xd6>
     9b0:	80 91 78 00 	lds	r24, 0x0078
     9b4:	90 91 79 00 	lds	r25, 0x0079
     9b8:	20 91 78 00 	lds	r18, 0x0078
     9bc:	30 91 79 00 	lds	r19, 0x0079
     9c0:	80 91 fa 01 	lds	r24, 0x01FA
     9c4:	68 2f       	mov	r22, r24
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	fb 01       	movw	r30, r22
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	ea 56       	subi	r30, 0x6A	; 106
     9d0:	fb 4f       	sbci	r31, 0xFB	; 251
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	28 1b       	sub	r18, r24
     9d8:	39 0b       	sbc	r19, r25
     9da:	80 91 f2 01 	lds	r24, 0x01F2
     9de:	90 91 f3 01 	lds	r25, 0x01F3
     9e2:	82 17       	cp	r24, r18
     9e4:	93 07       	cpc	r25, r19
     9e6:	80 f4       	brcc	.+32     	; 0xa08 <__vector_24+0xd6>
     9e8:	80 91 f4 01 	lds	r24, 0x01F4
     9ec:	90 91 f5 01 	lds	r25, 0x01F5
     9f0:	68 17       	cp	r22, r24
     9f2:	79 07       	cpc	r23, r25
     9f4:	48 f4       	brcc	.+18     	; 0xa08 <__vector_24+0xd6>
				adc_reset_c++;
     9f6:	4f 5f       	subi	r20, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	50 93 07 02 	sts	0x0207, r21
     9fe:	40 93 06 02 	sts	0x0206, r20
				//error_storage=current;
				current=0;
     a02:	10 92 fa 01 	sts	0x01FA, r1
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__vector_24+0x124>
				return;
			}
		}
		capture[current]=ADC>>1;
     a08:	40 91 fa 01 	lds	r20, 0x01FA
     a0c:	24 2f       	mov	r18, r20
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	80 91 78 00 	lds	r24, 0x0078
     a14:	90 91 79 00 	lds	r25, 0x0079
     a18:	f9 01       	movw	r30, r18
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ea 56       	subi	r30, 0x6A	; 106
     a20:	fb 4f       	sbci	r31, 0xFB	; 251
     a22:	96 95       	lsr	r25
     a24:	87 95       	ror	r24
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	80 83       	st	Z, r24
		if(mode==MODE_XY) {
     a2a:	a3 30       	cpi	r26, 0x03	; 3
     a2c:	79 f4       	brne	.+30     	; 0xa4c <__vector_24+0x11a>
			if(!(current%2)) {
     a2e:	40 fd       	sbrc	r20, 0
     a30:	09 c0       	rjmp	.+18     	; 0xa44 <__vector_24+0x112>
				ADMUX=0b01100001;
     a32:	81 e6       	ldi	r24, 0x61	; 97
     a34:	80 93 7c 00 	sts	0x007C, r24
				ADCSRA|=1<<6;
     a38:	80 91 7a 00 	lds	r24, 0x007A
     a3c:	80 64       	ori	r24, 0x40	; 64
     a3e:	80 93 7a 00 	sts	0x007A, r24
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <__vector_24+0x11e>
			}
			else ADMUX=0b01100000;
     a44:	80 e6       	ldi	r24, 0x60	; 96
     a46:	80 93 7c 00 	sts	0x007C, r24
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <__vector_24+0x11e>
		}
		if(mode!=MODE_UART) current++;
     a4c:	a5 30       	cpi	r26, 0x05	; 5
     a4e:	19 f0       	breq	.+6      	; 0xa56 <__vector_24+0x124>
     a50:	4f 5f       	subi	r20, 0xFF	; 255
     a52:	40 93 fa 01 	sts	0x01FA, r20
	}
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	af 91       	pop	r26
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	7f 91       	pop	r23
     a62:	6f 91       	pop	r22
     a64:	5f 91       	pop	r21
     a66:	4f 91       	pop	r20
     a68:	3f 91       	pop	r19
     a6a:	2f 91       	pop	r18
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <lcd_sym>:
  lcd_databits(SEND_CMD,0xc0);
  lcd_databits(SEND_CMD,0x40);
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
	static uint8_t t;
	for(t=0;t<5;t++)
     a7c:	10 92 09 02 	sts	0x0209, r1
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	89 9f       	mul	r24, r25
     a84:	e0 01       	movw	r28, r0
     a86:	11 24       	eor	r1, r1
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <lcd_sym+0x2c>
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
	static uint8_t t;
	for(t=0;t<5;t++)
     a8a:	ce 01       	movw	r24, r28
     a8c:	81 0f       	add	r24, r17
     a8e:	91 1d       	adc	r25, r1
     a90:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__eerd_byte_m644>
     a94:	68 2f       	mov	r22, r24
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
	static uint8_t t;
	for(t=0;t<5;t++)
     a9c:	1f 5f       	subi	r17, 0xFF	; 255
     a9e:	10 93 09 02 	sts	0x0209, r17
     aa2:	10 91 09 02 	lds	r17, 0x0209
     aa6:	15 30       	cpi	r17, 0x05	; 5
     aa8:	80 f3       	brcs	.-32     	; 0xa8a <lcd_sym+0x14>
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
	lcd_databits(SEND_DATA,0);
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	08 95       	ret

00000aba <lcd_num_from_right>:
	for(x=0;x<=s;x++) {
		r|=1<<(7-x);
	}
	lcd_databits(SEND_DATA,r);
}
void lcd_num_from_right(unsigned int maxx,unsigned int y,uint32_t n) {
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	e3 e6       	ldi	r30, 0x63	; 99
     ac0:	f5 e0       	ldi	r31, 0x05	; 5
     ac2:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__prologue_saves__+0xe>
     ac6:	96 2e       	mov	r9, r22
     ac8:	59 01       	movw	r10, r18
     aca:	6a 01       	movw	r12, r20
	short unsigned int m,x=maxx-FONT_SIZE-1;
     acc:	ec 01       	movw	r28, r24
     ace:	26 97       	sbiw	r28, 0x06	; 6
	if(!n) {
     ad0:	21 15       	cp	r18, r1
     ad2:	31 05       	cpc	r19, r1
     ad4:	41 05       	cpc	r20, r1
     ad6:	51 05       	cpc	r21, r1
     ad8:	91 f5       	brne	.+100    	; 0xb3e <lcd_num_from_right+0x84>
		lcd_goto_xblock(x);
     ada:	8c 2f       	mov	r24, r28
     adc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     ae0:	89 2d       	mov	r24, r9
     ae2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_sym('0');
     ae6:	80 e3       	ldi	r24, 0x30	; 48
     ae8:	0e 94 3b 05 	call	0xa76	; 0xa76 <lcd_sym>
     aec:	28 c0       	rjmp	.+80     	; 0xb3e <lcd_num_from_right+0x84>
	}
	while(n) {
		m=n%10;
     aee:	c6 01       	movw	r24, r12
     af0:	b5 01       	movw	r22, r10
     af2:	2a e0       	ldi	r18, 0x0A	; 10
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__udivmodsi4>
     afe:	7b 01       	movw	r14, r22
     b00:	8c 01       	movw	r16, r24
		lcd_goto_xblock(x);
     b02:	8c 2f       	mov	r24, r28
     b04:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     b08:	89 2d       	mov	r24, r9
     b0a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_sym('0'+m);
     b0e:	8e 2d       	mov	r24, r14
     b10:	80 5d       	subi	r24, 0xD0	; 208
     b12:	0e 94 3b 05 	call	0xa76	; 0xa76 <lcd_sym>
		x-=FONT_SIZE+1;
     b16:	26 97       	sbiw	r28, 0x06	; 6
		n-=m;
     b18:	c7 01       	movw	r24, r14
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	a8 1a       	sub	r10, r24
     b20:	b9 0a       	sbc	r11, r25
     b22:	ca 0a       	sbc	r12, r26
     b24:	db 0a       	sbc	r13, r27
		n/=10;
     b26:	c6 01       	movw	r24, r12
     b28:	b5 01       	movw	r22, r10
     b2a:	2a e0       	ldi	r18, 0x0A	; 10
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__udivmodsi4>
     b36:	c9 01       	movw	r24, r18
     b38:	da 01       	movw	r26, r20
     b3a:	5c 01       	movw	r10, r24
     b3c:	6d 01       	movw	r12, r26
	if(!n) {
		lcd_goto_xblock(x);
		lcd_goto_yblock(y);
		lcd_sym('0');
	}
	while(n) {
     b3e:	a1 14       	cp	r10, r1
     b40:	b1 04       	cpc	r11, r1
     b42:	c1 04       	cpc	r12, r1
     b44:	d1 04       	cpc	r13, r1
     b46:	99 f6       	brne	.-90     	; 0xaee <lcd_num_from_right+0x34>
		lcd_sym('0'+m);
		x-=FONT_SIZE+1;
		n-=m;
		n/=10;
	}
}
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	eb e0       	ldi	r30, 0x0B	; 11
     b4e:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__epilogue_restores__+0xe>

00000b52 <lcd_str>:
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
	lcd_databits(SEND_DATA,0);
}


void lcd_str(char* s,uint8_t x,uint8_t y) {
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ec 01       	movw	r28, r24
     b5c:	16 2f       	mov	r17, r22
     b5e:	04 2f       	mov	r16, r20
     b60:	0a c0       	rjmp	.+20     	; 0xb76 <lcd_str+0x24>
	while(*s) {
		if(x!=-1&&y!=-1) {
			lcd_goto_xblock(x);
     b62:	81 2f       	mov	r24, r17
     b64:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
			lcd_goto_yblock(y);
     b68:	80 2f       	mov	r24, r16
     b6a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		}
		lcd_sym(*s++);
     b6e:	89 91       	ld	r24, Y+
     b70:	0e 94 3b 05 	call	0xa76	; 0xa76 <lcd_sym>
		x+=6;
     b74:	1a 5f       	subi	r17, 0xFA	; 250
	lcd_databits(SEND_DATA,0);
}


void lcd_str(char* s,uint8_t x,uint8_t y) {
	while(*s) {
     b76:	88 81       	ld	r24, Y
     b78:	88 23       	and	r24, r24
     b7a:	99 f7       	brne	.-26     	; 0xb62 <lcd_str+0x10>
			lcd_goto_yblock(y);
		}
		lcd_sym(*s++);
		x+=6;
	}
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <draw_menu>:
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
	else return(DISPLAY_Y-1-(a>>10));
}

void draw_menu() {
	if(menu_state>MENU_MAX) {
     b86:	80 91 f1 01 	lds	r24, 0x01F1
     b8a:	8a 30       	cpi	r24, 0x0A	; 10
     b8c:	0c f4       	brge	.+2      	; 0xb90 <draw_menu+0xa>
     b8e:	89 c1       	rjmp	.+786    	; 0xea2 <draw_menu+0x31c>
		if(menu_state==(MENU_MAX+MENU_ADCPERIOD)) {
     b90:	8b 30       	cpi	r24, 0x0B	; 11
     b92:	31 f5       	brne	.+76     	; 0xbe0 <draw_menu+0x5a>
			lcd_str("adc period",0,0);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_pixel_line_from_left(1,(adc_period-ADC_PERIOD_MIN)>>3);
     ba0:	60 91 8a 00 	lds	r22, 0x008A
     ba4:	70 91 8b 00 	lds	r23, 0x008B
     ba8:	60 55       	subi	r22, 0x50	; 80
     baa:	70 40       	sbci	r23, 0x00	; 0
     bac:	23 e0       	ldi	r18, 0x03	; 3
     bae:	76 95       	lsr	r23
     bb0:	67 95       	ror	r22
     bb2:	2a 95       	dec	r18
     bb4:	e1 f7       	brne	.-8      	; 0xbae <draw_menu+0x28>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_pixel_line_from_left>
			lcd_num_from_right(127,2,adc_period);
     bbc:	20 91 8a 00 	lds	r18, 0x008A
     bc0:	30 91 8b 00 	lds	r19, 0x008B
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	8f e7       	ldi	r24, 0x7F	; 127
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	62 e0       	ldi	r22, 0x02	; 2
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
			lcd_arrows(0,2);
     bd4:	8b e0       	ldi	r24, 0x0B	; 11
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	42 e0       	ldi	r20, 0x02	; 2
     bdc:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ABOUT)) {
     be0:	80 91 f1 01 	lds	r24, 0x01F1
     be4:	82 31       	cpi	r24, 0x12	; 18
     be6:	b1 f5       	brne	.+108    	; 0xc54 <draw_menu+0xce>
			lcd_str("digital",0,0);
     be8:	8f e0       	ldi	r24, 0x0F	; 15
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("oscill.",10,1);
     bf4:	87 e1       	ldi	r24, 0x17	; 23
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	6a e0       	ldi	r22, 0x0A	; 10
     bfa:	41 e0       	ldi	r20, 0x01	; 1
     bfc:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("v1.0",0,2);
     c00:	8f e1       	ldi	r24, 0x1F	; 31
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	42 e0       	ldi	r20, 0x02	; 2
     c08:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("fft lib.",0,4);
     c0c:	84 e2       	ldi	r24, 0x24	; 36
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	44 e0       	ldi	r20, 0x04	; 4
     c14:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("by chan",0,5);
     c18:	8d e2       	ldi	r24, 0x2D	; 45
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	45 e0       	ldi	r20, 0x05	; 5
     c20:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("sergey",(DISPLAY_X/2),0);
     c24:	85 e3       	ldi	r24, 0x35	; 53
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	60 e4       	ldi	r22, 0x40	; 64
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("volodin",70,1);
     c30:	8c e3       	ldi	r24, 0x3C	; 60
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	66 e4       	ldi	r22, 0x46	; 70
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("2011",80,2);
     c3c:	84 e4       	ldi	r24, 0x44	; 68
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	60 e5       	ldi	r22, 0x50	; 80
     c42:	42 e0       	ldi	r20, 0x02	; 2
     c44:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("i.179e.net",(DISPLAY_X/2),4);
     c48:	89 e4       	ldi	r24, 0x49	; 73
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	60 e4       	ldi	r22, 0x40	; 64
     c4e:	44 e0       	ldi	r20, 0x04	; 4
     c50:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_LCDSKIP)) {
     c54:	80 91 f1 01 	lds	r24, 0x01F1
     c58:	8f 30       	cpi	r24, 0x0F	; 15
     c5a:	91 f4       	brne	.+36     	; 0xc80 <draw_menu+0xfa>
			lcd_str("lcd skip",0,0);
     c5c:	84 e5       	ldi	r24, 0x54	; 84
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_pixel_line_from_left(1,lcd_skip);
     c68:	60 91 f0 01 	lds	r22, 0x01F0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_pixel_line_from_left>
			lcd_arrows(0,2);
     c74:	8b e0       	ldi	r24, 0x0B	; 11
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	42 e0       	ldi	r20, 0x02	; 2
     c7c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ADCSTEP)) {
     c80:	80 91 f1 01 	lds	r24, 0x01F1
     c84:	8e 30       	cpi	r24, 0x0E	; 14
     c86:	b9 f4       	brne	.+46     	; 0xcb6 <draw_menu+0x130>
			lcd_str("adc p step",0,0);
     c88:	8d e5       	ldi	r24, 0x5D	; 93
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_num_from_right((DISPLAY_X/2),1,adc_step);
     c94:	20 91 ef 01 	lds	r18, 0x01EF
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	80 e4       	ldi	r24, 0x40	; 64
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
			lcd_arrows(0,2);
     caa:	8b e0       	ldi	r24, 0x0B	; 11
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	42 e0       	ldi	r20, 0x02	; 2
     cb2:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ADCERROR)) {
     cb6:	80 91 f1 01 	lds	r24, 0x01F1
     cba:	8d 30       	cpi	r24, 0x0D	; 13
     cbc:	c1 f4       	brne	.+48     	; 0xcee <draw_menu+0x168>
			lcd_str("adc error",0,0);
     cbe:	88 e6       	ldi	r24, 0x68	; 104
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_num_from_right((DISPLAY_X/2),1,adc_error);
     cca:	20 91 f2 01 	lds	r18, 0x01F2
     cce:	30 91 f3 01 	lds	r19, 0x01F3
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	80 e4       	ldi	r24, 0x40	; 64
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
			lcd_arrows(0,2);
     ce2:	8b e0       	ldi	r24, 0x0B	; 11
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	42 e0       	ldi	r20, 0x02	; 2
     cea:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ADCCHECK)) {
     cee:	80 91 f1 01 	lds	r24, 0x01F1
     cf2:	8c 30       	cpi	r24, 0x0C	; 12
     cf4:	41 f5       	brne	.+80     	; 0xd46 <draw_menu+0x1c0>
			lcd_str("adc check",0,0);
     cf6:	82 e7       	ldi	r24, 0x72	; 114
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			if(adc_check) lcd_num_from_right((DISPLAY_X/2),1,adc_check);
     d02:	20 91 f4 01 	lds	r18, 0x01F4
     d06:	30 91 f5 01 	lds	r19, 0x01F5
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	49 f0       	breq	.+18     	; 0xd22 <draw_menu+0x19c>
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	80 e4       	ldi	r24, 0x40	; 64
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <draw_menu+0x1a8>
			else lcd_str("disabled",0,1);
     d22:	8c e7       	ldi	r24, 0x7C	; 124
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	41 e0       	ldi	r20, 0x01	; 1
     d2a:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_arrows(0,2);
     d2e:	8b e0       	ldi	r24, 0x0B	; 11
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	42 e0       	ldi	r20, 0x02	; 2
     d36:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_str("0 to dsbl.",0,3);
     d3a:	85 e8       	ldi	r24, 0x85	; 133
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	43 e0       	ldi	r20, 0x03	; 3
     d42:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_SPECTRUMXZOOM)) {
     d46:	80 91 f1 01 	lds	r24, 0x01F1
     d4a:	80 31       	cpi	r24, 0x10	; 16
     d4c:	f9 f4       	brne	.+62     	; 0xd8c <draw_menu+0x206>
			lcd_str("sp. xzoom",0,0);
     d4e:	80 e9       	ldi	r24, 0x90	; 144
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_num_from_right(DISPLAY_X/2-1,1,1<<spectrum_x_zoom);
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	00 90 03 02 	lds	r0, 0x0203
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <draw_menu+0x1e2>
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <draw_menu+0x1de>
     d6c:	44 27       	eor	r20, r20
     d6e:	37 fd       	sbrc	r19, 7
     d70:	40 95       	com	r20
     d72:	54 2f       	mov	r21, r20
     d74:	8f e3       	ldi	r24, 0x3F	; 63
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
			lcd_arrows(0,2);
     d80:	8b e0       	ldi	r24, 0x0B	; 11
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	42 e0       	ldi	r20, 0x02	; 2
     d88:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_SPECTRUMYZOOM)) {
     d8c:	80 91 f1 01 	lds	r24, 0x01F1
     d90:	81 31       	cpi	r24, 0x11	; 17
     d92:	f9 f4       	brne	.+62     	; 0xdd2 <draw_menu+0x24c>
			lcd_str("sp. yzoom",0,0);
     d94:	8a e9       	ldi	r24, 0x9A	; 154
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			lcd_num_from_right(DISPLAY_X/2-1,1,1<<spectrum_y_zoom);
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	00 90 04 02 	lds	r0, 0x0204
     da8:	02 c0       	rjmp	.+4      	; 0xdae <draw_menu+0x228>
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <draw_menu+0x224>
     db2:	44 27       	eor	r20, r20
     db4:	37 fd       	sbrc	r19, 7
     db6:	40 95       	com	r20
     db8:	54 2f       	mov	r21, r20
     dba:	8f e3       	ldi	r24, 0x3F	; 63
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
			lcd_arrows(0,2);
     dc6:	8b e0       	ldi	r24, 0x0B	; 11
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	42 e0       	ldi	r20, 0x02	; 2
     dce:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_MODE)) {
     dd2:	80 91 f1 01 	lds	r24, 0x01F1
     dd6:	8a 30       	cpi	r24, 0x0A	; 10
     dd8:	09 f0       	breq	.+2      	; 0xddc <draw_menu+0x256>
     dda:	d6 c0       	rjmp	.+428    	; 0xf88 <draw_menu+0x402>
			lcd_str("mode",0,0);
     ddc:	84 ea       	ldi	r24, 0xA4	; 164
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			if(mode==MODE_SIGNAL) lcd_str("signal",0,1);
     de8:	80 91 ee 01 	lds	r24, 0x01EE
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	19 f4       	brne	.+6      	; 0xdf6 <draw_menu+0x270>
     df0:	89 ea       	ldi	r24, 0xA9	; 169
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	4b c0       	rjmp	.+150    	; 0xe8c <draw_menu+0x306>
			else if(mode==MODE_SPECTRUM) {
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	19 f4       	brne	.+6      	; 0xe00 <draw_menu+0x27a>
				lcd_str("spectrum",0,1);
     dfa:	80 eb       	ldi	r24, 0xB0	; 176
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <draw_menu+0x28c>
				if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
			}
			else if(mode==MODE_XY) lcd_str("xy",0,1);
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	19 f4       	brne	.+6      	; 0xe0a <draw_menu+0x284>
     e04:	81 ec       	ldi	r24, 0xC1	; 193
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	41 c0       	rjmp	.+130    	; 0xe8c <draw_menu+0x306>
			else if(mode==MODE_DUAL) {
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	b1 f5       	brne	.+108    	; 0xe7a <draw_menu+0x2f4>
				lcd_str("dual",0,1);
     e0e:	84 ec       	ldi	r24, 0xC4	; 196
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
				if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
     e1a:	80 91 ee 01 	lds	r24, 0x01EE
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	11 f0       	breq	.+4      	; 0xe26 <draw_menu+0x2a0>
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	31 f4       	brne	.+12     	; 0xe32 <draw_menu+0x2ac>
     e26:	89 eb       	ldi	r24, 0xB9	; 185
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	60 e4       	ldi	r22, 0x40	; 64
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
     e32:	20 91 8a 00 	lds	r18, 0x008A
     e36:	30 91 8b 00 	lds	r19, 0x008B
     e3a:	00 90 03 02 	lds	r0, 0x0203
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <draw_menu+0x2be>
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <draw_menu+0x2ba>
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	7d e2       	ldi	r23, 0x2D	; 45
     e50:	81 e3       	ldi	r24, 0x31	; 49
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	55 95       	asr	r21
     e5c:	47 95       	ror	r20
     e5e:	37 95       	ror	r19
     e60:	27 95       	ror	r18
     e62:	9a 95       	dec	r25
     e64:	d1 f7       	brne	.-12     	; 0xe5a <draw_menu+0x2d4>
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
     e72:	8e eb       	ldi	r24, 0xBE	; 190
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	65 e7       	ldi	r22, 0x75	; 117
     e78:	0a c0       	rjmp	.+20     	; 0xe8e <draw_menu+0x308>
			}
			else if(mode==MODE_UART) lcd_str("uart",0,1);
     e7a:	85 30       	cpi	r24, 0x05	; 5
     e7c:	19 f4       	brne	.+6      	; 0xe84 <draw_menu+0x2fe>
     e7e:	89 ec       	ldi	r24, 0xC9	; 201
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <draw_menu+0x306>
			else if(mode==MODE_UART_BUF) {
     e84:	86 30       	cpi	r24, 0x06	; 6
     e86:	31 f4       	brne	.+12     	; 0xe94 <draw_menu+0x30e>
				lcd_str("uart buf",0,1);
     e88:	8e ec       	ldi	r24, 0xCE	; 206
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	41 e0       	ldi	r20, 0x01	; 1
     e90:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
			}
			lcd_arrows(0,2);
     e94:	8b e0       	ldi	r24, 0x0B	; 11
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	42 e0       	ldi	r20, 0x02	; 2
     e9c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
     ea0:	08 95       	ret
		}
	}
	else if(menu_state!=-1) {
     ea2:	8f 3f       	cpi	r24, 0xFF	; 255
     ea4:	09 f4       	brne	.+2      	; 0xea8 <draw_menu+0x322>
     ea6:	70 c0       	rjmp	.+224    	; 0xf88 <draw_menu+0x402>
		lcd_str("menu",0,0);
     ea8:	87 ed       	ldi	r24, 0xD7	; 215
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_EXIT) lcd_str("exit",0,1);
     eb4:	80 91 f1 01 	lds	r24, 0x01F1
     eb8:	88 23       	and	r24, r24
     eba:	31 f4       	brne	.+12     	; 0xec8 <draw_menu+0x342>
     ebc:	8c ed       	ldi	r24, 0xDC	; 220
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_ADCPERIOD) lcd_str("adc period",0,1);
     ec8:	80 91 f1 01 	lds	r24, 0x01F1
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	31 f4       	brne	.+12     	; 0xedc <draw_menu+0x356>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_ADCSTEP) lcd_str("adc p step",0,1);
     edc:	80 91 f1 01 	lds	r24, 0x01F1
     ee0:	85 30       	cpi	r24, 0x05	; 5
     ee2:	31 f4       	brne	.+12     	; 0xef0 <draw_menu+0x36a>
     ee4:	8d e5       	ldi	r24, 0x5D	; 93
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_LCDSKIP) lcd_str("lcd skip",0,1);
     ef0:	80 91 f1 01 	lds	r24, 0x01F1
     ef4:	86 30       	cpi	r24, 0x06	; 6
     ef6:	31 f4       	brne	.+12     	; 0xf04 <draw_menu+0x37e>
     ef8:	84 e5       	ldi	r24, 0x54	; 84
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_ADCCHECK) lcd_str("adc check",0,1);
     f04:	80 91 f1 01 	lds	r24, 0x01F1
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	31 f4       	brne	.+12     	; 0xf18 <draw_menu+0x392>
     f0c:	82 e7       	ldi	r24, 0x72	; 114
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_ADCERROR) lcd_str("adc error",0,1);
     f18:	80 91 f1 01 	lds	r24, 0x01F1
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	31 f4       	brne	.+12     	; 0xf2c <draw_menu+0x3a6>
     f20:	88 e6       	ldi	r24, 0x68	; 104
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_SPECTRUMXZOOM) lcd_str("sp. xzoom",0,1);
     f2c:	80 91 f1 01 	lds	r24, 0x01F1
     f30:	87 30       	cpi	r24, 0x07	; 7
     f32:	31 f4       	brne	.+12     	; 0xf40 <draw_menu+0x3ba>
     f34:	80 e9       	ldi	r24, 0x90	; 144
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_SPECTRUMYZOOM) lcd_str("sp. yzoom",0,1);
     f40:	80 91 f1 01 	lds	r24, 0x01F1
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	31 f4       	brne	.+12     	; 0xf54 <draw_menu+0x3ce>
     f48:	8a e9       	ldi	r24, 0x9A	; 154
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_ABOUT) lcd_str("about",0,1);
     f54:	80 91 f1 01 	lds	r24, 0x01F1
     f58:	89 30       	cpi	r24, 0x09	; 9
     f5a:	31 f4       	brne	.+12     	; 0xf68 <draw_menu+0x3e2>
     f5c:	81 ee       	ldi	r24, 0xE1	; 225
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		if(menu_state==MENU_MODE) lcd_str("mode",0,1);
     f68:	80 91 f1 01 	lds	r24, 0x01F1
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	31 f4       	brne	.+12     	; 0xf7c <draw_menu+0x3f6>
     f70:	84 ea       	ldi	r24, 0xA4	; 164
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
		lcd_arrows(0,2);
     f7c:	8b e0       	ldi	r24, 0x0B	; 11
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	42 e0       	ldi	r20, 0x02	; 2
     f84:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
     f88:	08 95       	ret

00000f8a <main>:
		}
	}
	buttons_update();
}

int main() {
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb ec       	ldi	r30, 0xCB	; 203
     f90:	f7 e0       	ldi	r31, 0x07	; 7
     f92:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x16>
	// pins init
	DDRB&=~(0x3f);
     f96:	84 b1       	in	r24, 0x04	; 4
     f98:	80 7c       	andi	r24, 0xC0	; 192
     f9a:	84 b9       	out	0x04, r24	; 4
	DDRA|=1<<7;
     f9c:	0f 9a       	sbi	0x01, 7	; 1
	PORTA&=~(1<<7);
     f9e:	17 98       	cbi	0x02, 7	; 2
	PORTB|=0x3f;
     fa0:	85 b1       	in	r24, 0x05	; 5
     fa2:	8f 63       	ori	r24, 0x3F	; 63
     fa4:	85 b9       	out	0x05, r24	; 5
#define BAUD 9600UL
#define UBRRVAL (F_CPU/(BAUD*16)-1)
#define U_M	1000
uint16_t u_c;
void uart_init() {
    UBRRH = UBRRVAL >> 8;
     fa6:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
     faa:	81 e8       	ldi	r24, 0x81	; 129
     fac:	80 93 c4 00 	sts	0x00C4, r24
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
     fb0:	86 e0       	ldi	r24, 0x06	; 6
     fb2:	80 93 c2 00 	sts	0x00C2, r24
    UCSRB = (1 << RXEN) | (1 << TXEN);
     fb6:	88 e1       	ldi	r24, 0x18	; 24
     fb8:	80 93 c1 00 	sts	0x00C1, r24
	
	uart_init();
	lcd_init();
     fbc:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_init>
	
	//adc init
	ADMUX=0b01100000;
     fc0:	80 e6       	ldi	r24, 0x60	; 96
     fc2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0b11011101;
     fc6:	8d ed       	ldi	r24, 0xDD	; 221
     fc8:	80 93 7a 00 	sts	0x007A, r24

	//button & adc interrupt init
	TCCR0B=0b101;
     fcc:	85 e0       	ldi	r24, 0x05	; 5
     fce:	85 bd       	out	0x25, r24	; 37
	TIMSK0=1<<TOIE0;
     fd0:	21 e0       	ldi	r18, 0x01	; 1
     fd2:	20 93 6e 00 	sts	0x006E, r18
	TIMSK1=(1<<OCIE1B);
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	80 93 6f 00 	sts	0x006F, r24
	TCNT0=0x00;
     fdc:	16 bc       	out	0x26, r1	; 38
	TCNT1=0x00;
     fde:	10 92 85 00 	sts	0x0085, r1
     fe2:	10 92 84 00 	sts	0x0084, r1
	adc_period=ADC_PERIOD_MIN;
     fe6:	80 e5       	ldi	r24, 0x50	; 80
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	90 93 8b 00 	sts	0x008B, r25
     fee:	80 93 8a 00 	sts	0x008A, r24
	TCCR1B=0b001;
     ff2:	20 93 81 00 	sts	0x0081, r18
	sei();
     ff6:	78 94       	sei
						if(c<DISPLAY_X) lcd_line_from_bottom(c,s);
					}
			}
			if((mode==MODE_SIGNAL)||(mode==MODE_DUAL)) {
				if(lcd_skip_c>=lcd_skip) {
					lcd_skip_c=1;
     ff8:	11 e0       	ldi	r17, 0x01	; 1
				while(m<ALL_N) {
					s=capture[m++]>>7;
					if(s>=256) uart_communicate(254);
					else uart_communicate(s);
					if(u_c==U_M) u++;
					if(u>=10) m=ALL_N;
     ffa:	00 e8       	ldi	r16, 0x80	; 128
					}
				}
				else lcd_skip_c++;
				
				for(s=0;s<DISPLAY_X;s+=2) {
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
     ffc:	9f e3       	ldi	r25, 0x3F	; 63
     ffe:	f9 2e       	mov	r15, r25
    1000:	8f e3       	ldi	r24, 0x3F	; 63
    1002:	e8 2e       	mov	r14, r24
				else lcd_skip_c++;
			}
			else if(mode==MODE_XY) {
				if(lcd_skip_c>=lcd_skip) {
					lcd_skip_c=1;
					for(s=(DISPLAY_X/2);s<DISPLAY_X;s++) {
    1004:	b0 e4       	ldi	r27, 0x40	; 64
    1006:	db 2e       	mov	r13, r27
			if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
					fft_input(capture, bfly_buff);
					fft_execute(bfly_buff);
					fft_output(bfly_buff, output);
					for (m=0;m<ALL_N/2;m++) {
						s=output[m]>>(9-spectrum_y_zoom);
    1008:	c9 e0       	ldi	r28, 0x09	; 9
    100a:	d0 e0       	ldi	r29, 0x00	; 0
	adc_period=ADC_PERIOD_MIN;
	TCCR1B=0b001;
	sei();

	for(;;) {
		if(redraw_menu) {
    100c:	80 91 00 02 	lds	r24, 0x0200
    1010:	88 23       	and	r24, r24
    1012:	39 f0       	breq	.+14     	; 0x1022 <main+0x98>
			lcd_all(0);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 90 01 	call	0x320	; 0x320 <lcd_all>
			redraw_menu=0;
    101a:	10 92 00 02 	sts	0x0200, r1
			draw_menu();
    101e:	0e 94 c3 05 	call	0xb86	; 0xb86 <draw_menu>
		}
		if(current>=(ALL_N-1)) {
    1022:	80 91 fa 01 	lds	r24, 0x01FA
    1026:	8f 37       	cpi	r24, 0x7F	; 127
    1028:	08 f4       	brcc	.+2      	; 0x102c <main+0xa2>
    102a:	23 c1       	rjmp	.+582    	; 0x1272 <__stack+0x173>
			if(!array_filled) array_filled=1;
    102c:	80 91 01 02 	lds	r24, 0x0201
    1030:	88 23       	and	r24, r24
    1032:	11 f4       	brne	.+4      	; 0x1038 <main+0xae>
    1034:	10 93 01 02 	sts	0x0201, r17
			adc_reset_c=0;
    1038:	10 92 07 02 	sts	0x0207, r1
    103c:	10 92 06 02 	sts	0x0206, r1
			if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
    1040:	80 91 ee 01 	lds	r24, 0x01EE
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	19 f0       	breq	.+6      	; 0x104e <main+0xc4>
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	09 f0       	breq	.+2      	; 0x104e <main+0xc4>
    104c:	6f c0       	rjmp	.+222    	; 0x112c <__stack+0x2d>
					fft_input(capture, bfly_buff);
    104e:	86 e9       	ldi	r24, 0x96	; 150
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	61 e1       	ldi	r22, 0x11	; 17
    1054:	72 e0       	ldi	r23, 0x02	; 2
    1056:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <fft_input>
					fft_execute(bfly_buff);
    105a:	81 e1       	ldi	r24, 0x11	; 17
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fft_execute>
					fft_output(bfly_buff, output);
    1062:	81 e1       	ldi	r24, 0x11	; 17
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	61 e1       	ldi	r22, 0x11	; 17
    1068:	74 e0       	ldi	r23, 0x04	; 4
    106a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fft_output>
					for (m=0;m<ALL_N/2;m++) {
    106e:	10 92 f8 01 	sts	0x01F8, r1
    1072:	57 c0       	rjmp	.+174    	; 0x1122 <__stack+0x23>
						s=output[m]>>(9-spectrum_y_zoom);
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	ef 5e       	subi	r30, 0xEF	; 239
    107c:	fb 4f       	sbci	r31, 0xFB	; 251
    107e:	80 91 04 02 	lds	r24, 0x0204
    1082:	9e 01       	movw	r18, r28
    1084:	28 1b       	sub	r18, r24
    1086:	31 09       	sbc	r19, r1
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <main+0x108>
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	2a 95       	dec	r18
    1094:	e2 f7       	brpl	.-8      	; 0x108e <main+0x104>
    1096:	80 93 95 04 	sts	0x0495, r24
						if(s>63) s=63;
    109a:	80 34       	cpi	r24, 0x40	; 64
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <main+0x118>
    109e:	e0 92 95 04 	sts	0x0495, r14
						if(s<0) s=0;
						for(u=0;u<7;u++) lcd_block(ALL_N/2+m,u,0);
    10a2:	10 92 9c 05 	sts	0x059C, r1
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <main+0x132>
    10a8:	82 2f       	mov	r24, r18
    10aa:	80 5c       	subi	r24, 0xC0	; 192
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
    10b2:	80 91 9c 05 	lds	r24, 0x059C
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 93 9c 05 	sts	0x059C, r24
    10bc:	60 91 9c 05 	lds	r22, 0x059C
    10c0:	20 91 f8 01 	lds	r18, 0x01F8
    10c4:	67 30       	cpi	r22, 0x07	; 7
    10c6:	80 f3       	brcs	.-32     	; 0x10a8 <main+0x11e>
						if(!(m%8)) {
    10c8:	82 2f       	mov	r24, r18
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	87 70       	andi	r24, 0x07	; 7
    10ce:	90 70       	andi	r25, 0x00	; 0
    10d0:	89 2b       	or	r24, r25
    10d2:	59 f4       	brne	.+22     	; 0x10ea <main+0x160>
							lcd_goto_xblock(ALL_N/2+m);
    10d4:	82 2f       	mov	r24, r18
    10d6:	80 5c       	subi	r24, 0xC0	; 192
    10d8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
							lcd_goto_yblock(2);
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
							lcd_databits(SEND_DATA,0x1);
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
						}
						c=(DISPLAY_X/2)+(m<<spectrum_x_zoom);
    10ea:	80 91 f8 01 	lds	r24, 0x01F8
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	00 90 03 02 	lds	r0, 0x0203
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <main+0x170>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <main+0x16c>
    10fe:	80 5c       	subi	r24, 0xC0	; 192
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	90 93 94 04 	sts	0x0494, r25
    1106:	80 93 93 04 	sts	0x0493, r24
						if(c<DISPLAY_X) lcd_line_from_bottom(c,s);
    110a:	80 38       	cpi	r24, 0x80	; 128
    110c:	91 05       	cpc	r25, r1
    110e:	20 f4       	brcc	.+8      	; 0x1118 <__stack+0x19>
    1110:	60 91 95 04 	lds	r22, 0x0495
    1114:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_line_from_bottom>
			adc_reset_c=0;
			if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
					fft_input(capture, bfly_buff);
					fft_execute(bfly_buff);
					fft_output(bfly_buff, output);
					for (m=0;m<ALL_N/2;m++) {
    1118:	80 91 f8 01 	lds	r24, 0x01F8
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	80 93 f8 01 	sts	0x01F8, r24
    1122:	e0 91 f8 01 	lds	r30, 0x01F8
    1126:	e0 34       	cpi	r30, 0x40	; 64
    1128:	08 f4       	brcc	.+2      	; 0x112c <__stack+0x2d>
    112a:	a4 cf       	rjmp	.-184    	; 0x1074 <main+0xea>
						}
						c=(DISPLAY_X/2)+(m<<spectrum_x_zoom);
						if(c<DISPLAY_X) lcd_line_from_bottom(c,s);
					}
			}
			if((mode==MODE_SIGNAL)||(mode==MODE_DUAL)) {
    112c:	80 91 ee 01 	lds	r24, 0x01EE
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	11 f0       	breq	.+4      	; 0x1138 <__stack+0x39>
    1134:	84 30       	cpi	r24, 0x04	; 4
    1136:	79 f4       	brne	.+30     	; 0x1156 <__stack+0x57>
				if(lcd_skip_c>=lcd_skip) {
    1138:	90 91 f9 01 	lds	r25, 0x01F9
    113c:	80 91 f0 01 	lds	r24, 0x01F0
    1140:	98 17       	cp	r25, r24
    1142:	28 f0       	brcs	.+10     	; 0x114e <__stack+0x4f>
					lcd_skip_c=1;
    1144:	10 93 f9 01 	sts	0x01F9, r17
					draw_signal();
    1148:	0e 94 2c 03 	call	0x658	; 0x658 <draw_signal>
    114c:	90 c0       	rjmp	.+288    	; 0x126e <__stack+0x16f>
				}
				else lcd_skip_c++;
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	90 93 f9 01 	sts	0x01F9, r25
    1154:	8c c0       	rjmp	.+280    	; 0x126e <__stack+0x16f>
			}
			else if(mode==MODE_XY) {
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	09 f0       	breq	.+2      	; 0x115c <__stack+0x5d>
    115a:	48 c0       	rjmp	.+144    	; 0x11ec <__stack+0xed>
				if(lcd_skip_c>=lcd_skip) {
    115c:	90 91 f9 01 	lds	r25, 0x01F9
    1160:	80 91 f0 01 	lds	r24, 0x01F0
    1164:	98 17       	cp	r25, r24
    1166:	00 f1       	brcs	.+64     	; 0x11a8 <__stack+0xa9>
					lcd_skip_c=1;
    1168:	10 93 f9 01 	sts	0x01F9, r17
					for(s=(DISPLAY_X/2);s<DISPLAY_X;s++) {
    116c:	d0 92 95 04 	sts	0x0495, r13
    1170:	16 c0       	rjmp	.+44     	; 0x119e <__stack+0x9f>
						for(m=0;m<8;m++) lcd_block(s,m,0);
    1172:	10 92 f8 01 	sts	0x01F8, r1
    1176:	0a c0       	rjmp	.+20     	; 0x118c <__stack+0x8d>
    1178:	80 91 95 04 	lds	r24, 0x0495
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
    1182:	80 91 f8 01 	lds	r24, 0x01F8
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	80 93 f8 01 	sts	0x01F8, r24
    118c:	60 91 f8 01 	lds	r22, 0x01F8
    1190:	68 30       	cpi	r22, 0x08	; 8
    1192:	90 f3       	brcs	.-28     	; 0x1178 <__stack+0x79>
				else lcd_skip_c++;
			}
			else if(mode==MODE_XY) {
				if(lcd_skip_c>=lcd_skip) {
					lcd_skip_c=1;
					for(s=(DISPLAY_X/2);s<DISPLAY_X;s++) {
    1194:	80 91 95 04 	lds	r24, 0x0495
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	80 93 95 04 	sts	0x0495, r24
    119e:	80 91 95 04 	lds	r24, 0x0495
    11a2:	87 ff       	sbrs	r24, 7
    11a4:	e6 cf       	rjmp	.-52     	; 0x1172 <__stack+0x73>
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <__stack+0xaf>
						for(m=0;m<8;m++) lcd_block(s,m,0);
					}
				}
				else lcd_skip_c++;
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	90 93 f9 01 	sts	0x01F9, r25
				
				for(s=0;s<DISPLAY_X;s+=2) {
    11ae:	10 92 95 04 	sts	0x0495, r1
    11b2:	17 c0       	rjmp	.+46     	; 0x11e2 <__stack+0xe3>
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	df 01       	movw	r26, r30
    11bc:	aa 56       	subi	r26, 0x6A	; 106
    11be:	bb 4f       	sbci	r27, 0xFB	; 251
    11c0:	11 96       	adiw	r26, 0x01	; 1
    11c2:	8c 91       	ld	r24, X
    11c4:	86 95       	lsr	r24
    11c6:	e8 56       	subi	r30, 0x68	; 104
    11c8:	fb 4f       	sbci	r31, 0xFB	; 251
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	96 95       	lsr	r25
    11ce:	6f 2d       	mov	r22, r15
    11d0:	69 1b       	sub	r22, r25
    11d2:	80 5c       	subi	r24, 0xC0	; 192
    11d4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_pixel_share>
						for(m=0;m<8;m++) lcd_block(s,m,0);
					}
				}
				else lcd_skip_c++;
				
				for(s=0;s<DISPLAY_X;s+=2) {
    11d8:	80 91 95 04 	lds	r24, 0x0495
    11dc:	8e 5f       	subi	r24, 0xFE	; 254
    11de:	80 93 95 04 	sts	0x0495, r24
    11e2:	e0 91 95 04 	lds	r30, 0x0495
    11e6:	e7 ff       	sbrs	r30, 7
    11e8:	e5 cf       	rjmp	.-54     	; 0x11b4 <__stack+0xb5>
    11ea:	41 c0       	rjmp	.+130    	; 0x126e <__stack+0x16f>
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
				}
			}
			else if(mode==MODE_UART_BUF) {
    11ec:	86 30       	cpi	r24, 0x06	; 6
    11ee:	81 f5       	brne	.+96     	; 0x1250 <__stack+0x151>
				m=0;u=0;
    11f0:	10 92 f8 01 	sts	0x01F8, r1
    11f4:	10 92 9c 05 	sts	0x059C, r1
    11f8:	26 c0       	rjmp	.+76     	; 0x1246 <__stack+0x147>
				while(m<ALL_N) {
					s=capture[m++]>>7;
    11fa:	e2 2f       	mov	r30, r18
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	ea 56       	subi	r30, 0x6A	; 106
    1204:	fb 4f       	sbci	r31, 0xFB	; 251
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	88 0f       	add	r24, r24
    120c:	89 2f       	mov	r24, r25
    120e:	88 1f       	adc	r24, r24
    1210:	99 0b       	sbc	r25, r25
    1212:	91 95       	neg	r25
    1214:	80 93 95 04 	sts	0x0495, r24
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	20 93 f8 01 	sts	0x01F8, r18
					if(s>=256) uart_communicate(254);
					else uart_communicate(s);
    121e:	0e 94 a2 00 	call	0x144	; 0x144 <uart_communicate>
					if(u_c==U_M) u++;
    1222:	80 91 98 05 	lds	r24, 0x0598
    1226:	90 91 99 05 	lds	r25, 0x0599
    122a:	88 5e       	subi	r24, 0xE8	; 232
    122c:	93 40       	sbci	r25, 0x03	; 3
    122e:	29 f4       	brne	.+10     	; 0x123a <__stack+0x13b>
    1230:	80 91 9c 05 	lds	r24, 0x059C
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 9c 05 	sts	0x059C, r24
					if(u>=10) m=ALL_N;
    123a:	80 91 9c 05 	lds	r24, 0x059C
    123e:	8a 30       	cpi	r24, 0x0A	; 10
    1240:	10 f0       	brcs	.+4      	; 0x1246 <__stack+0x147>
    1242:	00 93 f8 01 	sts	0x01F8, r16
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
				}
			}
			else if(mode==MODE_UART_BUF) {
				m=0;u=0;
				while(m<ALL_N) {
    1246:	20 91 f8 01 	lds	r18, 0x01F8
    124a:	27 ff       	sbrs	r18, 7
    124c:	d6 cf       	rjmp	.-84     	; 0x11fa <__stack+0xfb>
    124e:	0f c0       	rjmp	.+30     	; 0x126e <__stack+0x16f>
					else uart_communicate(s);
					if(u_c==U_M) u++;
					if(u>=10) m=ALL_N;
				}
			}
			else if(mode==MODE_UART) {
    1250:	85 30       	cpi	r24, 0x05	; 5
    1252:	69 f4       	brne	.+26     	; 0x126e <__stack+0x16f>
				s=capture[ALL_N-1]>>7;
    1254:	80 91 94 05 	lds	r24, 0x0594
    1258:	90 91 95 05 	lds	r25, 0x0595
    125c:	88 0f       	add	r24, r24
    125e:	89 2f       	mov	r24, r25
    1260:	88 1f       	adc	r24, r24
    1262:	99 0b       	sbc	r25, r25
    1264:	91 95       	neg	r25
    1266:	80 93 95 04 	sts	0x0495, r24
				if(s>=256) uart_communicate(254);
				else uart_communicate(s);
    126a:	0e 94 a2 00 	call	0x144	; 0x144 <uart_communicate>
			}
			current=0;
    126e:	10 92 fa 01 	sts	0x01FA, r1
		}
		asm("nop");
    1272:	00 00       	nop
    1274:	cb ce       	rjmp	.-618    	; 0x100c <main+0x82>

00001276 <osd>:
	up_state1=up_state();
	down_state1=down_state();
}

void osd() {
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
    1276:	80 91 ee 01 	lds	r24, 0x01EE
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	11 f0       	breq	.+4      	; 0x1282 <osd+0xc>
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	31 f4       	brne	.+12     	; 0x128e <osd+0x18>
    1282:	89 eb       	ldi	r24, 0xB9	; 185
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	60 e4       	ldi	r22, 0x40	; 64
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
    128e:	20 91 8a 00 	lds	r18, 0x008A
    1292:	30 91 8b 00 	lds	r19, 0x008B
    1296:	00 90 03 02 	lds	r0, 0x0203
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <osd+0x2a>
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <osd+0x26>
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	7d e2       	ldi	r23, 0x2D	; 45
    12ac:	81 e3       	ldi	r24, 0x31	; 49
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
    12b4:	64 e0       	ldi	r22, 0x04	; 4
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	37 95       	ror	r19
    12bc:	27 95       	ror	r18
    12be:	6a 95       	dec	r22
    12c0:	d1 f7       	brne	.-12     	; 0x12b6 <osd+0x40>
    12c2:	80 e8       	ldi	r24, 0x80	; 128
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
    12ce:	8e eb       	ldi	r24, 0xBE	; 190
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	65 e7       	ldi	r22, 0x75	; 117
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
    12da:	80 91 ee 01 	lds	r24, 0x01EE
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <osd+0x70>
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	31 f4       	brne	.+12     	; 0x12f2 <osd+0x7c>
    12e6:	87 ee       	ldi	r24, 0xE7	; 231
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_str>
    12f2:	20 91 8a 00 	lds	r18, 0x008A
    12f6:	30 91 8b 00 	lds	r19, 0x008B
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	7d e2       	ldi	r23, 0x2D	; 45
    1302:	81 e3       	ldi	r24, 0x31	; 49
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
    130a:	8f e3       	ldi	r24, 0x3F	; 63
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_num_from_right>
}
    1316:	08 95       	ret

00001318 <__vector_18>:
		}
		if(mode!=MODE_UART) current++;
	}
}

ISR(TIMER0_OVF_vect) {
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
	while(!(pause_state())&&menu_state==-1) {
		osd();
		if(!top_state()&&top_state1) {
			menu_state=0;
			redraw_menu=1;
    133e:	01 e0       	ldi	r16, 0x01	; 1
    1340:	16 e0       	ldi	r17, 0x06	; 6
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <__vector_18+0x4e>
	}
}

ISR(TIMER0_OVF_vect) {
	while(!(pause_state())&&menu_state==-1) {
		osd();
    1344:	0e 94 3b 09 	call	0x1276	; 0x1276 <osd>
		if(!top_state()&&top_state1) {
    1348:	18 99       	sbic	0x03, 0	; 3
    134a:	08 c0       	rjmp	.+16     	; 0x135c <__vector_18+0x44>
    134c:	80 91 fb 01 	lds	r24, 0x01FB
    1350:	88 23       	and	r24, r24
    1352:	21 f0       	breq	.+8      	; 0x135c <__vector_18+0x44>
			menu_state=0;
    1354:	10 92 f1 01 	sts	0x01F1, r1
			redraw_menu=1;
    1358:	00 93 00 02 	sts	0x0200, r16
		}
		buttons_update();
    135c:	0e 94 0a 03 	call	0x614	; 0x614 <buttons_update>
    1360:	81 2f       	mov	r24, r17
    1362:	8a 95       	dec	r24
    1364:	f1 f7       	brne	.-4      	; 0x1362 <__vector_18+0x4a>
		if(mode!=MODE_UART) current++;
	}
}

ISR(TIMER0_OVF_vect) {
	while(!(pause_state())&&menu_state==-1) {
    1366:	1b 99       	sbic	0x03, 3	; 3
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <__vector_18+0x5a>
    136a:	80 91 f1 01 	lds	r24, 0x01F1
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	49 f3       	breq	.-46     	; 0x1344 <__vector_18+0x2c>
			redraw_menu=1;
		}
		buttons_update();
		delay_us(1);
	}
	if(menu_state==-1) {
    1372:	90 91 f1 01 	lds	r25, 0x01F1
    1376:	9f 3f       	cpi	r25, 0xFF	; 255
    1378:	09 f0       	breq	.+2      	; 0x137c <__vector_18+0x64>
    137a:	cb c0       	rjmp	.+406    	; 0x1512 <__vector_18+0x1fa>
		if(!right_state()&&right_state1) {
    137c:	19 99       	sbic	0x03, 1	; 3
    137e:	37 c0       	rjmp	.+110    	; 0x13ee <__vector_18+0xd6>
    1380:	80 91 fd 01 	lds	r24, 0x01FD
    1384:	88 23       	and	r24, r24
    1386:	99 f1       	breq	.+102    	; 0x13ee <__vector_18+0xd6>
			incr_step(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX,adc_step);
    1388:	20 91 8a 00 	lds	r18, 0x008A
    138c:	30 91 8b 00 	lds	r19, 0x008B
    1390:	60 91 ef 01 	lds	r22, 0x01EF
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	9f ef       	ldi	r25, 0xFF	; 255
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	86 1b       	sub	r24, r22
    13a2:	91 09       	sbc	r25, r1
    13a4:	a1 09       	sbc	r26, r1
    13a6:	b1 09       	sbc	r27, r1
    13a8:	82 17       	cp	r24, r18
    13aa:	93 07       	cpc	r25, r19
    13ac:	a4 07       	cpc	r26, r20
    13ae:	b5 07       	cpc	r27, r21
    13b0:	1c f4       	brge	.+6      	; 0x13b8 <__vector_18+0xa0>
    13b2:	80 e5       	ldi	r24, 0x50	; 80
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <__vector_18+0xac>
    13b8:	80 91 8a 00 	lds	r24, 0x008A
    13bc:	90 91 8b 00 	lds	r25, 0x008B
    13c0:	86 0f       	add	r24, r22
    13c2:	91 1d       	adc	r25, r1
    13c4:	90 93 8b 00 	sts	0x008B, r25
    13c8:	80 93 8a 00 	sts	0x008A, r24
			osd();
    13cc:	0e 94 3b 09 	call	0x1276	; 0x1276 <osd>
    13d0:	28 ec       	ldi	r18, 0xC8	; 200
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d4:	48 e8       	ldi	r20, 0x88	; 136
    13d6:	53 e1       	ldi	r21, 0x13	; 19
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <__vector_18+0xc8>
    13da:	ca 01       	movw	r24, r20
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <__vector_18+0xc4>
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
    13e0:	21 50       	subi	r18, 0x01	; 1
    13e2:	30 40       	sbci	r19, 0x00	; 0
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	2f 3f       	cpi	r18, 0xFF	; 255
    13e8:	38 07       	cpc	r19, r24
    13ea:	b9 f7       	brne	.-18     	; 0x13da <__vector_18+0xc2>
    13ec:	85 c0       	rjmp	.+266    	; 0x14f8 <__vector_18+0x1e0>
			delay_ms(200);
			array_filled=0;
		}
		else if(!left_state()&&left_state1) {
    13ee:	1a 99       	sbic	0x03, 2	; 3
    13f0:	30 c0       	rjmp	.+96     	; 0x1452 <__vector_18+0x13a>
    13f2:	80 91 fc 01 	lds	r24, 0x01FC
    13f6:	88 23       	and	r24, r24
    13f8:	61 f1       	breq	.+88     	; 0x1452 <__vector_18+0x13a>
			decr_step(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX,adc_step);
    13fa:	20 91 8a 00 	lds	r18, 0x008A
    13fe:	30 91 8b 00 	lds	r19, 0x008B
    1402:	80 91 ef 01 	lds	r24, 0x01EF
    1406:	48 2f       	mov	r20, r24
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	ca 01       	movw	r24, r20
    140c:	80 5b       	subi	r24, 0xB0	; 176
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	28 17       	cp	r18, r24
    1412:	39 07       	cpc	r19, r25
    1414:	18 f4       	brcc	.+6      	; 0x141c <__vector_18+0x104>
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <__vector_18+0x110>
    141c:	80 91 8a 00 	lds	r24, 0x008A
    1420:	90 91 8b 00 	lds	r25, 0x008B
    1424:	84 1b       	sub	r24, r20
    1426:	95 0b       	sbc	r25, r21
    1428:	90 93 8b 00 	sts	0x008B, r25
    142c:	80 93 8a 00 	sts	0x008A, r24
			osd();
    1430:	0e 94 3b 09 	call	0x1276	; 0x1276 <osd>
    1434:	28 ec       	ldi	r18, 0xC8	; 200
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	48 e8       	ldi	r20, 0x88	; 136
    143a:	53 e1       	ldi	r21, 0x13	; 19
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <__vector_18+0x12c>
    143e:	ca 01       	movw	r24, r20
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <__vector_18+0x128>
    1444:	21 50       	subi	r18, 0x01	; 1
    1446:	30 40       	sbci	r19, 0x00	; 0
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	2f 3f       	cpi	r18, 0xFF	; 255
    144c:	38 07       	cpc	r19, r24
    144e:	b9 f7       	brne	.-18     	; 0x143e <__vector_18+0x126>
    1450:	53 c0       	rjmp	.+166    	; 0x14f8 <__vector_18+0x1e0>
			delay_ms(200);
			array_filled=0;
		}
		else if(!up_state()&&up_state1) {
    1452:	1c 99       	sbic	0x03, 4	; 3
    1454:	28 c0       	rjmp	.+80     	; 0x14a6 <__vector_18+0x18e>
    1456:	80 91 fe 01 	lds	r24, 0x01FE
    145a:	88 23       	and	r24, r24
    145c:	21 f1       	breq	.+72     	; 0x14a6 <__vector_18+0x18e>
			increment(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    145e:	80 91 8a 00 	lds	r24, 0x008A
    1462:	90 91 8b 00 	lds	r25, 0x008B
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	19 f4       	brne	.+6      	; 0x1472 <__vector_18+0x15a>
    146c:	80 e5       	ldi	r24, 0x50	; 80
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	05 c0       	rjmp	.+10     	; 0x147c <__vector_18+0x164>
    1472:	80 91 8a 00 	lds	r24, 0x008A
    1476:	90 91 8b 00 	lds	r25, 0x008B
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	90 93 8b 00 	sts	0x008B, r25
    1480:	80 93 8a 00 	sts	0x008A, r24
			osd();
    1484:	0e 94 3b 09 	call	0x1276	; 0x1276 <osd>
    1488:	28 ec       	ldi	r18, 0xC8	; 200
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	48 e8       	ldi	r20, 0x88	; 136
    148e:	53 e1       	ldi	r21, 0x13	; 19
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <__vector_18+0x180>
    1492:	ca 01       	movw	r24, r20
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <__vector_18+0x17c>
    1498:	21 50       	subi	r18, 0x01	; 1
    149a:	30 40       	sbci	r19, 0x00	; 0
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	2f 3f       	cpi	r18, 0xFF	; 255
    14a0:	38 07       	cpc	r19, r24
    14a2:	b9 f7       	brne	.-18     	; 0x1492 <__vector_18+0x17a>
    14a4:	29 c0       	rjmp	.+82     	; 0x14f8 <__vector_18+0x1e0>
			delay_ms(200);
			array_filled=0;
		}
		else if(!down_state()&&down_state1) {
    14a6:	1d 99       	sbic	0x03, 5	; 3
    14a8:	2a c0       	rjmp	.+84     	; 0x14fe <__vector_18+0x1e6>
    14aa:	80 91 ff 01 	lds	r24, 0x01FF
    14ae:	88 23       	and	r24, r24
    14b0:	31 f1       	breq	.+76     	; 0x14fe <__vector_18+0x1e6>
			decrement(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    14b2:	80 91 8a 00 	lds	r24, 0x008A
    14b6:	90 91 8b 00 	lds	r25, 0x008B
    14ba:	80 35       	cpi	r24, 0x50	; 80
    14bc:	91 05       	cpc	r25, r1
    14be:	19 f4       	brne	.+6      	; 0x14c6 <__vector_18+0x1ae>
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <__vector_18+0x1b8>
    14c6:	80 91 8a 00 	lds	r24, 0x008A
    14ca:	90 91 8b 00 	lds	r25, 0x008B
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	90 93 8b 00 	sts	0x008B, r25
    14d4:	80 93 8a 00 	sts	0x008A, r24
			osd();
    14d8:	0e 94 3b 09 	call	0x1276	; 0x1276 <osd>
    14dc:	28 ec       	ldi	r18, 0xC8	; 200
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	48 e8       	ldi	r20, 0x88	; 136
    14e2:	53 e1       	ldi	r21, 0x13	; 19
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <__vector_18+0x1d4>
    14e6:	ca 01       	movw	r24, r20
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <__vector_18+0x1d0>
    14ec:	21 50       	subi	r18, 0x01	; 1
    14ee:	30 40       	sbci	r19, 0x00	; 0
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	2f 3f       	cpi	r18, 0xFF	; 255
    14f4:	38 07       	cpc	r19, r24
    14f6:	b9 f7       	brne	.-18     	; 0x14e6 <__vector_18+0x1ce>
			delay_ms(200);
			array_filled=0;
    14f8:	10 92 01 02 	sts	0x0201, r1
    14fc:	90 c1       	rjmp	.+800    	; 0x181e <__vector_18+0x506>
		}
		else if(!top_state()&&top_state1) {
    14fe:	18 99       	sbic	0x03, 0	; 3
    1500:	8e c1       	rjmp	.+796    	; 0x181e <__vector_18+0x506>
    1502:	80 91 fb 01 	lds	r24, 0x01FB
    1506:	88 23       	and	r24, r24
    1508:	09 f4       	brne	.+2      	; 0x150c <__vector_18+0x1f4>
    150a:	89 c1       	rjmp	.+786    	; 0x181e <__vector_18+0x506>
			menu_state=0;
    150c:	10 92 f1 01 	sts	0x01F1, r1
    1510:	83 c1       	rjmp	.+774    	; 0x1818 <__vector_18+0x500>
			redraw_menu=1;
		}
	}
	else if(menu_state>MENU_MAX) {
    1512:	9a 30       	cpi	r25, 0x0A	; 10
    1514:	0c f4       	brge	.+2      	; 0x1518 <__vector_18+0x200>
    1516:	45 c1       	rjmp	.+650    	; 0x17a2 <__vector_18+0x48a>
		if(!top_state()&&(top_state1)) {
    1518:	18 99       	sbic	0x03, 0	; 3
    151a:	08 c0       	rjmp	.+16     	; 0x152c <__vector_18+0x214>
    151c:	80 91 fb 01 	lds	r24, 0x01FB
    1520:	88 23       	and	r24, r24
    1522:	21 f0       	breq	.+8      	; 0x152c <__vector_18+0x214>
			menu_state-=MENU_MAX;
    1524:	99 50       	subi	r25, 0x09	; 9
    1526:	90 93 f1 01 	sts	0x01F1, r25
    152a:	76 c1       	rjmp	.+748    	; 0x1818 <__vector_18+0x500>
			redraw_menu=1;
		}
		else if(menu_state==(MENU_MAX+MENU_MODE)) {
    152c:	9a 30       	cpi	r25, 0x0A	; 10
    152e:	29 f5       	brne	.+74     	; 0x157a <__vector_18+0x262>
			if(!right_state()&&right_state1) {
    1530:	19 99       	sbic	0x03, 1	; 3
    1532:	0c c0       	rjmp	.+24     	; 0x154c <__vector_18+0x234>
    1534:	80 91 fd 01 	lds	r24, 0x01FD
    1538:	88 23       	and	r24, r24
    153a:	41 f0       	breq	.+16     	; 0x154c <__vector_18+0x234>
				increment(mode,MODE_MIN,MODE_MAX);
    153c:	80 91 ee 01 	lds	r24, 0x01EE
    1540:	86 30       	cpi	r24, 0x06	; 6
    1542:	11 f4       	brne	.+4      	; 0x1548 <__vector_18+0x230>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <__vector_18+0x250>
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <__vector_18+0x250>
				if(mode!=MODE_XY) ADMUX=0b01100000;
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    154c:	1a 99       	sbic	0x03, 2	; 3
    154e:	67 c1       	rjmp	.+718    	; 0x181e <__vector_18+0x506>
    1550:	80 91 fc 01 	lds	r24, 0x01FC
    1554:	88 23       	and	r24, r24
    1556:	09 f4       	brne	.+2      	; 0x155a <__vector_18+0x242>
    1558:	62 c1       	rjmp	.+708    	; 0x181e <__vector_18+0x506>
				decrement(mode,MODE_MIN,MODE_MAX);
    155a:	80 91 ee 01 	lds	r24, 0x01EE
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	11 f4       	brne	.+4      	; 0x1566 <__vector_18+0x24e>
    1562:	86 e0       	ldi	r24, 0x06	; 6
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <__vector_18+0x250>
    1566:	81 50       	subi	r24, 0x01	; 1
    1568:	80 93 ee 01 	sts	0x01EE, r24
				if(mode!=MODE_XY) ADMUX=0b01100000;
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_18+0x25a>
    1570:	53 c1       	rjmp	.+678    	; 0x1818 <__vector_18+0x500>
    1572:	80 e6       	ldi	r24, 0x60	; 96
    1574:	80 93 7c 00 	sts	0x007C, r24
    1578:	4f c1       	rjmp	.+670    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCPERIOD)) {
    157a:	9b 30       	cpi	r25, 0x0B	; 11
    157c:	89 f5       	brne	.+98     	; 0x15e0 <__vector_18+0x2c8>
			if(!right_state()&&right_state1) {
    157e:	19 99       	sbic	0x03, 1	; 3
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <__vector_18+0x292>
    1582:	80 91 fd 01 	lds	r24, 0x01FD
    1586:	88 23       	and	r24, r24
    1588:	81 f0       	breq	.+32     	; 0x15aa <__vector_18+0x292>
				increment(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    158a:	80 91 8a 00 	lds	r24, 0x008A
    158e:	90 91 8b 00 	lds	r25, 0x008B
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	19 f4       	brne	.+6      	; 0x159e <__vector_18+0x286>
    1598:	80 e5       	ldi	r24, 0x50	; 80
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	1c c0       	rjmp	.+56     	; 0x15d6 <__vector_18+0x2be>
    159e:	80 91 8a 00 	lds	r24, 0x008A
    15a2:	90 91 8b 00 	lds	r25, 0x008B
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	16 c0       	rjmp	.+44     	; 0x15d6 <__vector_18+0x2be>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    15aa:	1a 99       	sbic	0x03, 2	; 3
    15ac:	38 c1       	rjmp	.+624    	; 0x181e <__vector_18+0x506>
    15ae:	80 91 fc 01 	lds	r24, 0x01FC
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__vector_18+0x2a0>
    15b6:	33 c1       	rjmp	.+614    	; 0x181e <__vector_18+0x506>
				decrement(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    15b8:	80 91 8a 00 	lds	r24, 0x008A
    15bc:	90 91 8b 00 	lds	r25, 0x008B
    15c0:	80 35       	cpi	r24, 0x50	; 80
    15c2:	91 05       	cpc	r25, r1
    15c4:	19 f4       	brne	.+6      	; 0x15cc <__vector_18+0x2b4>
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <__vector_18+0x2be>
    15cc:	80 91 8a 00 	lds	r24, 0x008A
    15d0:	90 91 8b 00 	lds	r25, 0x008B
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	90 93 8b 00 	sts	0x008B, r25
    15da:	80 93 8a 00 	sts	0x008A, r24
    15de:	1c c1       	rjmp	.+568    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCCHECK)) {
    15e0:	9c 30       	cpi	r25, 0x0C	; 12
    15e2:	41 f5       	brne	.+80     	; 0x1634 <__vector_18+0x31c>
			if(!right_state()&&right_state1) {
    15e4:	19 99       	sbic	0x03, 1	; 3
    15e6:	10 c0       	rjmp	.+32     	; 0x1608 <__vector_18+0x2f0>
    15e8:	80 91 fd 01 	lds	r24, 0x01FD
    15ec:	88 23       	and	r24, r24
    15ee:	61 f0       	breq	.+24     	; 0x1608 <__vector_18+0x2f0>
				increment(adc_check,0,ALL_N-1);
    15f0:	80 91 f4 01 	lds	r24, 0x01F4
    15f4:	90 91 f5 01 	lds	r25, 0x01F5
    15f8:	8f 37       	cpi	r24, 0x7F	; 127
    15fa:	91 05       	cpc	r25, r1
    15fc:	19 f4       	brne	.+6      	; 0x1604 <__vector_18+0x2ec>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	13 c0       	rjmp	.+38     	; 0x162a <__vector_18+0x312>
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	11 c0       	rjmp	.+34     	; 0x162a <__vector_18+0x312>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    1608:	1a 99       	sbic	0x03, 2	; 3
    160a:	09 c1       	rjmp	.+530    	; 0x181e <__vector_18+0x506>
    160c:	80 91 fc 01 	lds	r24, 0x01FC
    1610:	88 23       	and	r24, r24
    1612:	09 f4       	brne	.+2      	; 0x1616 <__vector_18+0x2fe>
    1614:	04 c1       	rjmp	.+520    	; 0x181e <__vector_18+0x506>
				decrement(adc_check,0,ALL_N-1);
    1616:	80 91 f4 01 	lds	r24, 0x01F4
    161a:	90 91 f5 01 	lds	r25, 0x01F5
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	19 f4       	brne	.+6      	; 0x1628 <__vector_18+0x310>
    1622:	8f e7       	ldi	r24, 0x7F	; 127
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	01 c0       	rjmp	.+2      	; 0x162a <__vector_18+0x312>
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	90 93 f5 01 	sts	0x01F5, r25
    162e:	80 93 f4 01 	sts	0x01F4, r24
    1632:	f2 c0       	rjmp	.+484    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCERROR)) {
    1634:	9d 30       	cpi	r25, 0x0D	; 13
    1636:	61 f5       	brne	.+88     	; 0x1690 <__vector_18+0x378>
			if(!right_state()&&right_state1) {
    1638:	19 99       	sbic	0x03, 1	; 3
    163a:	12 c0       	rjmp	.+36     	; 0x1660 <__vector_18+0x348>
    163c:	80 91 fd 01 	lds	r24, 0x01FD
    1640:	88 23       	and	r24, r24
    1642:	71 f0       	breq	.+28     	; 0x1660 <__vector_18+0x348>
				incr_step(adc_error,ADC_ERROR_STEP,ADC_ERROR_MAX,ADC_ERROR_STEP);
    1644:	80 91 f2 01 	lds	r24, 0x01F2
    1648:	90 91 f3 01 	lds	r25, 0x01F3
    164c:	2f ef       	ldi	r18, 0xFF	; 255
    164e:	8c 39       	cpi	r24, 0x9C	; 156
    1650:	92 07       	cpc	r25, r18
    1652:	18 f0       	brcs	.+6      	; 0x165a <__vector_18+0x342>
    1654:	84 e6       	ldi	r24, 0x64	; 100
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <__vector_18+0x36e>
    165a:	8c 59       	subi	r24, 0x9C	; 156
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <__vector_18+0x36e>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    1660:	1a 99       	sbic	0x03, 2	; 3
    1662:	dd c0       	rjmp	.+442    	; 0x181e <__vector_18+0x506>
    1664:	80 91 fc 01 	lds	r24, 0x01FC
    1668:	88 23       	and	r24, r24
    166a:	09 f4       	brne	.+2      	; 0x166e <__vector_18+0x356>
    166c:	d8 c0       	rjmp	.+432    	; 0x181e <__vector_18+0x506>
				decr_step(adc_error,ADC_ERROR_STEP,ADC_ERROR_MAX,ADC_ERROR_STEP);
    166e:	80 91 f2 01 	lds	r24, 0x01F2
    1672:	90 91 f3 01 	lds	r25, 0x01F3
    1676:	88 3c       	cpi	r24, 0xC8	; 200
    1678:	91 05       	cpc	r25, r1
    167a:	18 f4       	brcc	.+6      	; 0x1682 <__vector_18+0x36a>
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	9f ef       	ldi	r25, 0xFF	; 255
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <__vector_18+0x36e>
    1682:	84 56       	subi	r24, 0x64	; 100
    1684:	90 40       	sbci	r25, 0x00	; 0
    1686:	90 93 f3 01 	sts	0x01F3, r25
    168a:	80 93 f2 01 	sts	0x01F2, r24
    168e:	c4 c0       	rjmp	.+392    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCSTEP)) {
    1690:	9e 30       	cpi	r25, 0x0E	; 14
    1692:	d9 f4       	brne	.+54     	; 0x16ca <__vector_18+0x3b2>
			if(!right_state()&&right_state1) {
    1694:	19 99       	sbic	0x03, 1	; 3
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <__vector_18+0x390>
    1698:	80 91 fd 01 	lds	r24, 0x01FD
    169c:	88 23       	and	r24, r24
    169e:	21 f0       	breq	.+8      	; 0x16a8 <__vector_18+0x390>
				increment(adc_step,ADC_STEP_MIN,ADC_PERIOD_MAX);
    16a0:	80 91 ef 01 	lds	r24, 0x01EF
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	0e c0       	rjmp	.+28     	; 0x16c4 <__vector_18+0x3ac>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    16a8:	1a 99       	sbic	0x03, 2	; 3
    16aa:	b9 c0       	rjmp	.+370    	; 0x181e <__vector_18+0x506>
    16ac:	80 91 fc 01 	lds	r24, 0x01FC
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <__vector_18+0x39e>
    16b4:	b4 c0       	rjmp	.+360    	; 0x181e <__vector_18+0x506>
				decrement(adc_step,ADC_STEP_MIN,ADC_PERIOD_MAX);
    16b6:	80 91 ef 01 	lds	r24, 0x01EF
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	11 f4       	brne	.+4      	; 0x16c2 <__vector_18+0x3aa>
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <__vector_18+0x3ac>
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	80 93 ef 01 	sts	0x01EF, r24
    16c8:	a7 c0       	rjmp	.+334    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_LCDSKIP)) {
    16ca:	9f 30       	cpi	r25, 0x0F	; 15
    16cc:	f9 f4       	brne	.+62     	; 0x170c <__vector_18+0x3f4>
			if(!right_state()&&right_state1) {
    16ce:	19 99       	sbic	0x03, 1	; 3
    16d0:	0c c0       	rjmp	.+24     	; 0x16ea <__vector_18+0x3d2>
    16d2:	80 91 fd 01 	lds	r24, 0x01FD
    16d6:	88 23       	and	r24, r24
    16d8:	41 f0       	breq	.+16     	; 0x16ea <__vector_18+0x3d2>
				increment(lcd_skip,LCD_SKIP_MIN,LCD_SKIP_MAX);
    16da:	80 91 f0 01 	lds	r24, 0x01F0
    16de:	8f 3f       	cpi	r24, 0xFF	; 255
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <__vector_18+0x3ce>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	10 c0       	rjmp	.+32     	; 0x1706 <__vector_18+0x3ee>
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	0e c0       	rjmp	.+28     	; 0x1706 <__vector_18+0x3ee>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    16ea:	1a 99       	sbic	0x03, 2	; 3
    16ec:	98 c0       	rjmp	.+304    	; 0x181e <__vector_18+0x506>
    16ee:	80 91 fc 01 	lds	r24, 0x01FC
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <__vector_18+0x3e0>
    16f6:	93 c0       	rjmp	.+294    	; 0x181e <__vector_18+0x506>
				decrement(lcd_skip,LCD_SKIP_MIN,LCD_SKIP_MAX);
    16f8:	80 91 f0 01 	lds	r24, 0x01F0
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__vector_18+0x3ec>
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <__vector_18+0x3ee>
    1704:	81 50       	subi	r24, 0x01	; 1
    1706:	80 93 f0 01 	sts	0x01F0, r24
    170a:	86 c0       	rjmp	.+268    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_SPECTRUMXZOOM)) {
    170c:	90 31       	cpi	r25, 0x10	; 16
    170e:	19 f5       	brne	.+70     	; 0x1756 <__vector_18+0x43e>
			if(!right_state()&&right_state1) {
    1710:	19 99       	sbic	0x03, 1	; 3
    1712:	10 c0       	rjmp	.+32     	; 0x1734 <__vector_18+0x41c>
    1714:	80 91 fd 01 	lds	r24, 0x01FD
    1718:	88 23       	and	r24, r24
    171a:	61 f0       	breq	.+24     	; 0x1734 <__vector_18+0x41c>
				increment(spectrum_x_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_X);
    171c:	80 91 03 02 	lds	r24, 0x0203
    1720:	85 30       	cpi	r24, 0x05	; 5
    1722:	11 f4       	brne	.+4      	; 0x1728 <__vector_18+0x410>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	01 c0       	rjmp	.+2      	; 0x172a <__vector_18+0x412>
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	80 93 03 02 	sts	0x0203, r24
				redraw_menu=1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 00 02 	sts	0x0200, r24
			}
			if(!left_state()&&left_state1) {
    1734:	1a 99       	sbic	0x03, 2	; 3
    1736:	73 c0       	rjmp	.+230    	; 0x181e <__vector_18+0x506>
    1738:	80 91 fc 01 	lds	r24, 0x01FC
    173c:	88 23       	and	r24, r24
    173e:	09 f4       	brne	.+2      	; 0x1742 <__vector_18+0x42a>
    1740:	6e c0       	rjmp	.+220    	; 0x181e <__vector_18+0x506>
				decrement(spectrum_x_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_X);
    1742:	80 91 03 02 	lds	r24, 0x0203
    1746:	88 23       	and	r24, r24
    1748:	11 f4       	brne	.+4      	; 0x174e <__vector_18+0x436>
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <__vector_18+0x438>
    174e:	81 50       	subi	r24, 0x01	; 1
    1750:	80 93 03 02 	sts	0x0203, r24
    1754:	61 c0       	rjmp	.+194    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_SPECTRUMYZOOM)) {
    1756:	91 31       	cpi	r25, 0x11	; 17
    1758:	09 f0       	breq	.+2      	; 0x175c <__vector_18+0x444>
    175a:	61 c0       	rjmp	.+194    	; 0x181e <__vector_18+0x506>
			if(!right_state()&&right_state1) {
    175c:	19 99       	sbic	0x03, 1	; 3
    175e:	10 c0       	rjmp	.+32     	; 0x1780 <__vector_18+0x468>
    1760:	80 91 fd 01 	lds	r24, 0x01FD
    1764:	88 23       	and	r24, r24
    1766:	61 f0       	breq	.+24     	; 0x1780 <__vector_18+0x468>
				increment(spectrum_y_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_Y);
    1768:	80 91 04 02 	lds	r24, 0x0204
    176c:	86 30       	cpi	r24, 0x06	; 6
    176e:	11 f4       	brne	.+4      	; 0x1774 <__vector_18+0x45c>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <__vector_18+0x45e>
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	80 93 04 02 	sts	0x0204, r24
				redraw_menu=1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 00 02 	sts	0x0200, r24
			}
			if(!left_state()&&left_state1) {
    1780:	1a 99       	sbic	0x03, 2	; 3
    1782:	4d c0       	rjmp	.+154    	; 0x181e <__vector_18+0x506>
    1784:	80 91 fc 01 	lds	r24, 0x01FC
    1788:	88 23       	and	r24, r24
    178a:	09 f4       	brne	.+2      	; 0x178e <__vector_18+0x476>
    178c:	48 c0       	rjmp	.+144    	; 0x181e <__vector_18+0x506>
				decrement(spectrum_y_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_Y);
    178e:	80 91 04 02 	lds	r24, 0x0204
    1792:	88 23       	and	r24, r24
    1794:	11 f4       	brne	.+4      	; 0x179a <__vector_18+0x482>
    1796:	86 e0       	ldi	r24, 0x06	; 6
    1798:	01 c0       	rjmp	.+2      	; 0x179c <__vector_18+0x484>
    179a:	81 50       	subi	r24, 0x01	; 1
    179c:	80 93 04 02 	sts	0x0204, r24
    17a0:	3b c0       	rjmp	.+118    	; 0x1818 <__vector_18+0x500>
				redraw_menu=1;
			}
		}
	}
	else {
		if(!right_state()&&right_state1) {
    17a2:	19 99       	sbic	0x03, 1	; 3
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <__vector_18+0x4ac>
    17a6:	80 91 fd 01 	lds	r24, 0x01FD
    17aa:	88 23       	and	r24, r24
    17ac:	59 f0       	breq	.+22     	; 0x17c4 <__vector_18+0x4ac>
			menu_state=(menu_state==MENU_MAX)?0:menu_state+1;
    17ae:	99 30       	cpi	r25, 0x09	; 9
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__vector_18+0x49e>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <__vector_18+0x4a2>
    17b6:	89 2f       	mov	r24, r25
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	80 93 f1 01 	sts	0x01F1, r24
			redraw_menu=1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 00 02 	sts	0x0200, r24
		}
		if(!left_state()&&left_state1) {
    17c4:	1a 99       	sbic	0x03, 2	; 3
    17c6:	10 c0       	rjmp	.+32     	; 0x17e8 <__vector_18+0x4d0>
    17c8:	80 91 fc 01 	lds	r24, 0x01FC
    17cc:	88 23       	and	r24, r24
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <__vector_18+0x4d0>
			menu_state=menu_state?menu_state-1:MENU_MAX;
    17d0:	80 91 f1 01 	lds	r24, 0x01F1
    17d4:	88 23       	and	r24, r24
    17d6:	11 f4       	brne	.+4      	; 0x17dc <__vector_18+0x4c4>
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	01 c0       	rjmp	.+2      	; 0x17de <__vector_18+0x4c6>
    17dc:	81 50       	subi	r24, 0x01	; 1
    17de:	80 93 f1 01 	sts	0x01F1, r24
			redraw_menu=1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 00 02 	sts	0x0200, r24
		}
		if(!top_state()&&(top_state1)) {
    17e8:	18 99       	sbic	0x03, 0	; 3
    17ea:	19 c0       	rjmp	.+50     	; 0x181e <__vector_18+0x506>
    17ec:	80 91 fb 01 	lds	r24, 0x01FB
    17f0:	88 23       	and	r24, r24
    17f2:	a9 f0       	breq	.+42     	; 0x181e <__vector_18+0x506>
			if(menu_state==0) {
    17f4:	80 91 f1 01 	lds	r24, 0x01F1
    17f8:	88 23       	and	r24, r24
    17fa:	49 f4       	brne	.+18     	; 0x180e <__vector_18+0x4f6>
				menu_state=-1;
    17fc:	8f ef       	ldi	r24, 0xFF	; 255
    17fe:	80 93 f1 01 	sts	0x01F1, r24
				redraw_menu=1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	80 93 00 02 	sts	0x0200, r24
				top_state1=0;
    1808:	10 92 fb 01 	sts	0x01FB, r1
    180c:	08 c0       	rjmp	.+16     	; 0x181e <__vector_18+0x506>
			}
			else {
				menu_state+=MENU_MAX;
    180e:	87 5f       	subi	r24, 0xF7	; 247
    1810:	80 93 f1 01 	sts	0x01F1, r24
				top_state1=0;
    1814:	10 92 fb 01 	sts	0x01FB, r1
				redraw_menu=1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 00 02 	sts	0x0200, r24
			}
		}
	}
	buttons_update();
    181e:	0e 94 0a 03 	call	0x614	; 0x614 <buttons_update>
}
    1822:	ff 91       	pop	r31
    1824:	ef 91       	pop	r30
    1826:	bf 91       	pop	r27
    1828:	af 91       	pop	r26
    182a:	9f 91       	pop	r25
    182c:	8f 91       	pop	r24
    182e:	7f 91       	pop	r23
    1830:	6f 91       	pop	r22
    1832:	5f 91       	pop	r21
    1834:	4f 91       	pop	r20
    1836:	3f 91       	pop	r19
    1838:	2f 91       	pop	r18
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <tbl_window>:
    1848:	3d 0a       	sbc	r3, r29
    184a:	4f 0a       	sbc	r4, r31
    184c:	85 0a       	sbc	r8, r21
    184e:	e0 0a       	sbc	r14, r16
    1850:	5e 0b       	sbc	r21, r30
    1852:	01 0c       	add	r0, r1
    1854:	c6 0c       	add	r12, r6
    1856:	ae 0d       	add	r26, r14
    1858:	b8 0e       	add	r11, r24
    185a:	e4 0f       	add	r30, r20
    185c:	31 11       	cpse	r19, r1
    185e:	9d 12       	cpse	r9, r29
    1860:	29 14       	cp	r2, r9
    1862:	d3 15       	cp	r29, r3
    1864:	9a 17       	cp	r25, r26
    1866:	7d 19       	sub	r23, r13
    1868:	7c 1b       	sub	r23, r28
    186a:	93 1d       	adc	r25, r3
    186c:	c4 1f       	adc	r28, r20
    186e:	0b 22       	and	r0, r27
    1870:	68 24       	eor	r6, r8
    1872:	d9 26       	eor	r13, r25
    1874:	5c 29       	or	r21, r12
    1876:	f1 2b       	or	r31, r17
    1878:	96 2e       	mov	r9, r22
    187a:	48 31       	cpi	r20, 0x18	; 24
    187c:	06 34       	cpi	r16, 0x46	; 70
    187e:	cf 36       	cpi	r28, 0x6F	; 111
    1880:	a1 39       	cpi	r26, 0x91	; 145
    1882:	7a 3c       	cpi	r23, 0xCA	; 202
    1884:	58 3f       	cpi	r21, 0xF8	; 248
    1886:	3a 42       	sbci	r19, 0x2A	; 42
    1888:	1e 45       	sbci	r17, 0x5E	; 94
    188a:	01 48       	sbci	r16, 0x81	; 129
    188c:	e3 4a       	sbci	r30, 0xA3	; 163
    188e:	c1 4d       	sbci	r28, 0xD1	; 209
    1890:	9a 50       	subi	r25, 0x0A	; 10
    1892:	6c 53       	subi	r22, 0x3C	; 60
    1894:	35 56       	subi	r19, 0x65	; 101
    1896:	f4 58       	subi	r31, 0x84	; 132
    1898:	a6 5b       	subi	r26, 0xB6	; 182
    189a:	4a 5e       	subi	r20, 0xEA	; 234
    189c:	df 60       	ori	r29, 0x0F	; 15
    189e:	63 63       	ori	r22, 0x33	; 51
    18a0:	d4 65       	ori	r29, 0x54	; 84
    18a2:	31 68       	ori	r19, 0x81	; 129
    18a4:	78 6a       	ori	r23, 0xA8	; 168
    18a6:	a8 6c       	ori	r26, 0xC8	; 200
    18a8:	c0 6e       	ori	r28, 0xE0	; 224
    18aa:	be 70       	andi	r27, 0x0E	; 14
    18ac:	a1 72       	andi	r26, 0x21	; 33
    18ae:	68 74       	andi	r22, 0x48	; 72
    18b0:	12 76       	andi	r17, 0x62	; 98
    18b2:	9e 77       	andi	r25, 0x7E	; 126
    18b4:	0b 79       	andi	r16, 0x9B	; 155
    18b6:	57 7a       	andi	r21, 0xA7	; 167
    18b8:	83 7b       	andi	r24, 0xB3	; 179
    18ba:	8d 7c       	andi	r24, 0xCD	; 205
    18bc:	75 7d       	andi	r23, 0xD5	; 213
    18be:	3b 7e       	andi	r19, 0xEB	; 235
    18c0:	dd 7e       	andi	r29, 0xED	; 237
    18c2:	5b 7f       	andi	r21, 0xFB	; 251
    18c4:	b6 7f       	andi	r27, 0xF6	; 246
    18c6:	ec 7f       	andi	r30, 0xFC	; 252
    18c8:	fe 7f       	andi	r31, 0xFE	; 254
    18ca:	ec 7f       	andi	r30, 0xFC	; 252
    18cc:	b6 7f       	andi	r27, 0xF6	; 246
    18ce:	5b 7f       	andi	r21, 0xFB	; 251
    18d0:	dd 7e       	andi	r29, 0xED	; 237
    18d2:	3b 7e       	andi	r19, 0xEB	; 235
    18d4:	75 7d       	andi	r23, 0xD5	; 213
    18d6:	8d 7c       	andi	r24, 0xCD	; 205
    18d8:	83 7b       	andi	r24, 0xB3	; 179
    18da:	57 7a       	andi	r21, 0xA7	; 167
    18dc:	0b 79       	andi	r16, 0x9B	; 155
    18de:	9e 77       	andi	r25, 0x7E	; 126
    18e0:	12 76       	andi	r17, 0x62	; 98
    18e2:	68 74       	andi	r22, 0x48	; 72
    18e4:	a1 72       	andi	r26, 0x21	; 33
    18e6:	be 70       	andi	r27, 0x0E	; 14
    18e8:	c0 6e       	ori	r28, 0xE0	; 224
    18ea:	a8 6c       	ori	r26, 0xC8	; 200
    18ec:	78 6a       	ori	r23, 0xA8	; 168
    18ee:	31 68       	ori	r19, 0x81	; 129
    18f0:	d4 65       	ori	r29, 0x54	; 84
    18f2:	63 63       	ori	r22, 0x33	; 51
    18f4:	df 60       	ori	r29, 0x0F	; 15
    18f6:	4a 5e       	subi	r20, 0xEA	; 234
    18f8:	a6 5b       	subi	r26, 0xB6	; 182
    18fa:	f4 58       	subi	r31, 0x84	; 132
    18fc:	35 56       	subi	r19, 0x65	; 101
    18fe:	6c 53       	subi	r22, 0x3C	; 60
    1900:	9a 50       	subi	r25, 0x0A	; 10
    1902:	c1 4d       	sbci	r28, 0xD1	; 209
    1904:	e3 4a       	sbci	r30, 0xA3	; 163
    1906:	01 48       	sbci	r16, 0x81	; 129
    1908:	1e 45       	sbci	r17, 0x5E	; 94
    190a:	3a 42       	sbci	r19, 0x2A	; 42
    190c:	58 3f       	cpi	r21, 0xF8	; 248
    190e:	7a 3c       	cpi	r23, 0xCA	; 202
    1910:	a1 39       	cpi	r26, 0x91	; 145
    1912:	cf 36       	cpi	r28, 0x6F	; 111
    1914:	06 34       	cpi	r16, 0x46	; 70
    1916:	48 31       	cpi	r20, 0x18	; 24
    1918:	96 2e       	mov	r9, r22
    191a:	f1 2b       	or	r31, r17
    191c:	5c 29       	or	r21, r12
    191e:	d9 26       	eor	r13, r25
    1920:	68 24       	eor	r6, r8
    1922:	0b 22       	and	r0, r27
    1924:	c4 1f       	adc	r28, r20
    1926:	93 1d       	adc	r25, r3
    1928:	7c 1b       	sub	r23, r28
    192a:	7e 19       	sub	r23, r14
    192c:	9a 17       	cp	r25, r26
    192e:	d3 15       	cp	r29, r3
    1930:	29 14       	cp	r2, r9
    1932:	9d 12       	cpse	r9, r29
    1934:	31 11       	cpse	r19, r1
    1936:	e4 0f       	add	r30, r20
    1938:	b8 0e       	add	r11, r24
    193a:	ae 0d       	add	r26, r14
    193c:	c6 0c       	add	r12, r6
    193e:	01 0c       	add	r0, r1
    1940:	5e 0b       	sbc	r21, r30
    1942:	e0 0a       	sbc	r14, r16
    1944:	85 0a       	sbc	r8, r21
    1946:	4f 0a       	sbc	r4, r31

00001948 <tbl_cos_sin>:
    1948:	ff 7f       	andi	r31, 0xFF	; 255
    194a:	00 00       	nop
    194c:	d7 7f       	andi	r29, 0xF7	; 247
    194e:	47 06       	cpc	r4, r23
    1950:	61 7f       	andi	r22, 0xF1	; 241
    1952:	8b 0c       	add	r8, r11
    1954:	9c 7e       	andi	r25, 0xEC	; 236
    1956:	c7 12       	cpse	r12, r23
    1958:	89 7d       	andi	r24, 0xD9	; 217
    195a:	f8 18       	sub	r15, r8
    195c:	29 7c       	andi	r18, 0xC9	; 201
    195e:	19 1f       	adc	r17, r25
    1960:	7c 7a       	andi	r23, 0xAC	; 172
    1962:	27 25       	eor	r18, r7
    1964:	83 78       	andi	r24, 0x83	; 131
    1966:	1e 2b       	or	r17, r30
    1968:	40 76       	andi	r20, 0x60	; 96
    196a:	fb 30       	cpi	r31, 0x0B	; 11
    196c:	b5 73       	andi	r27, 0x35	; 53
    196e:	b9 36       	cpi	r27, 0x69	; 105
    1970:	e1 70       	andi	r30, 0x01	; 1
    1972:	56 3c       	cpi	r21, 0xC6	; 198
    1974:	c9 6d       	ori	r28, 0xD9	; 217
    1976:	cd 41       	sbci	r28, 0x1D	; 29
    1978:	6c 6a       	ori	r22, 0xAC	; 172
    197a:	1c 47       	sbci	r17, 0x7C	; 124
    197c:	ce 66       	ori	r28, 0x6E	; 110
    197e:	3f 4c       	sbci	r19, 0xCF	; 207
    1980:	f1 62       	ori	r31, 0x21	; 33
    1982:	33 51       	subi	r19, 0x13	; 19
    1984:	d6 5e       	subi	r29, 0xE6	; 230
    1986:	f4 55       	subi	r31, 0x54	; 84
    1988:	81 5a       	subi	r24, 0xA1	; 161
    198a:	81 5a       	subi	r24, 0xA1	; 161
    198c:	f4 55       	subi	r31, 0x54	; 84
    198e:	d6 5e       	subi	r29, 0xE6	; 230
    1990:	33 51       	subi	r19, 0x13	; 19
    1992:	f1 62       	ori	r31, 0x21	; 33
    1994:	3f 4c       	sbci	r19, 0xCF	; 207
    1996:	ce 66       	ori	r28, 0x6E	; 110
    1998:	1c 47       	sbci	r17, 0x7C	; 124
    199a:	6c 6a       	ori	r22, 0xAC	; 172
    199c:	cd 41       	sbci	r28, 0x1D	; 29
    199e:	c9 6d       	ori	r28, 0xD9	; 217
    19a0:	56 3c       	cpi	r21, 0xC6	; 198
    19a2:	e1 70       	andi	r30, 0x01	; 1
    19a4:	b9 36       	cpi	r27, 0x69	; 105
    19a6:	b5 73       	andi	r27, 0x35	; 53
    19a8:	fb 30       	cpi	r31, 0x0B	; 11
    19aa:	40 76       	andi	r20, 0x60	; 96
    19ac:	1e 2b       	or	r17, r30
    19ae:	83 78       	andi	r24, 0x83	; 131
    19b0:	27 25       	eor	r18, r7
    19b2:	7c 7a       	andi	r23, 0xAC	; 172
    19b4:	19 1f       	adc	r17, r25
    19b6:	29 7c       	andi	r18, 0xC9	; 201
    19b8:	f8 18       	sub	r15, r8
    19ba:	89 7d       	andi	r24, 0xD9	; 217
    19bc:	c7 12       	cpse	r12, r23
    19be:	9c 7e       	andi	r25, 0xEC	; 236
    19c0:	8b 0c       	add	r8, r11
    19c2:	61 7f       	andi	r22, 0xF1	; 241
    19c4:	47 06       	cpc	r4, r23
    19c6:	d7 7f       	andi	r29, 0xF7	; 247
    19c8:	00 00       	nop
    19ca:	fe 7f       	andi	r31, 0xFE	; 254
    19cc:	b9 f9       	.word	0xf9b9	; ????
    19ce:	d7 7f       	andi	r29, 0xF7	; 247
    19d0:	75 f3       	brhs	.-36     	; 0x19ae <tbl_cos_sin+0x66>
    19d2:	61 7f       	andi	r22, 0xF1	; 241
    19d4:	39 ed       	ldi	r19, 0xD9	; 217
    19d6:	9c 7e       	andi	r25, 0xEC	; 236
    19d8:	08 e7       	ldi	r16, 0x78	; 120
    19da:	89 7d       	andi	r24, 0xD9	; 217
    19dc:	e7 e0       	ldi	r30, 0x07	; 7
    19de:	29 7c       	andi	r18, 0xC9	; 201
    19e0:	d9 da       	rcall	.-2638   	; 0xf94 <main+0xa>
    19e2:	7c 7a       	andi	r23, 0xAC	; 172
    19e4:	e2 d4       	rcall	.+2500   	; 0x23aa <__data_load_end+0x376>
    19e6:	83 78       	andi	r24, 0x83	; 131
    19e8:	05 cf       	rjmp	.-502    	; 0x17f4 <__vector_18+0x4dc>
    19ea:	40 76       	andi	r20, 0x60	; 96
    19ec:	47 c9       	rjmp	.-3442   	; 0xc7c <draw_menu+0xf6>
    19ee:	b5 73       	andi	r27, 0x35	; 53
    19f0:	aa c3       	rjmp	.+1876   	; 0x2146 <__data_load_end+0x112>
    19f2:	e1 70       	andi	r30, 0x01	; 1
    19f4:	33 be       	out	0x33, r3	; 51
    19f6:	c9 6d       	ori	r28, 0xD9	; 217
    19f8:	e4 b8       	out	0x04, r14	; 4
    19fa:	6c 6a       	ori	r22, 0xAC	; 172
    19fc:	c1 b3       	in	r28, 0x11	; 17
    19fe:	ce 66       	ori	r28, 0x6E	; 110
    1a00:	cd ae       	std	Y+61, r12	; 0x3d
    1a02:	f1 62       	ori	r31, 0x21	; 33
    1a04:	0c aa       	std	Y+52, r0	; 0x34
    1a06:	d6 5e       	subi	r29, 0xE6	; 230
    1a08:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a0a:	81 5a       	subi	r24, 0xA1	; 161
    1a0c:	2a a1       	ldd	r18, Y+34	; 0x22
    1a0e:	f5 55       	subi	r31, 0x55	; 85
    1a10:	0f 9d       	mul	r16, r15
    1a12:	33 51       	subi	r19, 0x13	; 19
    1a14:	32 99       	sbic	0x06, 2	; 6
    1a16:	3f 4c       	sbci	r19, 0xCF	; 207
    1a18:	94 95       	.word	0x9594	; ????
    1a1a:	1c 47       	sbci	r17, 0x7C	; 124
    1a1c:	37 92       	.word	0x9237	; ????
    1a1e:	cd 41       	sbci	r28, 0x1D	; 29
    1a20:	1f 8f       	std	Y+31, r17	; 0x1f
    1a22:	56 3c       	cpi	r21, 0xC6	; 198
    1a24:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1a26:	b9 36       	cpi	r27, 0x69	; 105
    1a28:	c0 89       	ldd	r28, Z+16	; 0x10
    1a2a:	fb 30       	cpi	r31, 0x0B	; 11
    1a2c:	7d 87       	std	Y+13, r23	; 0x0d
    1a2e:	1e 2b       	or	r17, r30
    1a30:	84 85       	ldd	r24, Z+12	; 0x0c
    1a32:	27 25       	eor	r18, r7
    1a34:	d8 83       	st	Y, r29
    1a36:	19 1f       	adc	r17, r25
    1a38:	77 82       	std	Z+7, r7	; 0x07
    1a3a:	f8 18       	sub	r15, r8
    1a3c:	64 81       	ldd	r22, Z+4	; 0x04
    1a3e:	c7 12       	cpse	r12, r23
    1a40:	9f 80       	ldd	r9, Y+7	; 0x07
    1a42:	8b 0c       	add	r8, r11
    1a44:	29 80       	ldd	r2, Y+1	; 0x01
    1a46:	47 06       	cpc	r4, r23

00001a48 <tbl_bitrev>:
    1a48:	00 00       	nop
    1a4a:	00 01       	movw	r0, r0
    1a4c:	80 00       	.word	0x0080	; ????
    1a4e:	80 01       	movw	r16, r0
    1a50:	40 00       	.word	0x0040	; ????
    1a52:	40 01       	movw	r8, r0
    1a54:	c0 00       	.word	0x00c0	; ????
    1a56:	c0 01       	movw	r24, r0
    1a58:	20 00       	.word	0x0020	; ????
    1a5a:	20 01       	movw	r4, r0
    1a5c:	a0 00       	.word	0x00a0	; ????
    1a5e:	a0 01       	movw	r20, r0
    1a60:	60 00       	.word	0x0060	; ????
    1a62:	60 01       	movw	r12, r0
    1a64:	e0 00       	.word	0x00e0	; ????
    1a66:	e0 01       	movw	r28, r0
    1a68:	10 00       	.word	0x0010	; ????
    1a6a:	10 01       	movw	r2, r0
    1a6c:	90 00       	.word	0x0090	; ????
    1a6e:	90 01       	movw	r18, r0
    1a70:	50 00       	.word	0x0050	; ????
    1a72:	50 01       	movw	r10, r0
    1a74:	d0 00       	.word	0x00d0	; ????
    1a76:	d0 01       	movw	r26, r0
    1a78:	30 00       	.word	0x0030	; ????
    1a7a:	30 01       	movw	r6, r0
    1a7c:	b0 00       	.word	0x00b0	; ????
    1a7e:	b0 01       	movw	r22, r0
    1a80:	70 00       	.word	0x0070	; ????
    1a82:	70 01       	movw	r14, r0
    1a84:	f0 00       	.word	0x00f0	; ????
    1a86:	f0 01       	movw	r30, r0
    1a88:	08 00       	.word	0x0008	; ????
    1a8a:	08 01       	movw	r0, r16
    1a8c:	88 00       	.word	0x0088	; ????
    1a8e:	88 01       	movw	r16, r16
    1a90:	48 00       	.word	0x0048	; ????
    1a92:	48 01       	movw	r8, r16
    1a94:	c8 00       	.word	0x00c8	; ????
    1a96:	c8 01       	movw	r24, r16
    1a98:	28 00       	.word	0x0028	; ????
    1a9a:	28 01       	movw	r4, r16
    1a9c:	a8 00       	.word	0x00a8	; ????
    1a9e:	a8 01       	movw	r20, r16
    1aa0:	68 00       	.word	0x0068	; ????
    1aa2:	68 01       	movw	r12, r16
    1aa4:	e8 00       	.word	0x00e8	; ????
    1aa6:	e8 01       	movw	r28, r16
    1aa8:	18 00       	.word	0x0018	; ????
    1aaa:	18 01       	movw	r2, r16
    1aac:	98 00       	.word	0x0098	; ????
    1aae:	98 01       	movw	r18, r16
    1ab0:	58 00       	.word	0x0058	; ????
    1ab2:	58 01       	movw	r10, r16
    1ab4:	d8 00       	.word	0x00d8	; ????
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	38 00       	.word	0x0038	; ????
    1aba:	38 01       	movw	r6, r16
    1abc:	b8 00       	.word	0x00b8	; ????
    1abe:	b8 01       	movw	r22, r16
    1ac0:	78 00       	.word	0x0078	; ????
    1ac2:	78 01       	movw	r14, r16
    1ac4:	f8 00       	.word	0x00f8	; ????
    1ac6:	f8 01       	movw	r30, r16

00001ac8 <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
    1ac8:	3f 92       	push	r3
    1aca:	2f 92       	push	r2
	pushw	AH,AL
    1acc:	1f 93       	push	r17
    1ace:	0f 93       	push	r16
	pushw	YH,YL
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
    1ad4:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
    1ad6:	eb 01       	movw	r28, r22
	clr	EH				;Zero
    1ad8:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
    1ada:	e8 e4       	ldi	r30, 0x48	; 72
    1adc:	f8 e1       	ldi	r31, 0x18	; 24
	ldiw	AH,AL, FFT_N			;A = FFT_N;
    1ade:	00 e8       	ldi	r16, 0x80	; 128
    1ae0:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
    1ae2:	25 91       	lpm	r18, Z+
    1ae4:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
    1ae6:	4d 91       	ld	r20, X+
    1ae8:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
    1aea:	b5 03       	fmuls	r19, r21
    1aec:	b0 01       	movw	r22, r0
    1aee:	2c 03       	fmul	r18, r20
    1af0:	10 01       	movw	r2, r0
    1af2:	69 1f       	adc	r22, r25
    1af4:	bc 03       	fmulsu	r19, r20
    1af6:	79 0b       	sbc	r23, r25
    1af8:	30 0c       	add	r3, r0
    1afa:	61 1d       	adc	r22, r1
    1afc:	79 1f       	adc	r23, r25
    1afe:	da 03       	fmulsu	r21, r18
    1b00:	79 0b       	sbc	r23, r25
    1b02:	30 0c       	add	r3, r0
    1b04:	61 1d       	adc	r22, r1
    1b06:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
    1b08:	69 93       	st	Y+, r22
    1b0a:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
    1b0c:	69 93       	st	Y+, r22
    1b0e:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
    1b10:	01 50       	subi	r16, 0x01	; 1
    1b12:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
    1b14:	31 f7       	brne	.-52     	; 0x1ae2 <fft_input+0x1a>

	popw	YH,YL
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
	popw	AH,AL
    1b1a:	0f 91       	pop	r16
    1b1c:	1f 91       	pop	r17
	popw	T2H,T2L
    1b1e:	2f 90       	pop	r2
    1b20:	3f 90       	pop	r3
	clr	r1
    1b22:	11 24       	eor	r1, r1
	ret
    1b24:	08 95       	ret

00001b26 <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
    1b26:	3f 92       	push	r3
    1b28:	2f 92       	push	r2
	pushw	T4H,T4L
    1b2a:	5f 92       	push	r5
    1b2c:	4f 92       	push	r4
	pushw	T6H,T6L
    1b2e:	7f 92       	push	r7
    1b30:	6f 92       	push	r6
	pushw	T8H,T8L
    1b32:	9f 92       	push	r9
    1b34:	8f 92       	push	r8
	pushw	T10H,T10L
    1b36:	bf 92       	push	r11
    1b38:	af 92       	push	r10
	pushw	T12H,T12L
    1b3a:	df 92       	push	r13
    1b3c:	cf 92       	push	r12
	pushw	T14H,T14L
    1b3e:	ff 92       	push	r15
    1b40:	ef 92       	push	r14
	pushw	AH,AL
    1b42:	1f 93       	push	r17
    1b44:	0f 93       	push	r16
	pushw	YH,YL
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
    1b4a:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
    1b50:	a0 e4       	ldi	r26, 0x40	; 64
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4				;T12 = E; (angular speed)
    1b54:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
    1b56:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
    1b58:	60 01       	movw	r12, r0
	mul	EH, AL				;
    1b5a:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
    1b5c:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
    1b5e:	7c 01       	movw	r14, r24
	pushw	EH,EL
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
    1b64:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
    1b66:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1b68:	c0 0d       	add	r28, r0
    1b6a:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
    1b6c:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
    1b6e:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
    1b70:	ff 93       	push	r31
    1b72:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
    1b74:	bb 24       	eor	r11, r11
    1b76:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
    1b78:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
    1b7a:	00 81       	ld	r16, Z
    1b7c:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
    1b7e:	15 95       	asr	r17
    1b80:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
    1b82:	68 81       	ld	r22, Y
    1b84:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
    1b86:	75 95       	asr	r23
    1b88:	67 95       	ror	r22
	movw	CL, AL				;
    1b8a:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
    1b8c:	06 1b       	sub	r16, r22
    1b8e:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
    1b90:	46 0f       	add	r20, r22
    1b92:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1b94:	41 93       	st	Z+, r20
    1b96:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
    1b98:	20 81       	ld	r18, Z
    1b9a:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
    1b9c:	35 95       	asr	r19
    1b9e:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
    1ba0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba2:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
    1ba4:	75 95       	asr	r23
    1ba6:	67 95       	ror	r22
	movw	CL, BL				;
    1ba8:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
    1baa:	26 1b       	sub	r18, r22
    1bac:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
    1bae:	46 0f       	add	r20, r22
    1bb0:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1bb2:	41 93       	st	Z+, r20
    1bb4:	51 93       	st	Z+, r21
	movw	T0L, ZL
    1bb6:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
    1bb8:	e8 e4       	ldi	r30, 0x48	; 72
    1bba:	f9 e1       	ldi	r31, 0x19	; 25
	addw	ZH,ZL, T10H,T10L		;
    1bbc:	ea 0d       	add	r30, r10
    1bbe:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
    1bc0:	45 91       	lpm	r20, Z+
    1bc2:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
    1bc4:	65 91       	lpm	r22, Z+
    1bc6:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
    1bc8:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
    1bca:	95 03       	fmuls	r17, r21
    1bcc:	20 01       	movw	r4, r0
    1bce:	0c 03       	fmul	r16, r20
    1bd0:	10 01       	movw	r2, r0
    1bd2:	49 1e       	adc	r4, r25
    1bd4:	9c 03       	fmulsu	r17, r20
    1bd6:	59 0a       	sbc	r5, r25
    1bd8:	30 0c       	add	r3, r0
    1bda:	41 1c       	adc	r4, r1
    1bdc:	59 1e       	adc	r5, r25
    1bde:	d8 03       	fmulsu	r21, r16
    1be0:	59 0a       	sbc	r5, r25
    1be2:	30 0c       	add	r3, r0
    1be4:	41 1c       	adc	r4, r1
    1be6:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
    1be8:	b7 03       	fmuls	r19, r23
    1bea:	40 01       	movw	r8, r0
    1bec:	2e 03       	fmul	r18, r22
    1bee:	30 01       	movw	r6, r0
    1bf0:	89 1e       	adc	r8, r25
    1bf2:	be 03       	fmulsu	r19, r22
    1bf4:	99 0a       	sbc	r9, r25
    1bf6:	70 0c       	add	r7, r0
    1bf8:	81 1c       	adc	r8, r1
    1bfa:	99 1e       	adc	r9, r25
    1bfc:	fa 03       	fmulsu	r23, r18
    1bfe:	99 0a       	sbc	r9, r25
    1c00:	70 0c       	add	r7, r0
    1c02:	81 1c       	adc	r8, r1
    1c04:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1c06:	26 0c       	add	r2, r6
    1c08:	37 1c       	adc	r3, r7
    1c0a:	48 1c       	adc	r4, r8
    1c0c:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
    1c0e:	49 92       	st	Y+, r4
    1c10:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
    1c12:	b5 03       	fmuls	r19, r21
    1c14:	20 01       	movw	r4, r0
    1c16:	2c 03       	fmul	r18, r20
    1c18:	10 01       	movw	r2, r0
    1c1a:	49 1e       	adc	r4, r25
    1c1c:	bc 03       	fmulsu	r19, r20
    1c1e:	59 0a       	sbc	r5, r25
    1c20:	30 0c       	add	r3, r0
    1c22:	41 1c       	adc	r4, r1
    1c24:	59 1e       	adc	r5, r25
    1c26:	da 03       	fmulsu	r21, r18
    1c28:	59 0a       	sbc	r5, r25
    1c2a:	30 0c       	add	r3, r0
    1c2c:	41 1c       	adc	r4, r1
    1c2e:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
    1c30:	97 03       	fmuls	r17, r23
    1c32:	40 01       	movw	r8, r0
    1c34:	0e 03       	fmul	r16, r22
    1c36:	30 01       	movw	r6, r0
    1c38:	89 1e       	adc	r8, r25
    1c3a:	9e 03       	fmulsu	r17, r22
    1c3c:	99 0a       	sbc	r9, r25
    1c3e:	70 0c       	add	r7, r0
    1c40:	81 1c       	adc	r8, r1
    1c42:	99 1e       	adc	r9, r25
    1c44:	f8 03       	fmulsu	r23, r16
    1c46:	99 0a       	sbc	r9, r25
    1c48:	70 0c       	add	r7, r0
    1c4a:	81 1c       	adc	r8, r1
    1c4c:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1c4e:	26 18       	sub	r2, r6
    1c50:	37 08       	sbc	r3, r7
    1c52:	48 08       	sbc	r4, r8
    1c54:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
    1c56:	49 92       	st	Y+, r4
    1c58:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
    1c5a:	ac 0c       	add	r10, r12
    1c5c:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
    1c5e:	b0 fe       	sbrs	r11, 0
#else
	sbrs	T10L, FFT_B + 1
#endif
	rjmp	3b				;/
    1c60:	8c cf       	rjmp	.-232    	; 0x1b7a <fft_execute+0x54>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
    1c62:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
    1c64:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1c66:	c0 0d       	add	r28, r0
    1c68:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
    1c6a:	e0 0d       	add	r30, r0
    1c6c:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
    1c6e:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
    1c70:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
    1c72:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
    1c74:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
    1c76:	e8 1a       	sub	r14, r24
    1c78:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <fft_execute+0x158>
    1c7c:	7b cf       	rjmp	.-266    	; 0x1b74 <fft_execute+0x4e>
	popw	ZH,ZL
    1c7e:	ef 91       	pop	r30
    1c80:	ff 91       	pop	r31
	popw	EH,EL
    1c82:	8f 91       	pop	r24
    1c84:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
    1c8a:	b6 95       	lsr	r27
    1c8c:	a7 95       	ror	r26
	adiw	XL, 0				;
    1c8e:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <fft_execute+0x16e>
    1c92:	60 cf       	rjmp	.-320    	; 0x1b54 <fft_execute+0x2e>

	popw	YH,YL
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
	popw	AH,AL
    1c98:	0f 91       	pop	r16
    1c9a:	1f 91       	pop	r17
	popw	T14H,T14L
    1c9c:	ef 90       	pop	r14
    1c9e:	ff 90       	pop	r15
	popw	T12H,T12L
    1ca0:	cf 90       	pop	r12
    1ca2:	df 90       	pop	r13
	popw	T10H,T10L
    1ca4:	af 90       	pop	r10
    1ca6:	bf 90       	pop	r11
	popw	T8H,T8L
    1ca8:	8f 90       	pop	r8
    1caa:	9f 90       	pop	r9
	popw	T6H,T6L
    1cac:	6f 90       	pop	r6
    1cae:	7f 90       	pop	r7
	popw	T4H,T4L
    1cb0:	4f 90       	pop	r4
    1cb2:	5f 90       	pop	r5
	popw	T2H,T2L
    1cb4:	2f 90       	pop	r2
    1cb6:	3f 90       	pop	r3
;	clr	r1
	ret
    1cb8:	08 95       	ret

00001cba <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
    1cba:	3f 92       	push	r3
    1cbc:	2f 92       	push	r2
	pushw	T4H,T4L
    1cbe:	5f 92       	push	r5
    1cc0:	4f 92       	push	r4
	pushw	T6H,T6L
    1cc2:	7f 92       	push	r7
    1cc4:	6f 92       	push	r6
	pushw	T8H,T8L
    1cc6:	9f 92       	push	r9
    1cc8:	8f 92       	push	r8
	pushw	T10H,T10L
    1cca:	bf 92       	push	r11
    1ccc:	af 92       	push	r10
	pushw	AH,AL
    1cce:	1f 93       	push	r17
    1cd0:	0f 93       	push	r16
	pushw	YH,YL
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
    1cd6:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
    1cd8:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
    1cda:	e8 e4       	ldi	r30, 0x48	; 72
    1cdc:	fa e1       	ldi	r31, 0x1A	; 26
	clr	EH				;Zero
    1cde:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (pluse/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (pluse only)
    1ce0:	00 e4       	ldi	r16, 0x40	; 64
    1ce2:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
    1ce4:	a5 91       	lpm	r26, Z+
    1ce6:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
    1ce8:	aa 0d       	add	r26, r10
    1cea:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
    1cec:	2d 91       	ld	r18, X+
    1cee:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
    1cf0:	4d 91       	ld	r20, X+
    1cf2:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
    1cf4:	b3 03       	fmuls	r19, r19
    1cf6:	20 01       	movw	r4, r0
    1cf8:	2a 03       	fmul	r18, r18
    1cfa:	10 01       	movw	r2, r0
    1cfc:	49 1e       	adc	r4, r25
    1cfe:	ba 03       	fmulsu	r19, r18
    1d00:	59 0a       	sbc	r5, r25
    1d02:	30 0c       	add	r3, r0
    1d04:	41 1c       	adc	r4, r1
    1d06:	59 1e       	adc	r5, r25
    1d08:	ba 03       	fmulsu	r19, r18
    1d0a:	59 0a       	sbc	r5, r25
    1d0c:	30 0c       	add	r3, r0
    1d0e:	41 1c       	adc	r4, r1
    1d10:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
    1d12:	d5 03       	fmuls	r21, r21
    1d14:	40 01       	movw	r8, r0
    1d16:	4c 03       	fmul	r20, r20
    1d18:	30 01       	movw	r6, r0
    1d1a:	89 1e       	adc	r8, r25
    1d1c:	dc 03       	fmulsu	r21, r20
    1d1e:	99 0a       	sbc	r9, r25
    1d20:	70 0c       	add	r7, r0
    1d22:	81 1c       	adc	r8, r1
    1d24:	99 1e       	adc	r9, r25
    1d26:	dc 03       	fmulsu	r21, r20
    1d28:	99 0a       	sbc	r9, r25
    1d2a:	70 0c       	add	r7, r0
    1d2c:	81 1c       	adc	r8, r1
    1d2e:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
    1d30:	26 0c       	add	r2, r6
    1d32:	37 1c       	adc	r3, r7
    1d34:	48 1c       	adc	r4, r8
    1d36:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
    1d38:	66 24       	eor	r6, r6
    1d3a:	77 24       	eor	r7, r7
    1d3c:	88 24       	eor	r8, r8
    1d3e:	99 24       	eor	r9, r9
    1d40:	21 e0       	ldi	r18, 0x01	; 1
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	44 27       	eor	r20, r20
    1d46:	55 27       	eor	r21, r21
    1d48:	70 e1       	ldi	r23, 0x10	; 16
    1d4a:	22 0c       	add	r2, r2
    1d4c:	33 1c       	adc	r3, r3
    1d4e:	44 1c       	adc	r4, r4
    1d50:	55 1c       	adc	r5, r5
    1d52:	66 1c       	adc	r6, r6
    1d54:	77 1c       	adc	r7, r7
    1d56:	88 1c       	adc	r8, r8
    1d58:	99 1c       	adc	r9, r9
    1d5a:	22 0c       	add	r2, r2
    1d5c:	33 1c       	adc	r3, r3
    1d5e:	44 1c       	adc	r4, r4
    1d60:	55 1c       	adc	r5, r5
    1d62:	66 1c       	adc	r6, r6
    1d64:	77 1c       	adc	r7, r7
    1d66:	88 1c       	adc	r8, r8
    1d68:	99 1c       	adc	r9, r9
    1d6a:	2a f4       	brpl	.+10     	; 0x1d76 <fft_output+0xbc>
    1d6c:	62 0e       	add	r6, r18
    1d6e:	73 1e       	adc	r7, r19
    1d70:	84 1e       	adc	r8, r20
    1d72:	95 1e       	adc	r9, r21
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <fft_output+0xc4>
    1d76:	62 1a       	sub	r6, r18
    1d78:	73 0a       	sbc	r7, r19
    1d7a:	84 0a       	sbc	r8, r20
    1d7c:	95 0a       	sbc	r9, r21
    1d7e:	22 0f       	add	r18, r18
    1d80:	33 1f       	adc	r19, r19
    1d82:	44 1f       	adc	r20, r20
    1d84:	28 7f       	andi	r18, 0xF8	; 248
    1d86:	25 60       	ori	r18, 0x05	; 5
    1d88:	97 fc       	sbrc	r9, 7
    1d8a:	22 50       	subi	r18, 0x02	; 2
    1d8c:	7a 95       	dec	r23
    1d8e:	e9 f6       	brne	.-70     	; 0x1d4a <fft_output+0x90>
    1d90:	46 95       	lsr	r20
    1d92:	37 95       	ror	r19
    1d94:	27 95       	ror	r18
    1d96:	46 95       	lsr	r20
    1d98:	37 95       	ror	r19
    1d9a:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
    1d9c:	29 93       	st	Y+, r18
    1d9e:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
    1da0:	01 50       	subi	r16, 0x01	; 1
    1da2:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <fft_output+0xee>
    1da6:	9e cf       	rjmp	.-196    	; 0x1ce4 <fft_output+0x2a>

	popw	YH,YL
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
	popw	AH,AL
    1dac:	0f 91       	pop	r16
    1dae:	1f 91       	pop	r17
	popw	T10H,T10L
    1db0:	af 90       	pop	r10
    1db2:	bf 90       	pop	r11
	popw	T8H,T8L
    1db4:	8f 90       	pop	r8
    1db6:	9f 90       	pop	r9
	popw	T6H,T6L
    1db8:	6f 90       	pop	r6
    1dba:	7f 90       	pop	r7
	popw	T4H,T4L
    1dbc:	4f 90       	pop	r4
    1dbe:	5f 90       	pop	r5
	popw	T2H,T2L
    1dc0:	2f 90       	pop	r2
    1dc2:	3f 90       	pop	r3
	clr	r1
    1dc4:	11 24       	eor	r1, r1
	ret
    1dc6:	08 95       	ret

00001dc8 <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
    1dc8:	ac 01       	movw	r20, r24
	clr	EH	;Zero
    1dca:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
    1dcc:	d7 03       	fmuls	r21, r23
    1dce:	f0 01       	movw	r30, r0
    1dd0:	4e 03       	fmul	r20, r22
    1dd2:	d0 01       	movw	r26, r0
    1dd4:	e9 1f       	adc	r30, r25
    1dd6:	de 03       	fmulsu	r21, r22
    1dd8:	f9 0b       	sbc	r31, r25
    1dda:	b0 0d       	add	r27, r0
    1ddc:	e1 1d       	adc	r30, r1
    1dde:	f9 1f       	adc	r31, r25
    1de0:	fc 03       	fmulsu	r23, r20
    1de2:	f9 0b       	sbc	r31, r25
    1de4:	b0 0d       	add	r27, r0
    1de6:	e1 1d       	adc	r30, r1
    1de8:	f9 1f       	adc	r31, r25
	movw	EL, ZL
    1dea:	cf 01       	movw	r24, r30
	clr	r1
    1dec:	11 24       	eor	r1, r1
	ret
    1dee:	08 95       	ret

00001df0 <__divmodhi4>:
    1df0:	97 fb       	bst	r25, 7
    1df2:	09 2e       	mov	r0, r25
    1df4:	07 26       	eor	r0, r23
    1df6:	0a d0       	rcall	.+20     	; 0x1e0c <__divmodhi4_neg1>
    1df8:	77 fd       	sbrc	r23, 7
    1dfa:	04 d0       	rcall	.+8      	; 0x1e04 <__divmodhi4_neg2>
    1dfc:	80 d0       	rcall	.+256    	; 0x1efe <__udivmodhi4>
    1dfe:	06 d0       	rcall	.+12     	; 0x1e0c <__divmodhi4_neg1>
    1e00:	00 20       	and	r0, r0
    1e02:	1a f4       	brpl	.+6      	; 0x1e0a <__divmodhi4_exit>

00001e04 <__divmodhi4_neg2>:
    1e04:	70 95       	com	r23
    1e06:	61 95       	neg	r22
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255

00001e0a <__divmodhi4_exit>:
    1e0a:	08 95       	ret

00001e0c <__divmodhi4_neg1>:
    1e0c:	f6 f7       	brtc	.-4      	; 0x1e0a <__divmodhi4_exit>
    1e0e:	90 95       	com	r25
    1e10:	81 95       	neg	r24
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	08 95       	ret

00001e16 <__udivmodsi4>:
    1e16:	a1 e2       	ldi	r26, 0x21	; 33
    1e18:	1a 2e       	mov	r1, r26
    1e1a:	aa 1b       	sub	r26, r26
    1e1c:	bb 1b       	sub	r27, r27
    1e1e:	fd 01       	movw	r30, r26
    1e20:	0d c0       	rjmp	.+26     	; 0x1e3c <__udivmodsi4_ep>

00001e22 <__udivmodsi4_loop>:
    1e22:	aa 1f       	adc	r26, r26
    1e24:	bb 1f       	adc	r27, r27
    1e26:	ee 1f       	adc	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	a2 17       	cp	r26, r18
    1e2c:	b3 07       	cpc	r27, r19
    1e2e:	e4 07       	cpc	r30, r20
    1e30:	f5 07       	cpc	r31, r21
    1e32:	20 f0       	brcs	.+8      	; 0x1e3c <__udivmodsi4_ep>
    1e34:	a2 1b       	sub	r26, r18
    1e36:	b3 0b       	sbc	r27, r19
    1e38:	e4 0b       	sbc	r30, r20
    1e3a:	f5 0b       	sbc	r31, r21

00001e3c <__udivmodsi4_ep>:
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	1a 94       	dec	r1
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <__udivmodsi4_loop>
    1e48:	60 95       	com	r22
    1e4a:	70 95       	com	r23
    1e4c:	80 95       	com	r24
    1e4e:	90 95       	com	r25
    1e50:	9b 01       	movw	r18, r22
    1e52:	ac 01       	movw	r20, r24
    1e54:	bd 01       	movw	r22, r26
    1e56:	cf 01       	movw	r24, r30
    1e58:	08 95       	ret

00001e5a <__divmodsi4>:
    1e5a:	97 fb       	bst	r25, 7
    1e5c:	09 2e       	mov	r0, r25
    1e5e:	05 26       	eor	r0, r21
    1e60:	0e d0       	rcall	.+28     	; 0x1e7e <__divmodsi4_neg1>
    1e62:	57 fd       	sbrc	r21, 7
    1e64:	04 d0       	rcall	.+8      	; 0x1e6e <__divmodsi4_neg2>
    1e66:	d7 df       	rcall	.-82     	; 0x1e16 <__udivmodsi4>
    1e68:	0a d0       	rcall	.+20     	; 0x1e7e <__divmodsi4_neg1>
    1e6a:	00 1c       	adc	r0, r0
    1e6c:	38 f4       	brcc	.+14     	; 0x1e7c <__divmodsi4_exit>

00001e6e <__divmodsi4_neg2>:
    1e6e:	50 95       	com	r21
    1e70:	40 95       	com	r20
    1e72:	30 95       	com	r19
    1e74:	21 95       	neg	r18
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	4f 4f       	sbci	r20, 0xFF	; 255
    1e7a:	5f 4f       	sbci	r21, 0xFF	; 255

00001e7c <__divmodsi4_exit>:
    1e7c:	08 95       	ret

00001e7e <__divmodsi4_neg1>:
    1e7e:	f6 f7       	brtc	.-4      	; 0x1e7c <__divmodsi4_exit>
    1e80:	90 95       	com	r25
    1e82:	80 95       	com	r24
    1e84:	70 95       	com	r23
    1e86:	61 95       	neg	r22
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8e:	08 95       	ret

00001e90 <__prologue_saves__>:
    1e90:	2f 92       	push	r2
    1e92:	3f 92       	push	r3
    1e94:	4f 92       	push	r4
    1e96:	5f 92       	push	r5
    1e98:	6f 92       	push	r6
    1e9a:	7f 92       	push	r7
    1e9c:	8f 92       	push	r8
    1e9e:	9f 92       	push	r9
    1ea0:	af 92       	push	r10
    1ea2:	bf 92       	push	r11
    1ea4:	cf 92       	push	r12
    1ea6:	df 92       	push	r13
    1ea8:	ef 92       	push	r14
    1eaa:	ff 92       	push	r15
    1eac:	0f 93       	push	r16
    1eae:	1f 93       	push	r17
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	ca 1b       	sub	r28, r26
    1eba:	db 0b       	sbc	r29, r27
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	09 94       	ijmp

00001ec8 <__epilogue_restores__>:
    1ec8:	2a 88       	ldd	r2, Y+18	; 0x12
    1eca:	39 88       	ldd	r3, Y+17	; 0x11
    1ecc:	48 88       	ldd	r4, Y+16	; 0x10
    1ece:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eda:	b9 84       	ldd	r11, Y+9	; 0x09
    1edc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ede:	df 80       	ldd	r13, Y+7	; 0x07
    1ee0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eea:	b9 81       	ldd	r27, Y+1	; 0x01
    1eec:	ce 0f       	add	r28, r30
    1eee:	d1 1d       	adc	r29, r1
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	ed 01       	movw	r28, r26
    1efc:	08 95       	ret

00001efe <__udivmodhi4>:
    1efe:	aa 1b       	sub	r26, r26
    1f00:	bb 1b       	sub	r27, r27
    1f02:	51 e1       	ldi	r21, 0x11	; 17
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <__udivmodhi4_ep>

00001f06 <__udivmodhi4_loop>:
    1f06:	aa 1f       	adc	r26, r26
    1f08:	bb 1f       	adc	r27, r27
    1f0a:	a6 17       	cp	r26, r22
    1f0c:	b7 07       	cpc	r27, r23
    1f0e:	10 f0       	brcs	.+4      	; 0x1f14 <__udivmodhi4_ep>
    1f10:	a6 1b       	sub	r26, r22
    1f12:	b7 0b       	sbc	r27, r23

00001f14 <__udivmodhi4_ep>:
    1f14:	88 1f       	adc	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	5a 95       	dec	r21
    1f1a:	a9 f7       	brne	.-22     	; 0x1f06 <__udivmodhi4_loop>
    1f1c:	80 95       	com	r24
    1f1e:	90 95       	com	r25
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	08 95       	ret

00001f26 <__eerd_byte_m644>:
    1f26:	f9 99       	sbic	0x1f, 1	; 31
    1f28:	fe cf       	rjmp	.-4      	; 0x1f26 <__eerd_byte_m644>
    1f2a:	92 bd       	out	0x22, r25	; 34
    1f2c:	81 bd       	out	0x21, r24	; 33
    1f2e:	f8 9a       	sbi	0x1f, 0	; 31
    1f30:	99 27       	eor	r25, r25
    1f32:	80 b5       	in	r24, 0x20	; 32
    1f34:	08 95       	ret

00001f36 <_exit>:
    1f36:	f8 94       	cli

00001f38 <__stop_program>:
    1f38:	ff cf       	rjmp	.-2      	; 0x1f38 <__stop_program>
