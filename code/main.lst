
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00002004  00002098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002004  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a8  008001cc  008001cc  00002164  2**0
                  ALLOC
  3 .stab         00003558  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a4  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_13>
      38:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_14>
      3c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_15>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_18>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_24>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e0       	ldi	r30, 0x04	; 4
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	ac 3c       	cpi	r26, 0xCC	; 204
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	15 e0       	ldi	r17, 0x05	; 5
      94:	ac ec       	ldi	r26, 0xCC	; 204
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a4 37       	cpi	r26, 0x74	; 116
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 36 04 	call	0x86c	; 0x86c <main>
      a6:	0c 94 00 10 	jmp	0x2000	; 0x2000 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <uart_init>:
#define BAUD 9600UL
#define UBRRVAL (F_CPU/(BAUD*16)-1)
#define U_M	1000
uint16_t u_c;
void uart_init() {
    UBRRH = UBRRVAL >> 8;
      ae:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
      b2:	8d e4       	ldi	r24, 0x4D	; 77
      b4:	80 93 c4 00 	sts	0x00C4, r24
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
      b8:	86 e0       	ldi	r24, 0x06	; 6
      ba:	80 93 c2 00 	sts	0x00C2, r24
    UCSRB = (1 << RXEN) | (1 << TXEN);
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	80 93 c1 00 	sts	0x00C1, r24
}
      c4:	08 95       	ret

000000c6 <uart_putc>:

void uart_putc(uint8_t c) {
      c6:	98 2f       	mov	r25, r24
	u_c=0;
      c8:	10 92 70 05 	sts	0x0570, r1
      cc:	10 92 6f 05 	sts	0x056F, r1
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <uart_putc+0x14>
    while(!(UCSRA&(1<<UDRE))&&(u_c<U_M)) {
      d6:	2f 5f       	subi	r18, 0xFF	; 255
      d8:	3f 4f       	sbci	r19, 0xFF	; 255
      da:	80 91 c0 00 	lds	r24, 0x00C0
      de:	85 fd       	sbrc	r24, 5
      e0:	04 c0       	rjmp	.+8      	; 0xea <uart_putc+0x24>
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	28 3e       	cpi	r18, 0xE8	; 232
      e6:	38 07       	cpc	r19, r24
      e8:	b0 f3       	brcs	.-20     	; 0xd6 <uart_putc+0x10>
      ea:	30 93 70 05 	sts	0x0570, r19
      ee:	20 93 6f 05 	sts	0x056F, r18
		u_c++;
	}
    UDR = c;
      f2:	90 93 c6 00 	sts	0x00C6, r25
}
      f6:	08 95       	ret

000000f8 <uart_getc>:

uint8_t uart_getc() {
	u_c=0;
      f8:	10 92 70 05 	sts	0x0570, r1
      fc:	10 92 6f 05 	sts	0x056F, r1
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <uart_getc+0x12>
	static uint8_t c;
    while(!(UCSRA & (1 << RXC))&&(u_c<U_M)) {
     106:	2f 5f       	subi	r18, 0xFF	; 255
     108:	3f 4f       	sbci	r19, 0xFF	; 255
     10a:	80 91 c0 00 	lds	r24, 0x00C0
     10e:	87 fd       	sbrc	r24, 7
     110:	04 c0       	rjmp	.+8      	; 0x11a <uart_getc+0x22>
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	28 3e       	cpi	r18, 0xE8	; 232
     116:	38 07       	cpc	r19, r24
     118:	b0 f3       	brcs	.-20     	; 0x106 <uart_getc+0xe>
     11a:	30 93 70 05 	sts	0x0570, r19
     11e:	20 93 6f 05 	sts	0x056F, r18
		u_c++;
	}
	c=UDR;
     122:	80 91 c6 00 	lds	r24, 0x00C6
     126:	80 93 e6 01 	sts	0x01E6, r24
    return c;
}
     12a:	08 95       	ret

0000012c <uart_flush>:

void uart_flush( void ) {
     12c:	90 91 e5 01 	lds	r25, 0x01E5
     130:	02 c0       	rjmp	.+4      	; 0x136 <uart_flush+0xa>
  static unsigned char dummy;
  while ( UCSRA & (1<<RXC) ) dummy = UDR;
     132:	90 91 c6 00 	lds	r25, 0x00C6
     136:	80 91 c0 00 	lds	r24, 0x00C0
     13a:	87 fd       	sbrc	r24, 7
     13c:	fa cf       	rjmp	.-12     	; 0x132 <uart_flush+0x6>
     13e:	90 93 e5 01 	sts	0x01E5, r25
}
     142:	08 95       	ret

00000144 <uart_communicate>:

void uart_communicate(unsigned char w_byte) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
    static uint8_t c;
    c=uart_getc();
     148:	0e 94 7c 00 	call	0xf8	; 0xf8 <uart_getc>
     14c:	80 93 e4 01 	sts	0x01E4, r24
    if(c=='g') uart_putc(w_byte);
     150:	87 36       	cpi	r24, 0x67	; 103
     152:	19 f4       	brne	.+6      	; 0x15a <uart_communicate+0x16>
     154:	81 2f       	mov	r24, r17
     156:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_putc>
     15a:	90 91 e5 01 	lds	r25, 0x01E5
     15e:	02 c0       	rjmp	.+4      	; 0x164 <uart_communicate+0x20>
    return c;
}

void uart_flush( void ) {
  static unsigned char dummy;
  while ( UCSRA & (1<<RXC) ) dummy = UDR;
     160:	90 91 c6 00 	lds	r25, 0x00C6
     164:	80 91 c0 00 	lds	r24, 0x00C0
     168:	87 fd       	sbrc	r24, 7
     16a:	fa cf       	rjmp	.-12     	; 0x160 <uart_communicate+0x1c>
     16c:	90 93 e5 01 	sts	0x01E5, r25
void uart_communicate(unsigned char w_byte) {
    static uint8_t c;
    c=uart_getc();
    if(c=='g') uart_putc(w_byte);
    uart_flush();
}
     170:	1f 91       	pop	r17
     172:	08 95       	ret

00000174 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     174:	28 eb       	ldi	r18, 0xB8	; 184
     176:	3b e0       	ldi	r19, 0x0B	; 11
     178:	04 c0       	rjmp	.+8      	; 0x182 <delay_ms+0xe>
     17a:	f9 01       	movw	r30, r18
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <delay_ms+0x8>
     180:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	d1 f7       	brne	.-12     	; 0x17a <delay_ms+0x6>
		_delay_ms(1);
}
     186:	08 95       	ret

00000188 <delay_us>:

void delay_us(unsigned long long  int delay) {
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	16 2f       	mov	r17, r22
     194:	f7 2e       	mov	r15, r23
     196:	79 2f       	mov	r23, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     198:	94 e0       	ldi	r25, 0x04	; 4
     19a:	d9 2e       	mov	r13, r25
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <delay_us+0x1c>
     19e:	ed 2d       	mov	r30, r13
     1a0:	ea 95       	dec	r30
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <delay_us+0x18>
	while(delay--)
     1a4:	e2 2e       	mov	r14, r18
     1a6:	ea 94       	dec	r14
     1a8:	f1 e0       	ldi	r31, 0x01	; 1
     1aa:	e2 16       	cp	r14, r18
     1ac:	08 f0       	brcs	.+2      	; 0x1b0 <delay_us+0x28>
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	23 2f       	mov	r18, r19
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	e1 e0       	ldi	r30, 0x01	; 1
     1b6:	23 17       	cp	r18, r19
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <delay_us+0x34>
     1ba:	e0 e0       	ldi	r30, 0x00	; 0
     1bc:	0f 2f       	mov	r16, r31
     1be:	02 0f       	add	r16, r18
     1c0:	31 e0       	ldi	r19, 0x01	; 1
     1c2:	02 17       	cp	r16, r18
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <delay_us+0x40>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	e3 2b       	or	r30, r19
     1ca:	24 2f       	mov	r18, r20
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	24 17       	cp	r18, r20
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <delay_us+0x4e>
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	6e 2f       	mov	r22, r30
     1d8:	62 0f       	add	r22, r18
     1da:	31 e0       	ldi	r19, 0x01	; 1
     1dc:	62 17       	cp	r22, r18
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <delay_us+0x5a>
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f3 2b       	or	r31, r19
     1e4:	25 2f       	mov	r18, r21
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	41 e0       	ldi	r20, 0x01	; 1
     1ea:	25 17       	cp	r18, r21
     1ec:	08 f0       	brcs	.+2      	; 0x1f0 <delay_us+0x68>
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	9f 2f       	mov	r25, r31
     1f2:	92 0f       	add	r25, r18
     1f4:	31 e0       	ldi	r19, 0x01	; 1
     1f6:	92 17       	cp	r25, r18
     1f8:	08 f0       	brcs	.+2      	; 0x1fc <delay_us+0x74>
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	43 2b       	or	r20, r19
     1fe:	21 2f       	mov	r18, r17
     200:	21 50       	subi	r18, 0x01	; 1
     202:	51 e0       	ldi	r21, 0x01	; 1
     204:	21 17       	cp	r18, r17
     206:	08 f0       	brcs	.+2      	; 0x20a <delay_us+0x82>
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	b4 2f       	mov	r27, r20
     20c:	b2 0f       	add	r27, r18
     20e:	31 e0       	ldi	r19, 0x01	; 1
     210:	b2 17       	cp	r27, r18
     212:	08 f0       	brcs	.+2      	; 0x216 <delay_us+0x8e>
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	53 2b       	or	r21, r19
     218:	2f 2d       	mov	r18, r15
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	2f 15       	cp	r18, r15
     220:	08 f0       	brcs	.+2      	; 0x224 <delay_us+0x9c>
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	a5 2f       	mov	r26, r21
     226:	a2 0f       	add	r26, r18
     228:	31 e0       	ldi	r19, 0x01	; 1
     22a:	a2 17       	cp	r26, r18
     22c:	08 f0       	brcs	.+2      	; 0x230 <delay_us+0xa8>
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	43 2b       	or	r20, r19
     232:	28 2f       	mov	r18, r24
     234:	21 50       	subi	r18, 0x01	; 1
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	28 17       	cp	r18, r24
     23a:	08 f0       	brcs	.+2      	; 0x23e <delay_us+0xb6>
     23c:	e0 e0       	ldi	r30, 0x00	; 0
     23e:	f4 2f       	mov	r31, r20
     240:	f2 0f       	add	r31, r18
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	f2 17       	cp	r31, r18
     246:	08 f0       	brcs	.+2      	; 0x24a <delay_us+0xc2>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	e8 2b       	or	r30, r24
     24c:	71 50       	subi	r23, 0x01	; 1
     24e:	2e 2d       	mov	r18, r14
     250:	30 2f       	mov	r19, r16
     252:	46 2f       	mov	r20, r22
     254:	59 2f       	mov	r21, r25
     256:	1b 2f       	mov	r17, r27
     258:	fa 2e       	mov	r15, r26
     25a:	8f 2f       	mov	r24, r31
     25c:	7e 0f       	add	r23, r30
     25e:	2f 3f       	cpi	r18, 0xFF	; 255
     260:	09 f0       	breq	.+2      	; 0x264 <delay_us+0xdc>
     262:	9d cf       	rjmp	.-198    	; 0x19e <delay_us+0x16>
     264:	0f 3f       	cpi	r16, 0xFF	; 255
     266:	09 f0       	breq	.+2      	; 0x26a <delay_us+0xe2>
     268:	9a cf       	rjmp	.-204    	; 0x19e <delay_us+0x16>
     26a:	6f 3f       	cpi	r22, 0xFF	; 255
     26c:	09 f0       	breq	.+2      	; 0x270 <delay_us+0xe8>
     26e:	97 cf       	rjmp	.-210    	; 0x19e <delay_us+0x16>
     270:	9f 3f       	cpi	r25, 0xFF	; 255
     272:	09 f0       	breq	.+2      	; 0x276 <delay_us+0xee>
     274:	94 cf       	rjmp	.-216    	; 0x19e <delay_us+0x16>
     276:	bf 3f       	cpi	r27, 0xFF	; 255
     278:	09 f0       	breq	.+2      	; 0x27c <delay_us+0xf4>
     27a:	91 cf       	rjmp	.-222    	; 0x19e <delay_us+0x16>
     27c:	af 3f       	cpi	r26, 0xFF	; 255
     27e:	09 f0       	breq	.+2      	; 0x282 <delay_us+0xfa>
     280:	8e cf       	rjmp	.-228    	; 0x19e <delay_us+0x16>
     282:	ff 3f       	cpi	r31, 0xFF	; 255
     284:	09 f0       	breq	.+2      	; 0x288 <delay_us+0x100>
     286:	8b cf       	rjmp	.-234    	; 0x19e <delay_us+0x16>
     288:	7f 3f       	cpi	r23, 0xFF	; 255
     28a:	09 f0       	breq	.+2      	; 0x28e <delay_us+0x106>
     28c:	88 cf       	rjmp	.-240    	; 0x19e <delay_us+0x16>
		_delay_us(1);
}
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	08 95       	ret

0000029a <lcd_databits>:

#define SEND_CMD 1
#define SEND_DATA 2

void lcd_databits(uint8_t cmd,uint8_t src) {
  DATAPORT=src;
     29a:	68 b9       	out	0x08, r22	; 8
  if(cmd==SEND_DATA) CMDPORT|=DI;
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	11 f4       	brne	.+4      	; 0x2a4 <lcd_databits+0xa>
     2a0:	5d 9a       	sbi	0x0b, 5	; 11
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <lcd_databits+0xc>
  else CMDPORT&=~DI;
     2a4:	5d 98       	cbi	0x0b, 5	; 11
  CMDPORT|=EN;
     2a6:	5e 9a       	sbi	0x0b, 6	; 11
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	34 e0       	ldi	r19, 0x04	; 4
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <lcd_databits+0x1c>
     2b0:	23 2f       	mov	r18, r19
     2b2:	2a 95       	dec	r18
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_databits+0x18>
     2b6:	01 96       	adiw	r24, 0x01	; 1
	while(delay--)
		_delay_ms(1);
}

void delay_us(unsigned long long  int delay) {
	while(delay--)
     2b8:	87 30       	cpi	r24, 0x07	; 7
     2ba:	91 05       	cpc	r25, r1
     2bc:	c9 f7       	brne	.-14     	; 0x2b0 <lcd_databits+0x16>
  DATAPORT=src;
  if(cmd==SEND_DATA) CMDPORT|=DI;
  else CMDPORT&=~DI;
  CMDPORT|=EN;
  delay_us(6);
  CMDPORT&=~EN;
     2be:	5e 98       	cbi	0x0b, 6	; 11
  CMDPORT&=~DI;
     2c0:	5d 98       	cbi	0x0b, 5	; 11
  DATAPORT=0;
     2c2:	18 b8       	out	0x08, r1	; 8
}
     2c4:	08 95       	ret

000002c6 <lcd_goto_xblock>:

void lcd_goto_xblock(uint8_t s) { //s={0,1...127}
     2c6:	68 2f       	mov	r22, r24
  if(s>=64) {
     2c8:	80 34       	cpi	r24, 0x40	; 64
     2ca:	20 f0       	brcs	.+8      	; 0x2d4 <lcd_goto_xblock+0xe>
    CMDPORT|=CSEL2;
     2cc:	5b 9a       	sbi	0x0b, 3	; 11
    CMDPORT&=~CSEL1;
     2ce:	5a 98       	cbi	0x0b, 2	; 11
    lcd_databits(SEND_CMD,(1<<6)|(s-64));
     2d0:	60 54       	subi	r22, 0x40	; 64
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_goto_xblock+0x12>
  }
  else {
    CMDPORT|=CSEL1;
     2d4:	5a 9a       	sbi	0x0b, 2	; 11
    CMDPORT&=~CSEL2;
     2d6:	5b 98       	cbi	0x0b, 3	; 11
    lcd_databits(SEND_CMD,(1<<6)|s);
     2d8:	60 64       	ori	r22, 0x40	; 64
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     2e0:	08 95       	ret

000002e2 <lcd_goto_yblock>:
  }
}

void lcd_goto_yblock(uint8_t s) { //s={0,1...7}
  lcd_databits(SEND_CMD,0xb8|s);
     2e2:	68 2f       	mov	r22, r24
     2e4:	68 6b       	ori	r22, 0xB8	; 184
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     2ec:	08 95       	ret

000002ee <lcd_goto>:
void lcd_goto(uint8_t x,uint8_t y) {
     2ee:	1f 93       	push	r17
     2f0:	16 2f       	mov	r17, r22
	lcd_goto_xblock(x);
     2f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
	lcd_goto_yblock(y);
     2f6:	81 2f       	mov	r24, r17
     2f8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
}
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <lcd_block>:
void lcd_block(uint8_t x,uint8_t y,uint8_t block) {
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	16 2f       	mov	r17, r22
     306:	04 2f       	mov	r16, r20
  lcd_goto_xblock(x);
     308:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
  lcd_goto_yblock(y);
     30c:	81 2f       	mov	r24, r17
     30e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
  lcd_databits(SEND_DATA,block);
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	60 2f       	mov	r22, r16
     316:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret

00000320 <lcd_all>:

void lcd_all(uint8_t w) {
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	f8 2e       	mov	r15, r24
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
     32c:	8b b1       	in	r24, 0x0b	; 11
     32e:	8c 60       	ori	r24, 0x0C	; 12
     330:	8b b9       	out	0x0b, r24	; 11
     332:	80 91 e0 01 	lds	r24, 0x01E0
     336:	90 91 e1 01 	lds	r25, 0x01E1
     33a:	00 e0       	ldi	r16, 0x00	; 0
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	12 c0       	rjmp	.+36     	; 0x364 <lcd_all+0x44>
  for(i=0;i<8;i++) {
   lcd_goto_yblock(i);
     340:	80 2f       	mov	r24, r16
     342:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
     346:	c0 e0       	ldi	r28, 0x00	; 0
     348:	d0 e0       	ldi	r29, 0x00	; 0
     34a:	04 c0       	rjmp	.+8      	; 0x354 <lcd_all+0x34>
   for(si=0;si<64;si++)
     lcd_databits(SEND_DATA,w);
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	6f 2d       	mov	r22, r15
     350:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     354:	21 96       	adiw	r28, 0x01	; 1
void lcd_all(uint8_t w) {
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
  for(i=0;i<8;i++) {
   lcd_goto_yblock(i);
   for(si=0;si<64;si++)
     356:	c1 34       	cpi	r28, 0x41	; 65
     358:	d1 05       	cpc	r29, r1
     35a:	c1 f7       	brne	.-16     	; 0x34c <lcd_all+0x2c>
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	80 e4       	ldi	r24, 0x40	; 64
     362:	90 e0       	ldi	r25, 0x00	; 0
}

void lcd_all(uint8_t w) {
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
  for(i=0;i<8;i++) {
     364:	08 30       	cpi	r16, 0x08	; 8
     366:	11 05       	cpc	r17, r1
     368:	58 f3       	brcs	.-42     	; 0x340 <lcd_all+0x20>
     36a:	90 93 e1 01 	sts	0x01E1, r25
     36e:	80 93 e0 01 	sts	0x01E0, r24
     372:	10 93 e3 01 	sts	0x01E3, r17
     376:	00 93 e2 01 	sts	0x01E2, r16
   lcd_goto_yblock(i);
   for(si=0;si<64;si++)
     lcd_databits(SEND_DATA,w);
  }
}
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e5 e0       	ldi	r30, 0x05	; 5
     380:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__+0x1a>

00000384 <lcd_init>:

void lcd_init() {
  CMDDDR=CSEL1|CSEL2|RW|RS|EN|DI;
     384:	8c ef       	ldi	r24, 0xFC	; 252
     386:	8a b9       	out	0x0a, r24	; 10
  CMDPORT=0x00;
     388:	1b b8       	out	0x0b, r1	; 11
  DATADDR=0xff;
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	87 b9       	out	0x07, r24	; 7
  DATAPORT=0x00;
     38e:	18 b8       	out	0x08, r1	; 8
     390:	28 ee       	ldi	r18, 0xE8	; 232
     392:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     394:	48 eb       	ldi	r20, 0xB8	; 184
     396:	5b e0       	ldi	r21, 0x0B	; 11
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_init+0x1c>
     39a:	ca 01       	movw	r24, r20
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x18>
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	30 40       	sbci	r19, 0x00	; 0
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	2f 3f       	cpi	r18, 0xFF	; 255
     3a8:	38 07       	cpc	r19, r24
     3aa:	b9 f7       	brne	.-18     	; 0x39a <lcd_init+0x16>
  CMDDDR=CSEL1|CSEL2|RW|RS|EN|DI;
  CMDPORT=0x00;
  DATADDR=0xff;
  DATAPORT=0x00;
  delay_ms(1000);
  CMDPORT=RS|CSEL1|CSEL2;
     3ac:	8c e8       	ldi	r24, 0x8C	; 140
     3ae:	8b b9       	out	0x0b, r24	; 11
  lcd_databits(SEND_CMD,0x3f);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	6f e3       	ldi	r22, 0x3F	; 63
     3b4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xc0);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	60 ec       	ldi	r22, 0xC0	; 192
     3bc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0x40);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	60 e4       	ldi	r22, 0x40	; 64
     3c4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xb8);
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	68 eb       	ldi	r22, 0xB8	; 184
     3cc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_all(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 90 01 	call	0x320	; 0x320 <lcd_all>
}
     3d6:	08 95       	ret

000003d8 <lcd_read>:
		x+=6;
	}
}

uint8_t lcd_read(uint8_t x,uint8_t y) {
	lcd_goto(x,y);
     3d8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
	CMDPORT|=DI|RW;
     3dc:	8b b1       	in	r24, 0x0b	; 11
     3de:	80 63       	ori	r24, 0x30	; 48
     3e0:	8b b9       	out	0x0b, r24	; 11
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3e6:	34 e0       	ldi	r19, 0x04	; 4
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <lcd_read+0x18>
     3ea:	23 2f       	mov	r18, r19
     3ec:	2a 95       	dec	r18
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_read+0x14>
     3f0:	01 96       	adiw	r24, 0x01	; 1
	while(delay--)
		_delay_ms(1);
}

void delay_us(unsigned long long  int delay) {
	while(delay--)
     3f2:	87 30       	cpi	r24, 0x07	; 7
     3f4:	91 05       	cpc	r25, r1
     3f6:	c9 f7       	brne	.-14     	; 0x3ea <lcd_read+0x12>

uint8_t lcd_read(uint8_t x,uint8_t y) {
	lcd_goto(x,y);
	CMDPORT|=DI|RW;
	delay_us(6);
	CMDPORT&=~(DI|RW);
     3f8:	8b b1       	in	r24, 0x0b	; 11
     3fa:	8f 7c       	andi	r24, 0xCF	; 207
     3fc:	8b b9       	out	0x0b, r24	; 11
	return(DATAPORT);
     3fe:	88 b1       	in	r24, 0x08	; 8
	
}
     400:	08 95       	ret

00000402 <lcd_pixel>:

inline void lcd_pixel(uint8_t x,uint8_t y) {
     402:	e8 2f       	mov	r30, r24
    lcd_block(x,(y-y%8)/8,1<<(y%8));
     404:	26 2f       	mov	r18, r22
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	c9 01       	movw	r24, r18
     40a:	88 7f       	andi	r24, 0xF8	; 248
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divmodhi4>
     414:	27 70       	andi	r18, 0x07	; 7
     416:	30 70       	andi	r19, 0x00	; 0
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <lcd_pixel+0x20>
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	2a 95       	dec	r18
     424:	e2 f7       	brpl	.-8      	; 0x41e <lcd_pixel+0x1c>
     426:	8e 2f       	mov	r24, r30
     428:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
}
     42c:	08 95       	ret

0000042e <lcd_pixel_share>:

void lcd_pixel_share(uint8_t x,uint8_t y) {
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	e8 2e       	mov	r14, r24
	lcd_block(x,(y-y%8)/8,(1<<(y%8))|lcd_read(x,(y-y%8)/8));
     438:	06 2f       	mov	r16, r22
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	c8 01       	movw	r24, r16
     43e:	88 7f       	andi	r24, 0xF8	; 248
     440:	68 e0       	ldi	r22, 0x08	; 8
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divmodhi4>
     448:	f6 2e       	mov	r15, r22
     44a:	8e 2d       	mov	r24, r14
     44c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_read>
     450:	07 70       	andi	r16, 0x07	; 7
     452:	10 70       	andi	r17, 0x00	; 0
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <lcd_pixel_share+0x30>
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	0a 95       	dec	r16
     460:	e2 f7       	brpl	.-8      	; 0x45a <lcd_pixel_share+0x2c>
     462:	48 2f       	mov	r20, r24
     464:	42 2b       	or	r20, r18
     466:	8e 2d       	mov	r24, r14
     468:	6f 2d       	mov	r22, r15
     46a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
}
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	08 95       	ret

00000478 <lcd_line_from_bottom>:

void lcd_line_from_bottom(uint8_t x1,uint8_t y1) {
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e2 e4       	ldi	r30, 0x42	; 66
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x16>
     484:	d8 2e       	mov	r13, r24
	int y=0;
	uint8_t res=0;
	for(y=7;y>(7-((y1-y1%8)/8));y--) {
     486:	e6 2e       	mov	r14, r22
     488:	ff 24       	eor	r15, r15
     48a:	c7 01       	movw	r24, r14
     48c:	88 7f       	andi	r24, 0xF8	; 248
     48e:	68 e0       	ldi	r22, 0x08	; 8
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divmodhi4>
     496:	00 27       	eor	r16, r16
     498:	11 27       	eor	r17, r17
     49a:	06 1b       	sub	r16, r22
     49c:	17 0b       	sbc	r17, r23
     49e:	09 5f       	subi	r16, 0xF9	; 249
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	c7 e0       	ldi	r28, 0x07	; 7
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	0b c0       	rjmp	.+22     	; 0x4be <lcd_line_from_bottom+0x46>
		lcd_goto_xblock(x1);
     4a8:	8d 2d       	mov	r24, r13
     4aa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     4ae:	8c 2f       	mov	r24, r28
     4b0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_databits(SEND_DATA,0xff);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	6f ef       	ldi	r22, 0xFF	; 255
     4b8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}

void lcd_line_from_bottom(uint8_t x1,uint8_t y1) {
	int y=0;
	uint8_t res=0;
	for(y=7;y>(7-((y1-y1%8)/8));y--) {
     4bc:	21 97       	sbiw	r28, 0x01	; 1
     4be:	0c 17       	cp	r16, r28
     4c0:	1d 07       	cpc	r17, r29
     4c2:	94 f3       	brlt	.-28     	; 0x4a8 <lcd_line_from_bottom+0x30>
		lcd_goto_xblock(x1);
		lcd_goto_yblock(y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto_xblock(x1);
     4c4:	8d 2d       	mov	r24, r13
     4c6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
	lcd_goto_yblock(y);
     4ca:	8c 2f       	mov	r24, r28
     4cc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
     4d0:	27 e0       	ldi	r18, 0x07	; 7
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
	for(y=7;y>=(7-y1%8);y--) {
     4d6:	b7 01       	movw	r22, r14
     4d8:	60 95       	com	r22
     4da:	70 95       	com	r23
     4dc:	67 70       	andi	r22, 0x07	; 7
     4de:	70 70       	andi	r23, 0x00	; 0
		res|=1<<y;
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	0a c0       	rjmp	.+20     	; 0x4fa <lcd_line_from_bottom+0x82>
     4e6:	cf 01       	movw	r24, r30
     4e8:	02 2e       	mov	r0, r18
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <lcd_line_from_bottom+0x78>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <lcd_line_from_bottom+0x74>
     4f4:	48 2b       	or	r20, r24
		lcd_goto_yblock(y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto_xblock(x1);
	lcd_goto_yblock(y);
	for(y=7;y>=(7-y1%8);y--) {
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	30 40       	sbci	r19, 0x00	; 0
     4fa:	26 17       	cp	r18, r22
     4fc:	37 07       	cpc	r19, r23
     4fe:	9c f7       	brge	.-26     	; 0x4e6 <lcd_line_from_bottom+0x6e>
		res|=1<<y;
	}
	if(res) lcd_databits(SEND_DATA,res);
     500:	44 23       	and	r20, r20
     502:	21 f0       	breq	.+8      	; 0x50c <lcd_line_from_bottom+0x94>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	64 2f       	mov	r22, r20
     508:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	e7 e0       	ldi	r30, 0x07	; 7
     512:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x16>

00000516 <lcd_pixel_line_from_left>:

void lcd_pixel_line_from_left(uint8_t y, uint16_t v) {
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e1 e9       	ldi	r30, 0x91	; 145
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x16>
     522:	d8 2e       	mov	r13, r24
     524:	7b 01       	movw	r14, r22
	uint16_t s=(v-v%8)/8,x;
     526:	8b 01       	movw	r16, r22
     528:	23 e0       	ldi	r18, 0x03	; 3
     52a:	16 95       	lsr	r17
     52c:	07 95       	ror	r16
     52e:	2a 95       	dec	r18
     530:	e1 f7       	brne	.-8      	; 0x52a <lcd_pixel_line_from_left+0x14>
     532:	c0 e0       	ldi	r28, 0x00	; 0
     534:	d0 e0       	ldi	r29, 0x00	; 0
     536:	09 c0       	rjmp	.+18     	; 0x54a <lcd_pixel_line_from_left+0x34>
	uint8_t r;
	for(x=0;x<s;x++) {
		lcd_goto(x,y);
     538:	8c 2f       	mov	r24, r28
     53a:	6d 2d       	mov	r22, r13
     53c:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
		lcd_databits(SEND_DATA,0xff);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	6f ef       	ldi	r22, 0xFF	; 255
     544:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}

void lcd_pixel_line_from_left(uint8_t y, uint16_t v) {
	uint16_t s=(v-v%8)/8,x;
	uint8_t r;
	for(x=0;x<s;x++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c0 17       	cp	r28, r16
     54c:	d1 07       	cpc	r29, r17
     54e:	a0 f3       	brcs	.-24     	; 0x538 <lcd_pixel_line_from_left+0x22>
		lcd_goto(x,y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto(x,y);
     550:	80 2f       	mov	r24, r16
     552:	6d 2d       	mov	r22, r13
     554:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
	s=v%8;
     558:	b7 01       	movw	r22, r14
     55a:	67 70       	andi	r22, 0x07	; 7
     55c:	70 70       	andi	r23, 0x00	; 0
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e0       	ldi	r20, 0x00	; 0
	r=0;
	for(x=0;x<=s;x++) {
		r|=1<<(7-x);
     564:	a7 e0       	ldi	r26, 0x07	; 7
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	e1 e0       	ldi	r30, 0x01	; 1
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	cd 01       	movw	r24, r26
     56e:	82 1b       	sub	r24, r18
     570:	93 0b       	sbc	r25, r19
     572:	ef 01       	movw	r28, r30
     574:	02 c0       	rjmp	.+4      	; 0x57a <lcd_pixel_line_from_left+0x64>
     576:	cc 0f       	add	r28, r28
     578:	dd 1f       	adc	r29, r29
     57a:	8a 95       	dec	r24
     57c:	e2 f7       	brpl	.-8      	; 0x576 <lcd_pixel_line_from_left+0x60>
     57e:	4c 2b       	or	r20, r28
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto(x,y);
	s=v%8;
	r=0;
	for(x=0;x<=s;x++) {
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	62 17       	cp	r22, r18
     586:	73 07       	cpc	r23, r19
     588:	88 f7       	brcc	.-30     	; 0x56c <lcd_pixel_line_from_left+0x56>
		r|=1<<(7-x);
	}
	lcd_databits(SEND_DATA,r);
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	64 2f       	mov	r22, r20
     58e:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	e7 e0       	ldi	r30, 0x07	; 7
     598:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x16>

0000059c <lcd_yblockof>:
		x-=FONT_SIZE+1;
		n-=m;
		n/=10;
	}
}
inline uint8_t lcd_yblockof(uint8_t y) {
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	88 7f       	andi	r24, 0xF8	; 248
     5a0:	68 e0       	ldi	r22, 0x08	; 8
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divmodhi4>
     5a8:	86 2f       	mov	r24, r22
	return((y-y%8)/8);
}
     5aa:	08 95       	ret

000005ac <lcd_constx_line>:
void lcd_constx_line(uint8_t x,uint8_t ymin,uint8_t ymax) {
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	e8 2e       	mov	r14, r24
     5ba:	16 2f       	mov	r17, r22
     5bc:	f4 2e       	mov	r15, r20
     5be:	00 e0       	ldi	r16, 0x00	; 0
	static uint8_t buf;
	buf=0;
	while(ymin<=ymax) {
		buf|=1<<(ymin%8);
     5c0:	c1 e0       	ldi	r28, 0x01	; 1
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
     5c4:	1e c0       	rjmp	.+60     	; 0x602 <lcd_constx_line+0x56>
     5c6:	81 2f       	mov	r24, r17
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	87 70       	andi	r24, 0x07	; 7
     5cc:	90 70       	andi	r25, 0x00	; 0
     5ce:	9e 01       	movw	r18, r28
     5d0:	08 2e       	mov	r0, r24
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <lcd_constx_line+0x2c>
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <lcd_constx_line+0x28>
     5dc:	02 2b       	or	r16, r18
		if(((ymin%8)==7)||(ymin==ymax)) {
     5de:	07 97       	sbiw	r24, 0x07	; 7
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <lcd_constx_line+0x3a>
     5e2:	1f 15       	cp	r17, r15
     5e4:	69 f4       	brne	.+26     	; 0x600 <lcd_constx_line+0x54>
			lcd_goto_xblock(x);
     5e6:	8e 2d       	mov	r24, r14
     5e8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
			lcd_goto_yblock(lcd_yblockof(ymin));
     5ec:	81 2f       	mov	r24, r17
     5ee:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_yblockof>
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
			lcd_databits(SEND_DATA,buf);
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	60 2f       	mov	r22, r16
     5fa:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     5fe:	00 e0       	ldi	r16, 0x00	; 0
			buf=0;
		}
		ymin++;
     600:	1f 5f       	subi	r17, 0xFF	; 255
	return((y-y%8)/8);
}
void lcd_constx_line(uint8_t x,uint8_t ymin,uint8_t ymax) {
	static uint8_t buf;
	buf=0;
	while(ymin<=ymax) {
     602:	f1 16       	cp	r15, r17
     604:	00 f7       	brcc	.-64     	; 0x5c6 <lcd_constx_line+0x1a>
     606:	00 93 de 01 	sts	0x01DE, r16
			lcd_databits(SEND_DATA,buf);
			buf=0;
		}
		ymin++;
	}
}
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	e6 e0       	ldi	r30, 0x06	; 6
     610:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__epilogue_restores__+0x18>

00000614 <buttons_update>:
uint8_t m=1,s,u,u1,lcd_skip=1,lcd_skip_c=1;
uint16_t ymin,ymax,c,c1;
uint32_t wait=0,maxwait=0;

inline void buttons_update() {
	right_state1=right_state();
     614:	83 b1       	in	r24, 0x03	; 3
     616:	82 70       	andi	r24, 0x02	; 2
     618:	80 93 cf 01 	sts	0x01CF, r24
	left_state1=left_state();
     61c:	83 b1       	in	r24, 0x03	; 3
     61e:	84 70       	andi	r24, 0x04	; 4
     620:	80 93 ce 01 	sts	0x01CE, r24
	top_state1=top_state();
     624:	83 b1       	in	r24, 0x03	; 3
     626:	81 70       	andi	r24, 0x01	; 1
     628:	80 93 cd 01 	sts	0x01CD, r24
	up_state1=up_state();
     62c:	83 b1       	in	r24, 0x03	; 3
     62e:	80 71       	andi	r24, 0x10	; 16
     630:	80 93 d0 01 	sts	0x01D0, r24
	down_state1=down_state();
     634:	83 b1       	in	r24, 0x03	; 3
     636:	80 72       	andi	r24, 0x20	; 32
     638:	80 93 d1 01 	sts	0x01D1, r24
}
     63c:	08 95       	ret

0000063e <__vector_15>:

ISR(TIMER1_OVF_vect) {
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
	if(countdown) {
     64c:	80 91 d5 01 	lds	r24, 0x01D5
     650:	90 91 d3 01 	lds	r25, 0x01D3
     654:	88 23       	and	r24, r24
     656:	21 f0       	breq	.+8      	; 0x660 <__vector_15+0x22>
		if(ovf) {
     658:	99 23       	and	r25, r25
     65a:	29 f0       	breq	.+10     	; 0x666 <__vector_15+0x28>
			ovf--;
     65c:	91 50       	subi	r25, 0x01	; 1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <__vector_15+0x24>
		}
	}
	else ovf++;
     660:	9f 5f       	subi	r25, 0xFF	; 255
     662:	90 93 d3 01 	sts	0x01D3, r25
}
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_14>:

ISR(TIMER1_COMPB_vect) {
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	8f 93       	push	r24
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
	TCNT1=0;
     684:	10 92 85 00 	sts	0x0085, r1
     688:	10 92 84 00 	sts	0x0084, r1
	ADCSRA|=1<<6;
     68c:	ea e7       	ldi	r30, 0x7A	; 122
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	80 64       	ori	r24, 0x40	; 64
     694:	80 83       	st	Z, r24
}
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	8f 91       	pop	r24
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_13>:

ISR(TIMER1_COMPA_vect) {
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	8f 93       	push	r24
	if(countdown&&!ovf) {
     6b2:	80 91 d5 01 	lds	r24, 0x01D5
     6b6:	88 23       	and	r24, r24
     6b8:	61 f0       	breq	.+24     	; 0x6d2 <__vector_13+0x2c>
     6ba:	80 91 d3 01 	lds	r24, 0x01D3
     6be:	88 23       	and	r24, r24
     6c0:	41 f4       	brne	.+16     	; 0x6d2 <__vector_13+0x2c>
		wait_ok=1;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	80 93 d4 01 	sts	0x01D4, r24
		TIMSK1&=~((1<<OCIE1A)|(1<<TOIE1));
     6c8:	80 91 6f 00 	lds	r24, 0x006F
     6cc:	8c 7f       	andi	r24, 0xFC	; 252
     6ce:	80 93 6f 00 	sts	0x006F, r24
	}
}
     6d2:	8f 91       	pop	r24
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_24>:


ISR(ADC_vect) {
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
	if((current<ALL_N)||mode==MODE_UART) {
     6f8:	80 91 cc 01 	lds	r24, 0x01CC
     6fc:	87 ff       	sbrs	r24, 7
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <__vector_24+0x2a>
     700:	80 91 c5 01 	lds	r24, 0x01C5
     704:	85 30       	cpi	r24, 0x05	; 5
     706:	39 f5       	brne	.+78     	; 0x756 <__vector_24+0x78>
		if(mode==MODE_UART) current=ALL_N-1;
     708:	40 91 c5 01 	lds	r20, 0x01C5
     70c:	45 30       	cpi	r20, 0x05	; 5
     70e:	19 f4       	brne	.+6      	; 0x716 <__vector_24+0x38>
     710:	8f e7       	ldi	r24, 0x7F	; 127
     712:	80 93 cc 01 	sts	0x01CC, r24
		capture[current]=ADC>>1;
     716:	50 91 cc 01 	lds	r21, 0x01CC
     71a:	25 2f       	mov	r18, r21
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	80 91 78 00 	lds	r24, 0x0078
     722:	90 91 79 00 	lds	r25, 0x0079
     726:	f9 01       	movw	r30, r18
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	e3 59       	subi	r30, 0x93	; 147
     72e:	fb 4f       	sbci	r31, 0xFB	; 251
     730:	96 95       	lsr	r25
     732:	87 95       	ror	r24
     734:	91 83       	std	Z+1, r25	; 0x01
     736:	80 83       	st	Z, r24
		if(mode==MODE_XY) {
     738:	43 30       	cpi	r20, 0x03	; 3
     73a:	41 f4       	brne	.+16     	; 0x74c <__vector_24+0x6e>
			if(!(current%2)) ADMUX=0b01100001;
     73c:	50 fd       	sbrc	r21, 0
     73e:	02 c0       	rjmp	.+4      	; 0x744 <__vector_24+0x66>
     740:	81 e6       	ldi	r24, 0x61	; 97
     742:	01 c0       	rjmp	.+2      	; 0x746 <__vector_24+0x68>
			else ADMUX=0b01100000;
     744:	80 e6       	ldi	r24, 0x60	; 96
     746:	80 93 7c 00 	sts	0x007C, r24
     74a:	02 c0       	rjmp	.+4      	; 0x750 <__vector_24+0x72>
		}
		if(mode!=MODE_UART) current++;
     74c:	45 30       	cpi	r20, 0x05	; 5
     74e:	19 f0       	breq	.+6      	; 0x756 <__vector_24+0x78>
     750:	5f 5f       	subi	r21, 0xFF	; 255
     752:	50 93 cc 01 	sts	0x01CC, r21
	}
}
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <min>:
		}
	}
	buttons_update();
}

inline uint16_t min(uint16_t a,uint16_t b) {
     770:	ac 01       	movw	r20, r24
     772:	9b 01       	movw	r18, r22
     774:	46 17       	cp	r20, r22
     776:	57 07       	cpc	r21, r23
     778:	08 f4       	brcc	.+2      	; 0x77c <min+0xc>
     77a:	9a 01       	movw	r18, r20
	return(a<b?a:b);
}
     77c:	c9 01       	movw	r24, r18
     77e:	08 95       	ret

00000780 <max>:

inline uint16_t max(uint16_t a,uint16_t b) {
     780:	ac 01       	movw	r20, r24
     782:	9b 01       	movw	r18, r22
     784:	64 17       	cp	r22, r20
     786:	75 07       	cpc	r23, r21
     788:	08 f4       	brcc	.+2      	; 0x78c <max+0xc>
     78a:	9a 01       	movw	r18, r20
	return(a>b?a:b);
}
     78c:	c9 01       	movw	r24, r18
     78e:	08 95       	ret

00000790 <lcd_sym>:
  lcd_databits(SEND_CMD,0xc0);
  lcd_databits(SEND_CMD,0x40);
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
	static uint8_t t;
	for(t=0;t<5;t++)
     796:	10 92 df 01 	sts	0x01DF, r1
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
     79a:	95 e0       	ldi	r25, 0x05	; 5
     79c:	89 9f       	mul	r24, r25
     79e:	e0 01       	movw	r28, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	0c c0       	rjmp	.+24     	; 0x7bc <lcd_sym+0x2c>
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
	static uint8_t t;
	for(t=0;t<5;t++)
     7a4:	ce 01       	movw	r24, r28
     7a6:	81 0f       	add	r24, r17
     7a8:	91 1d       	adc	r25, r1
     7aa:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__eerd_byte_m644>
     7ae:	68 2f       	mov	r22, r24
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
	static uint8_t t;
	for(t=0;t<5;t++)
     7b6:	1f 5f       	subi	r17, 0xFF	; 255
     7b8:	10 93 df 01 	sts	0x01DF, r17
     7bc:	10 91 df 01 	lds	r17, 0x01DF
     7c0:	15 30       	cpi	r17, 0x05	; 5
     7c2:	80 f3       	brcs	.-32     	; 0x7a4 <lcd_sym+0x14>
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
	lcd_databits(SEND_DATA,0);
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	08 95       	ret

000007d4 <lcd_num_from_right>:
	for(x=0;x<=s;x++) {
		r|=1<<(7-x);
	}
	lcd_databits(SEND_DATA,r);
}
void lcd_num_from_right(unsigned int maxx,unsigned int y,unsigned int n) {
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	e0 ef       	ldi	r30, 0xF0	; 240
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x16>
     7e0:	d6 2e       	mov	r13, r22
     7e2:	ea 01       	movw	r28, r20
	short unsigned int m,x=maxx-FONT_SIZE-1;
     7e4:	4a ef       	ldi	r20, 0xFA	; 250
     7e6:	e4 2e       	mov	r14, r20
     7e8:	4f ef       	ldi	r20, 0xFF	; 255
     7ea:	f4 2e       	mov	r15, r20
     7ec:	e8 0e       	add	r14, r24
     7ee:	f9 1e       	adc	r15, r25
     7f0:	1c c0       	rjmp	.+56     	; 0x82a <lcd_num_from_right+0x56>
	while(n) {
		m=n%10;
     7f2:	ce 01       	movw	r24, r28
     7f4:	6a e0       	ldi	r22, 0x0A	; 10
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__udivmodhi4>
     7fc:	8c 01       	movw	r16, r24
		lcd_goto_xblock(x);
     7fe:	8e 2d       	mov	r24, r14
     800:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     804:	8d 2d       	mov	r24, r13
     806:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_sym('0'+m);
     80a:	80 2f       	mov	r24, r16
     80c:	80 5d       	subi	r24, 0xD0	; 208
     80e:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_sym>
		x-=FONT_SIZE+1;
     812:	8a ef       	ldi	r24, 0xFA	; 250
     814:	9f ef       	ldi	r25, 0xFF	; 255
     816:	e8 0e       	add	r14, r24
     818:	f9 1e       	adc	r15, r25
		n-=m;
		n/=10;
     81a:	ce 01       	movw	r24, r28
     81c:	80 1b       	sub	r24, r16
     81e:	91 0b       	sbc	r25, r17
     820:	6a e0       	ldi	r22, 0x0A	; 10
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__udivmodhi4>
     828:	eb 01       	movw	r28, r22
	}
	lcd_databits(SEND_DATA,r);
}
void lcd_num_from_right(unsigned int maxx,unsigned int y,unsigned int n) {
	short unsigned int m,x=maxx-FONT_SIZE-1;
	while(n) {
     82a:	20 97       	sbiw	r28, 0x00	; 0
     82c:	11 f7       	brne	.-60     	; 0x7f2 <lcd_num_from_right+0x1e>
		lcd_sym('0'+m);
		x-=FONT_SIZE+1;
		n-=m;
		n/=10;
	}
}
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	e7 e0       	ldi	r30, 0x07	; 7
     834:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x16>

00000838 <lcd_str>:
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
	lcd_databits(SEND_DATA,0);
}


void lcd_str(char* s,uint8_t x,uint8_t y) {
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ec 01       	movw	r28, r24
     842:	16 2f       	mov	r17, r22
     844:	04 2f       	mov	r16, r20
     846:	0a c0       	rjmp	.+20     	; 0x85c <lcd_str+0x24>
	while(*s) {
		if(x!=-1&&y!=-1) {
			lcd_goto_xblock(x);
     848:	81 2f       	mov	r24, r17
     84a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
			lcd_goto_yblock(y);
     84e:	80 2f       	mov	r24, r16
     850:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		}
		lcd_sym(*s++);
     854:	89 91       	ld	r24, Y+
     856:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_sym>
		x+=6;
     85a:	1a 5f       	subi	r17, 0xFA	; 250
	lcd_databits(SEND_DATA,0);
}


void lcd_str(char* s,uint8_t x,uint8_t y) {
	while(*s) {
     85c:	88 81       	ld	r24, Y
     85e:	88 23       	and	r24, r24
     860:	99 f7       	brne	.-26     	; 0x848 <lcd_str+0x10>
			lcd_goto_yblock(y);
		}
		lcd_sym(*s++);
		x+=6;
	}
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <main>:

int main() {
     86c:	a4 e0       	ldi	r26, 0x04	; 4
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	ec e3       	ldi	r30, 0x3C	; 60
     872:	f4 e0       	ldi	r31, 0x04	; 4
     874:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__prologue_saves__>
	// pins init
    DDRB&=~(0x3f);
     878:	84 b1       	in	r24, 0x04	; 4
     87a:	80 7c       	andi	r24, 0xC0	; 192
     87c:	84 b9       	out	0x04, r24	; 4
    DDRA|=1<<7;
     87e:	0f 9a       	sbi	0x01, 7	; 1
    PORTA&=~(1<<7);
     880:	17 98       	cbi	0x02, 7	; 2
    PORTB|=0x3f;
     882:	85 b1       	in	r24, 0x05	; 5
     884:	8f 63       	ori	r24, 0x3F	; 63
     886:	85 b9       	out	0x05, r24	; 5
#define BAUD 9600UL
#define UBRRVAL (F_CPU/(BAUD*16)-1)
#define U_M	1000
uint16_t u_c;
void uart_init() {
    UBRRH = UBRRVAL >> 8;
     888:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
     88c:	8d e4       	ldi	r24, 0x4D	; 77
     88e:	80 93 c4 00 	sts	0x00C4, r24
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
     892:	86 e0       	ldi	r24, 0x06	; 6
     894:	80 93 c2 00 	sts	0x00C2, r24
    UCSRB = (1 << RXEN) | (1 << TXEN);
     898:	88 e1       	ldi	r24, 0x18	; 24
     89a:	80 93 c1 00 	sts	0x00C1, r24
		uart_init();
    lcd_init();
     89e:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_init>
    ADMUX=0b01100000;
     8a2:	80 e6       	ldi	r24, 0x60	; 96
     8a4:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=0b11011101;
     8a8:	8d ed       	ldi	r24, 0xDD	; 221
     8aa:	80 93 7a 00 	sts	0x007A, r24
    SPCR=0x53;
     8ae:	83 e5       	ldi	r24, 0x53	; 83
     8b0:	8c bd       	out	0x2c, r24	; 44
    
    
    //button & adc interrupt init
		TCCR0B=0b101;
     8b2:	85 e0       	ldi	r24, 0x05	; 5
     8b4:	85 bd       	out	0x25, r24	; 37
		TIMSK0=1<<TOIE0;
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	20 93 6e 00 	sts	0x006E, r18
		TIMSK1=(1<<OCIE1B);
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	80 93 6f 00 	sts	0x006F, r24
    TCNT0=0x00;
     8c2:	16 bc       	out	0x26, r1	; 38
    TCNT1=0x00;
     8c4:	10 92 85 00 	sts	0x0085, r1
     8c8:	10 92 84 00 	sts	0x0084, r1
    adc_period=ADC_PERIOD_MIN;
     8cc:	88 e2       	ldi	r24, 0x28	; 40
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 8b 00 	sts	0x008B, r25
     8d4:	80 93 8a 00 	sts	0x008A, r24
    
    TCCR1B=0b001;
     8d8:	20 93 81 00 	sts	0x0081, r18
    sei();
     8dc:	78 94       	sei
    for(;;) {
		if(current>=(ALL_N-1)) {
     8de:	80 91 cc 01 	lds	r24, 0x01CC
     8e2:	8f 37       	cpi	r24, 0x7F	; 127
     8e4:	08 f4       	brcc	.+2      	; 0x8e8 <main+0x7c>
     8e6:	9e c4       	rjmp	.+2364   	; 0x1224 <__stack+0x125>
			TIMSK0&=~(1<<TOIE0);
     8e8:	80 91 6e 00 	lds	r24, 0x006E
     8ec:	8e 7f       	andi	r24, 0xFE	; 254
     8ee:	80 93 6e 00 	sts	0x006E, r24
			TIMSK1&=~(1<<OCIE1B);
     8f2:	80 91 6f 00 	lds	r24, 0x006F
     8f6:	8b 7f       	andi	r24, 0xFB	; 251
     8f8:	80 93 6f 00 	sts	0x006F, r24
			ovf=0;
     8fc:	10 92 d3 01 	sts	0x01D3, r1
			TCNT1=0;
     900:	10 92 85 00 	sts	0x0085, r1
     904:	10 92 84 00 	sts	0x0084, r1
			TIMSK1|=1<<TOIE1;
     908:	80 91 6f 00 	lds	r24, 0x006F
     90c:	81 60       	ori	r24, 0x01	; 1
     90e:	80 93 6f 00 	sts	0x006F, r24
			if(redraw_menu) {
     912:	80 91 d2 01 	lds	r24, 0x01D2
     916:	88 23       	and	r24, r24
     918:	09 f4       	brne	.+2      	; 0x91c <main+0xb0>
     91a:	33 c1       	rjmp	.+614    	; 0xb82 <main+0x316>
				lcd_all(0);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 90 01 	call	0x320	; 0x320 <lcd_all>
				redraw_menu=0;
     922:	10 92 d2 01 	sts	0x01D2, r1
				if(menu_state>MENU_MAX) {
     926:	80 91 c7 01 	lds	r24, 0x01C7
     92a:	86 30       	cpi	r24, 0x06	; 6
     92c:	0c f4       	brge	.+2      	; 0x930 <main+0xc4>
     92e:	de c0       	rjmp	.+444    	; 0xaec <main+0x280>
					if(menu_state==(MENU_MAX+MENU_ADCDELAY)) {
     930:	86 30       	cpi	r24, 0x06	; 6
     932:	d1 f4       	brne	.+52     	; 0x968 <main+0xfc>
						lcd_str("adc delay",0,0);
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_pixel_line_from_left(1,(adc_period-ADC_PERIOD_MIN)>>3);
     940:	60 91 8a 00 	lds	r22, 0x008A
     944:	70 91 8b 00 	lds	r23, 0x008B
     948:	68 52       	subi	r22, 0x28	; 40
     94a:	70 40       	sbci	r23, 0x00	; 0
     94c:	23 e0       	ldi	r18, 0x03	; 3
     94e:	76 95       	lsr	r23
     950:	67 95       	ror	r22
     952:	2a 95       	dec	r18
     954:	e1 f7       	brne	.-8      	; 0x94e <main+0xe2>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_pixel_line_from_left>
						lcd_arrows(0,2);
     95c:	8a e0       	ldi	r24, 0x0A	; 10
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	42 e0       	ldi	r20, 0x02	; 2
     964:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					}
					if(menu_state==(MENU_MAX+MENU_ABOUT)) {
     968:	80 91 c7 01 	lds	r24, 0x01C7
     96c:	8a 30       	cpi	r24, 0x0A	; 10
     96e:	b1 f5       	brne	.+108    	; 0x9dc <main+0x170>
						lcd_str("digital",0,0);
     970:	8e e0       	ldi	r24, 0x0E	; 14
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("oscill.",10,1);
     97c:	86 e1       	ldi	r24, 0x16	; 22
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	6a e0       	ldi	r22, 0x0A	; 10
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("v1.0",0,2);
     988:	8e e1       	ldi	r24, 0x1E	; 30
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	42 e0       	ldi	r20, 0x02	; 2
     990:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("fft lib.",0,4);
     994:	83 e2       	ldi	r24, 0x23	; 35
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	44 e0       	ldi	r20, 0x04	; 4
     99c:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("by chan",0,5);
     9a0:	8c e2       	ldi	r24, 0x2C	; 44
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	45 e0       	ldi	r20, 0x05	; 5
     9a8:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("sergey",64,0);
     9ac:	84 e3       	ldi	r24, 0x34	; 52
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	60 e4       	ldi	r22, 0x40	; 64
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("volodin",70,1);
     9b8:	8b e3       	ldi	r24, 0x3B	; 59
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	66 e4       	ldi	r22, 0x46	; 70
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("2011",80,2);
     9c4:	83 e4       	ldi	r24, 0x43	; 67
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	60 e5       	ldi	r22, 0x50	; 80
     9ca:	42 e0       	ldi	r20, 0x02	; 2
     9cc:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_str("i.179e.net",64,4);
     9d0:	88 e4       	ldi	r24, 0x48	; 72
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	60 e4       	ldi	r22, 0x40	; 64
     9d6:	44 e0       	ldi	r20, 0x04	; 4
     9d8:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					}
					if(menu_state==(MENU_MAX+MENU_LCDSKIP)) {
     9dc:	80 91 c7 01 	lds	r24, 0x01C7
     9e0:	89 30       	cpi	r24, 0x09	; 9
     9e2:	91 f4       	brne	.+36     	; 0xa08 <main+0x19c>
						lcd_str("lcd_skip",0,0);
     9e4:	83 e5       	ldi	r24, 0x53	; 83
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_pixel_line_from_left(1,lcd_skip);
     9f0:	60 91 c9 01 	lds	r22, 0x01C9
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_pixel_line_from_left>
						lcd_arrows(0,2);
     9fc:	8a e0       	ldi	r24, 0x0A	; 10
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					}
					if(menu_state==(MENU_MAX+MENU_ADCSTEP)) {
     a08:	80 91 c7 01 	lds	r24, 0x01C7
     a0c:	87 30       	cpi	r24, 0x07	; 7
     a0e:	a9 f4       	brne	.+42     	; 0xa3a <main+0x1ce>
						lcd_str("adc step",0,0);
     a10:	8c e5       	ldi	r24, 0x5C	; 92
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						lcd_num_from_right(64,1,adc_step);
     a1c:	40 91 c6 01 	lds	r20, 0x01C6
     a20:	80 e4       	ldi	r24, 0x40	; 64
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
						lcd_arrows(0,2);
     a2e:	8a e0       	ldi	r24, 0x0A	; 10
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	42 e0       	ldi	r20, 0x02	; 2
     a36:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					}
					if(menu_state==(MENU_MAX+MENU_MODE)) {
     a3a:	80 91 c7 01 	lds	r24, 0x01C7
     a3e:	88 30       	cpi	r24, 0x08	; 8
     a40:	09 f0       	breq	.+2      	; 0xa44 <main+0x1d8>
     a42:	9f c0       	rjmp	.+318    	; 0xb82 <main+0x316>
						lcd_str("mode",0,0);
     a44:	85 e6       	ldi	r24, 0x65	; 101
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
						if(mode==MODE_SIGNAL) {
     a50:	80 91 c5 01 	lds	r24, 0x01C5
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	19 f4       	brne	.+6      	; 0xa5e <main+0x1f2>
							lcd_str("signal",0,1);
     a58:	8a e6       	ldi	r24, 0x6A	; 106
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	88 c0       	rjmp	.+272    	; 0xb6e <main+0x302>
						}
						else if(mode==MODE_SPECTRUM) {
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	19 f4       	brne	.+6      	; 0xa68 <main+0x1fc>
							lcd_str("spectrum",0,1);
     a62:	81 e7       	ldi	r24, 0x71	; 113
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	09 c0       	rjmp	.+18     	; 0xa7a <main+0x20e>
							if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
						}
						else if(mode==MODE_XY) {
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	19 f4       	brne	.+6      	; 0xa72 <main+0x206>
							lcd_str("xy",0,1);
     a6c:	82 e8       	ldi	r24, 0x82	; 130
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	7e c0       	rjmp	.+252    	; 0xb6e <main+0x302>
						}
						else if(mode==MODE_DUAL) {
     a72:	84 30       	cpi	r24, 0x04	; 4
     a74:	81 f5       	brne	.+96     	; 0xad6 <main+0x26a>
							lcd_str("dual",0,1);
     a76:	85 e8       	ldi	r24, 0x85	; 133
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
							if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
     a82:	80 91 c5 01 	lds	r24, 0x01C5
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	11 f0       	breq	.+4      	; 0xa8e <main+0x222>
     a8a:	84 30       	cpi	r24, 0x04	; 4
     a8c:	31 f4       	brne	.+12     	; 0xa9a <main+0x22e>
     a8e:	8a e7       	ldi	r24, 0x7A	; 122
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	60 e4       	ldi	r22, 0x40	; 64
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
     a9a:	20 91 8a 00 	lds	r18, 0x008A
     a9e:	30 91 8b 00 	lds	r19, 0x008B
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	7b e1       	ldi	r23, 0x1B	; 27
     aaa:	87 eb       	ldi	r24, 0xB7	; 183
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	55 95       	asr	r21
     ab6:	47 95       	ror	r20
     ab8:	37 95       	ror	r19
     aba:	27 95       	ror	r18
     abc:	9a 95       	dec	r25
     abe:	d1 f7       	brne	.-12     	; 0xab4 <main+0x248>
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	a9 01       	movw	r20, r18
     aca:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
     ace:	8f e7       	ldi	r24, 0x7F	; 127
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	65 e7       	ldi	r22, 0x75	; 117
     ad4:	4d c0       	rjmp	.+154    	; 0xb70 <main+0x304>
						}
						else if(mode==MODE_UART) {
     ad6:	85 30       	cpi	r24, 0x05	; 5
     ad8:	19 f4       	brne	.+6      	; 0xae0 <main+0x274>
							lcd_str("uart",0,1);
     ada:	8a e8       	ldi	r24, 0x8A	; 138
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	47 c0       	rjmp	.+142    	; 0xb6e <main+0x302>
						}
						else if(mode==MODE_UART_BUF) {
     ae0:	86 30       	cpi	r24, 0x06	; 6
     ae2:	09 f0       	breq	.+2      	; 0xae6 <main+0x27a>
     ae4:	48 c0       	rjmp	.+144    	; 0xb76 <main+0x30a>
							lcd_str("uart buf",0,1);
     ae6:	8f e8       	ldi	r24, 0x8F	; 143
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	41 c0       	rjmp	.+130    	; 0xb6e <main+0x302>
						}
						lcd_arrows(0,2);
					}
				}
				else if(menu_state!=-1) {
     aec:	8f 3f       	cpi	r24, 0xFF	; 255
     aee:	09 f4       	brne	.+2      	; 0xaf2 <main+0x286>
     af0:	48 c0       	rjmp	.+144    	; 0xb82 <main+0x316>
					lcd_str("menu",0,0);
     af2:	88 e9       	ldi	r24, 0x98	; 152
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					if(menu_state==MENU_EXIT) lcd_str("exit",0,1);
     afe:	80 91 c7 01 	lds	r24, 0x01C7
     b02:	88 23       	and	r24, r24
     b04:	31 f4       	brne	.+12     	; 0xb12 <main+0x2a6>
     b06:	8d e9       	ldi	r24, 0x9D	; 157
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					if(menu_state==MENU_ADCDELAY) lcd_str("adc delay",0,1);
     b12:	80 91 c7 01 	lds	r24, 0x01C7
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	31 f4       	brne	.+12     	; 0xb26 <main+0x2ba>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					if(menu_state==MENU_ADCSTEP) lcd_str("adc d step",0,1);
     b26:	80 91 c7 01 	lds	r24, 0x01C7
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	31 f4       	brne	.+12     	; 0xb3a <main+0x2ce>
     b2e:	82 ea       	ldi	r24, 0xA2	; 162
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					if(menu_state==MENU_LCDSKIP) lcd_str("lcd skip",0,1);
     b3a:	80 91 c7 01 	lds	r24, 0x01C7
     b3e:	84 30       	cpi	r24, 0x04	; 4
     b40:	31 f4       	brne	.+12     	; 0xb4e <main+0x2e2>
     b42:	8d ea       	ldi	r24, 0xAD	; 173
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	41 e0       	ldi	r20, 0x01	; 1
     b4a:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					if(menu_state==MENU_ABOUT) lcd_str("about",0,1);
     b4e:	80 91 c7 01 	lds	r24, 0x01C7
     b52:	85 30       	cpi	r24, 0x05	; 5
     b54:	31 f4       	brne	.+12     	; 0xb62 <main+0x2f6>
     b56:	86 eb       	ldi	r24, 0xB6	; 182
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					if(menu_state==MENU_MODE) lcd_str("mode",0,1);
     b62:	80 91 c7 01 	lds	r24, 0x01C7
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	31 f4       	brne	.+12     	; 0xb76 <main+0x30a>
     b6a:	85 e6       	ldi	r24, 0x65	; 101
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
					lcd_arrows(0,2);
     b76:	8a e0       	ldi	r24, 0x0A	; 10
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	42 e0       	ldi	r20, 0x02	; 2
     b7e:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
				}
			}
			if(menu_state==-1) {
     b82:	80 91 c7 01 	lds	r24, 0x01C7
     b86:	90 91 c5 01 	lds	r25, 0x01C5
     b8a:	8f 3f       	cpi	r24, 0xFF	; 255
     b8c:	09 f0       	breq	.+2      	; 0xb90 <main+0x324>
     b8e:	38 c2       	rjmp	.+1136   	; 0x1000 <main+0x794>
				if(mode==MODE_SPECTRUM||mode==MODE_DUAL||mode==MODE_SIGNAL) {
     b90:	92 30       	cpi	r25, 0x02	; 2
     b92:	21 f0       	breq	.+8      	; 0xb9c <main+0x330>
     b94:	94 30       	cpi	r25, 0x04	; 4
     b96:	11 f0       	breq	.+4      	; 0xb9c <main+0x330>
     b98:	91 30       	cpi	r25, 0x01	; 1
     b9a:	81 f4       	brne	.+32     	; 0xbbc <main+0x350>
					fft_input(capture, bfly_buff);
     b9c:	8d e6       	ldi	r24, 0x6D	; 109
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	67 ee       	ldi	r22, 0xE7	; 231
     ba2:	71 e0       	ldi	r23, 0x01	; 1
     ba4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fft_input>
					fft_execute(bfly_buff);
     ba8:	87 ee       	ldi	r24, 0xE7	; 231
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fft_execute>
					fft_output(bfly_buff, output);
     bb0:	87 ee       	ldi	r24, 0xE7	; 231
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	67 ee       	ldi	r22, 0xE7	; 231
     bb6:	73 e0       	ldi	r23, 0x03	; 3
     bb8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fft_output>
				}
				if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
     bbc:	80 91 c5 01 	lds	r24, 0x01C5
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	19 f0       	breq	.+6      	; 0xbca <main+0x35e>
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	09 f0       	breq	.+2      	; 0xbca <main+0x35e>
     bc8:	46 c0       	rjmp	.+140    	; 0xc56 <main+0x3ea>
						for (m=0;m<ALL_N/2;m++) {
     bca:	10 92 c8 01 	sts	0x01C8, r1
     bce:	3e c0       	rjmp	.+124    	; 0xc4c <main+0x3e0>
							s=output[m]>>9;
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e9 51       	subi	r30, 0x19	; 25
     bd8:	fc 4f       	sbci	r31, 0xFC	; 252
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	86 95       	lsr	r24
     bde:	80 93 6c 04 	sts	0x046C, r24
							if(s>63) s=63;
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	18 f0       	brcs	.+6      	; 0xbec <main+0x380>
     be6:	2f e3       	ldi	r18, 0x3F	; 63
     be8:	20 93 6c 04 	sts	0x046C, r18
							if(s<0) s=0;
							for(u=0;u<7;u++) lcd_block(ALL_N/2+m,u,0);
     bec:	10 92 73 05 	sts	0x0573, r1
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <main+0x39a>
     bf2:	82 2f       	mov	r24, r18
     bf4:	80 5c       	subi	r24, 0xC0	; 192
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     bfc:	80 91 73 05 	lds	r24, 0x0573
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 93 73 05 	sts	0x0573, r24
     c06:	60 91 73 05 	lds	r22, 0x0573
     c0a:	20 91 c8 01 	lds	r18, 0x01C8
     c0e:	67 30       	cpi	r22, 0x07	; 7
     c10:	80 f3       	brcs	.-32     	; 0xbf2 <main+0x386>
							if(!(m%8)) {
     c12:	82 2f       	mov	r24, r18
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	87 70       	andi	r24, 0x07	; 7
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	89 2b       	or	r24, r25
     c1c:	59 f4       	brne	.+22     	; 0xc34 <main+0x3c8>
								lcd_goto_xblock(ALL_N/2+m);
     c1e:	82 2f       	mov	r24, r18
     c20:	80 5c       	subi	r24, 0xC0	; 192
     c22:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
								lcd_goto_yblock(2);
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
								lcd_databits(SEND_DATA,0x1);
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
							}
							lcd_line_from_bottom(ALL_N/2+m,s);
     c34:	80 91 c8 01 	lds	r24, 0x01C8
     c38:	80 5c       	subi	r24, 0xC0	; 192
     c3a:	60 91 6c 04 	lds	r22, 0x046C
     c3e:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_line_from_bottom>
					fft_input(capture, bfly_buff);
					fft_execute(bfly_buff);
					fft_output(bfly_buff, output);
				}
				if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
						for (m=0;m<ALL_N/2;m++) {
     c42:	80 91 c8 01 	lds	r24, 0x01C8
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 c8 01 	sts	0x01C8, r24
     c4c:	e0 91 c8 01 	lds	r30, 0x01C8
     c50:	e0 34       	cpi	r30, 0x40	; 64
     c52:	08 f4       	brcc	.+2      	; 0xc56 <main+0x3ea>
     c54:	bd cf       	rjmp	.-134    	; 0xbd0 <main+0x364>
								lcd_databits(SEND_DATA,0x1);
							}
							lcd_line_from_bottom(ALL_N/2+m,s);
						}
				}
				if((mode==MODE_SIGNAL)||(mode==MODE_DUAL)) {
     c56:	80 91 c5 01 	lds	r24, 0x01C5
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	19 f0       	breq	.+6      	; 0xc64 <main+0x3f8>
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	09 f0       	breq	.+2      	; 0xc64 <main+0x3f8>
     c62:	83 c1       	rjmp	.+774    	; 0xf6a <main+0x6fe>
					if(lcd_skip_c>=lcd_skip) {
     c64:	90 91 ca 01 	lds	r25, 0x01CA
     c68:	80 91 c9 01 	lds	r24, 0x01C9
     c6c:	98 17       	cp	r25, r24
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <main+0x406>
     c70:	78 c1       	rjmp	.+752    	; 0xf62 <main+0x6f6>
						lcd_skip_c=1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 ca 01 	sts	0x01CA, r24
						for(m=0;m<ALL_N;m++) {
     c78:	10 92 c8 01 	sts	0x01C8, r1
     c7c:	6d c1       	rjmp	.+730    	; 0xf58 <main+0x6ec>
							if(mode==MODE_DUAL)  {
     c7e:	80 91 c5 01 	lds	r24, 0x01C5
     c82:	a4 2f       	mov	r26, r20
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	09 f0       	breq	.+2      	; 0xc8c <main+0x420>
     c8a:	b4 c0       	rjmp	.+360    	; 0xdf4 <main+0x588>
								c=63-(capture[m]>>9);
     c8c:	fd 01       	movw	r30, r26
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e3 59       	subi	r30, 0x93	; 147
     c94:	fb 4f       	sbci	r31, 0xFB	; 251
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	86 95       	lsr	r24
     c9a:	8b 83       	std	Y+3, r24	; 0x03
     c9c:	1c 82       	std	Y+4, r1	; 0x04
     c9e:	2f e3       	ldi	r18, 0x3F	; 63
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	9c 81       	ldd	r25, Y+4	; 0x04
     ca6:	28 1b       	sub	r18, r24
     ca8:	39 0b       	sbc	r19, r25
     caa:	30 93 6b 04 	sts	0x046B, r19
     cae:	20 93 6a 04 	sts	0x046A, r18
								
								//prev
								if(m>1) {
     cb2:	42 30       	cpi	r20, 0x02	; 2
     cb4:	80 f1       	brcs	.+96     	; 0xd16 <main+0x4aa>
									c1=(63-(capture[m-2]>>9));
     cb6:	fd 01       	movw	r30, r26
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e7 59       	subi	r30, 0x97	; 151
     cbe:	fb 4f       	sbci	r31, 0xFB	; 251
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	88 2e       	mov	r8, r24
     cc4:	86 94       	lsr	r8
     cc6:	99 24       	eor	r9, r9
     cc8:	8f e3       	ldi	r24, 0x3F	; 63
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	88 19       	sub	r24, r8
     cce:	99 09       	sbc	r25, r9
     cd0:	90 93 69 04 	sts	0x0469, r25
     cd4:	80 93 68 04 	sts	0x0468, r24
									if(c1<c) ymin=(c1+c)>>1;
     cd8:	82 17       	cp	r24, r18
     cda:	93 07       	cpc	r25, r19
     cdc:	40 f4       	brcc	.+16     	; 0xcee <main+0x482>
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	96 95       	lsr	r25
     ce4:	87 95       	ror	r24
     ce6:	90 93 6e 05 	sts	0x056E, r25
     cea:	80 93 6d 05 	sts	0x056D, r24
									if(c1>c) ymax=(c1+c)>>1;
     cee:	20 91 68 04 	lds	r18, 0x0468
     cf2:	30 91 69 04 	lds	r19, 0x0469
     cf6:	80 91 6a 04 	lds	r24, 0x046A
     cfa:	90 91 6b 04 	lds	r25, 0x046B
     cfe:	82 17       	cp	r24, r18
     d00:	93 07       	cpc	r25, r19
     d02:	88 f4       	brcc	.+34     	; 0xd26 <main+0x4ba>
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	96 95       	lsr	r25
     d0a:	87 95       	ror	r24
     d0c:	90 93 72 05 	sts	0x0572, r25
     d10:	80 93 71 05 	sts	0x0571, r24
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <main+0x4ba>
								}
								else {
									ymin=c;
     d16:	30 93 6e 05 	sts	0x056E, r19
     d1a:	20 93 6d 05 	sts	0x056D, r18
									ymax=c;
     d1e:	30 93 72 05 	sts	0x0572, r19
     d22:	20 93 71 05 	sts	0x0571, r18
								}
								
								//next
								if(m<(ALL_N-2)) {
     d26:	4e 37       	cpi	r20, 0x7E	; 126
     d28:	08 f0       	brcs	.+2      	; 0xd2c <main+0x4c0>
     d2a:	43 c0       	rjmp	.+134    	; 0xdb2 <main+0x546>
									c1=63-(capture[m+2]>>9);
     d2c:	aa 0f       	add	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	af 58       	subi	r26, 0x8F	; 143
     d32:	bb 4f       	sbci	r27, 0xFB	; 251
     d34:	11 96       	adiw	r26, 0x01	; 1
     d36:	8c 91       	ld	r24, X
     d38:	68 2e       	mov	r6, r24
     d3a:	66 94       	lsr	r6
     d3c:	77 24       	eor	r7, r7
     d3e:	8f e3       	ldi	r24, 0x3F	; 63
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	86 19       	sub	r24, r6
     d44:	97 09       	sbc	r25, r7
     d46:	90 93 69 04 	sts	0x0469, r25
     d4a:	80 93 68 04 	sts	0x0468, r24
									if(c1<c) ymin=min(ymin,(c+c1)>>1);
     d4e:	20 91 6a 04 	lds	r18, 0x046A
     d52:	30 91 6b 04 	lds	r19, 0x046B
     d56:	82 17       	cp	r24, r18
     d58:	93 07       	cpc	r25, r19
     d5a:	80 f4       	brcc	.+32     	; 0xd7c <main+0x510>
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	20 91 6d 05 	lds	r18, 0x056D
     d64:	30 91 6e 05 	lds	r19, 0x056E
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	08 f4       	brcc	.+2      	; 0xd74 <main+0x508>
     d72:	c9 01       	movw	r24, r18
     d74:	90 93 6e 05 	sts	0x056E, r25
     d78:	80 93 6d 05 	sts	0x056D, r24
									if(c1>c) ymax=max(ymax,(c1+c)>>1);
     d7c:	20 91 68 04 	lds	r18, 0x0468
     d80:	30 91 69 04 	lds	r19, 0x0469
     d84:	80 91 6a 04 	lds	r24, 0x046A
     d88:	90 91 6b 04 	lds	r25, 0x046B
     d8c:	82 17       	cp	r24, r18
     d8e:	93 07       	cpc	r25, r19
     d90:	80 f4       	brcc	.+32     	; 0xdb2 <main+0x546>
     d92:	82 0f       	add	r24, r18
     d94:	93 1f       	adc	r25, r19
     d96:	20 91 71 05 	lds	r18, 0x0571
     d9a:	30 91 72 05 	lds	r19, 0x0572
     d9e:	96 95       	lsr	r25
     da0:	87 95       	ror	r24
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	08 f4       	brcc	.+2      	; 0xdaa <main+0x53e>
     da8:	c9 01       	movw	r24, r18
     daa:	90 93 72 05 	sts	0x0572, r25
     dae:	80 93 71 05 	sts	0x0571, r24
								}
								for(s=0;s<8;s++) lcd_block(m/2,s,0);
     db2:	10 92 6c 04 	sts	0x046C, r1
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <main+0x560>
     db8:	82 2f       	mov	r24, r18
     dba:	86 95       	lsr	r24
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     dc2:	80 91 6c 04 	lds	r24, 0x046C
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 6c 04 	sts	0x046C, r24
     dcc:	60 91 6c 04 	lds	r22, 0x046C
     dd0:	20 91 c8 01 	lds	r18, 0x01C8
     dd4:	68 30       	cpi	r22, 0x08	; 8
     dd6:	80 f3       	brcs	.-32     	; 0xdb8 <main+0x54c>
								lcd_constx_line(m/2,ymin,ymax);
     dd8:	82 2f       	mov	r24, r18
     dda:	86 95       	lsr	r24
     ddc:	60 91 6d 05 	lds	r22, 0x056D
     de0:	40 91 71 05 	lds	r20, 0x0571
     de4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_constx_line>
								m++;
     de8:	80 91 c8 01 	lds	r24, 0x01C8
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	80 93 c8 01 	sts	0x01C8, r24
     df2:	ad c0       	rjmp	.+346    	; 0xf4e <main+0x6e2>
							}
							else {
								c=63-(capture[m]>>9);
     df4:	fd 01       	movw	r30, r26
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	e3 59       	subi	r30, 0x93	; 147
     dfc:	fb 4f       	sbci	r31, 0xFB	; 251
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	48 2e       	mov	r4, r24
     e02:	46 94       	lsr	r4
     e04:	55 24       	eor	r5, r5
     e06:	2f e3       	ldi	r18, 0x3F	; 63
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	24 19       	sub	r18, r4
     e0c:	35 09       	sbc	r19, r5
     e0e:	30 93 6b 04 	sts	0x046B, r19
     e12:	20 93 6a 04 	sts	0x046A, r18
								
								//prev
								if(m) {
     e16:	44 23       	and	r20, r20
     e18:	81 f1       	breq	.+96     	; 0xe7a <main+0x60e>
									c1=(63-(capture[m-1]>>9));
     e1a:	fd 01       	movw	r30, r26
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	e5 59       	subi	r30, 0x95	; 149
     e22:	fb 4f       	sbci	r31, 0xFB	; 251
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	28 2e       	mov	r2, r24
     e28:	26 94       	lsr	r2
     e2a:	33 24       	eor	r3, r3
     e2c:	8f e3       	ldi	r24, 0x3F	; 63
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	82 19       	sub	r24, r2
     e32:	93 09       	sbc	r25, r3
     e34:	90 93 69 04 	sts	0x0469, r25
     e38:	80 93 68 04 	sts	0x0468, r24
									if(c1<c) ymin=(c1+c)>>1;
     e3c:	82 17       	cp	r24, r18
     e3e:	93 07       	cpc	r25, r19
     e40:	40 f4       	brcc	.+16     	; 0xe52 <main+0x5e6>
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	90 93 6e 05 	sts	0x056E, r25
     e4e:	80 93 6d 05 	sts	0x056D, r24
									if(c1>c) ymax=(c1+c)>>1;
     e52:	20 91 68 04 	lds	r18, 0x0468
     e56:	30 91 69 04 	lds	r19, 0x0469
     e5a:	80 91 6a 04 	lds	r24, 0x046A
     e5e:	90 91 6b 04 	lds	r25, 0x046B
     e62:	82 17       	cp	r24, r18
     e64:	93 07       	cpc	r25, r19
     e66:	90 f4       	brcc	.+36     	; 0xe8c <main+0x620>
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	96 95       	lsr	r25
     e6e:	87 95       	ror	r24
     e70:	90 93 72 05 	sts	0x0572, r25
     e74:	80 93 71 05 	sts	0x0571, r24
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <main+0x620>
								}
								else {
									ymin=c;
     e7a:	30 93 6e 05 	sts	0x056E, r19
     e7e:	20 93 6d 05 	sts	0x056D, r18
									ymax=c;
     e82:	30 93 72 05 	sts	0x0572, r19
     e86:	20 93 71 05 	sts	0x0571, r18
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <main+0x626>
								}
								
								//next
								if(m<(ALL_N-1)) {
     e8c:	4f 37       	cpi	r20, 0x7F	; 127
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <main+0x626>
     e90:	45 c0       	rjmp	.+138    	; 0xf1c <main+0x6b0>
									c1=63-(capture[m+1]>>9);
     e92:	aa 0f       	add	r26, r26
     e94:	bb 1f       	adc	r27, r27
     e96:	a1 59       	subi	r26, 0x91	; 145
     e98:	bb 4f       	sbci	r27, 0xFB	; 251
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	8c 91       	ld	r24, X
     e9e:	86 95       	lsr	r24
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	1a 82       	std	Y+2, r1	; 0x02
     ea4:	8f e3       	ldi	r24, 0x3F	; 63
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a9 81       	ldd	r26, Y+1	; 0x01
     eaa:	ba 81       	ldd	r27, Y+2	; 0x02
     eac:	8a 1b       	sub	r24, r26
     eae:	9b 0b       	sbc	r25, r27
     eb0:	90 93 69 04 	sts	0x0469, r25
     eb4:	80 93 68 04 	sts	0x0468, r24
									if(c1<c) ymin=min(ymin,(c+c1)>>1);
     eb8:	20 91 6a 04 	lds	r18, 0x046A
     ebc:	30 91 6b 04 	lds	r19, 0x046B
     ec0:	82 17       	cp	r24, r18
     ec2:	93 07       	cpc	r25, r19
     ec4:	80 f4       	brcc	.+32     	; 0xee6 <main+0x67a>
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	20 91 6d 05 	lds	r18, 0x056D
     ece:	30 91 6e 05 	lds	r19, 0x056E
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	08 f4       	brcc	.+2      	; 0xede <main+0x672>
     edc:	c9 01       	movw	r24, r18
     ede:	90 93 6e 05 	sts	0x056E, r25
     ee2:	80 93 6d 05 	sts	0x056D, r24
									if(c1>c) ymax=max(ymax,(c1+c)>>1);
     ee6:	20 91 68 04 	lds	r18, 0x0468
     eea:	30 91 69 04 	lds	r19, 0x0469
     eee:	80 91 6a 04 	lds	r24, 0x046A
     ef2:	90 91 6b 04 	lds	r25, 0x046B
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	80 f4       	brcc	.+32     	; 0xf1c <main+0x6b0>
     efc:	82 0f       	add	r24, r18
     efe:	93 1f       	adc	r25, r19
     f00:	20 91 71 05 	lds	r18, 0x0571
     f04:	30 91 72 05 	lds	r19, 0x0572
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	82 17       	cp	r24, r18
     f0e:	93 07       	cpc	r25, r19
     f10:	08 f4       	brcc	.+2      	; 0xf14 <main+0x6a8>
     f12:	c9 01       	movw	r24, r18
     f14:	90 93 72 05 	sts	0x0572, r25
     f18:	80 93 71 05 	sts	0x0571, r24
								}
								for(s=0;s<8;s++) lcd_block(m,s,0);
     f1c:	10 92 6c 04 	sts	0x046C, r1
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <main+0x6ca>
     f22:	80 91 c8 01 	lds	r24, 0x01C8
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     f2c:	80 91 6c 04 	lds	r24, 0x046C
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	80 93 6c 04 	sts	0x046C, r24
     f36:	60 91 6c 04 	lds	r22, 0x046C
     f3a:	68 30       	cpi	r22, 0x08	; 8
     f3c:	90 f3       	brcs	.-28     	; 0xf22 <main+0x6b6>
								lcd_constx_line(m,ymin,ymax);
     f3e:	80 91 c8 01 	lds	r24, 0x01C8
     f42:	60 91 6d 05 	lds	r22, 0x056D
     f46:	40 91 71 05 	lds	r20, 0x0571
     f4a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_constx_line>
						}
				}
				if((mode==MODE_SIGNAL)||(mode==MODE_DUAL)) {
					if(lcd_skip_c>=lcd_skip) {
						lcd_skip_c=1;
						for(m=0;m<ALL_N;m++) {
     f4e:	80 91 c8 01 	lds	r24, 0x01C8
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 c8 01 	sts	0x01C8, r24
     f58:	40 91 c8 01 	lds	r20, 0x01C8
     f5c:	47 ff       	sbrs	r20, 7
     f5e:	8f ce       	rjmp	.-738    	; 0xc7e <main+0x412>
     f60:	91 c0       	rjmp	.+290    	; 0x1084 <main+0x818>
								for(s=0;s<8;s++) lcd_block(m,s,0);
								lcd_constx_line(m,ymin,ymax);
							}
						}
					}
					else lcd_skip_c++;
     f62:	9f 5f       	subi	r25, 0xFF	; 255
     f64:	90 93 ca 01 	sts	0x01CA, r25
     f68:	8d c0       	rjmp	.+282    	; 0x1084 <main+0x818>
				}
				else if(mode==MODE_XY) {
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	09 f0       	breq	.+2      	; 0xf70 <main+0x704>
     f6e:	8a c0       	rjmp	.+276    	; 0x1084 <main+0x818>
					if(lcd_skip_c>=lcd_skip) {
     f70:	90 91 ca 01 	lds	r25, 0x01CA
     f74:	80 91 c9 01 	lds	r24, 0x01C9
     f78:	98 17       	cp	r25, r24
     f7a:	00 f1       	brcs	.+64     	; 0xfbc <main+0x750>
						lcd_skip_c=1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 ca 01 	sts	0x01CA, r24
						for(s=64;s<128;s++) {
     f82:	80 e4       	ldi	r24, 0x40	; 64
     f84:	14 c0       	rjmp	.+40     	; 0xfae <main+0x742>
							for(m=0;m<8;m++) lcd_block(s,m,0);
     f86:	10 92 c8 01 	sts	0x01C8, r1
     f8a:	0a c0       	rjmp	.+20     	; 0xfa0 <main+0x734>
     f8c:	80 91 6c 04 	lds	r24, 0x046C
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     f96:	80 91 c8 01 	lds	r24, 0x01C8
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 c8 01 	sts	0x01C8, r24
     fa0:	60 91 c8 01 	lds	r22, 0x01C8
     fa4:	68 30       	cpi	r22, 0x08	; 8
     fa6:	90 f3       	brcs	.-28     	; 0xf8c <main+0x720>
					else lcd_skip_c++;
				}
				else if(mode==MODE_XY) {
					if(lcd_skip_c>=lcd_skip) {
						lcd_skip_c=1;
						for(s=64;s<128;s++) {
     fa8:	80 91 6c 04 	lds	r24, 0x046C
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 6c 04 	sts	0x046C, r24
     fb2:	80 91 6c 04 	lds	r24, 0x046C
     fb6:	87 ff       	sbrs	r24, 7
     fb8:	e6 cf       	rjmp	.-52     	; 0xf86 <main+0x71a>
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <main+0x756>
							for(m=0;m<8;m++) lcd_block(s,m,0);
						}
					}
					else lcd_skip_c++;
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	90 93 ca 01 	sts	0x01CA, r25
					
					for(s=0;s<128;s+=2) {
     fc2:	10 92 6c 04 	sts	0x046C, r1
     fc6:	17 c0       	rjmp	.+46     	; 0xff6 <main+0x78a>
						lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	df 01       	movw	r26, r30
     fd0:	a3 59       	subi	r26, 0x93	; 147
     fd2:	bb 4f       	sbci	r27, 0xFB	; 251
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	8c 91       	ld	r24, X
     fd8:	86 95       	lsr	r24
     fda:	e1 59       	subi	r30, 0x91	; 145
     fdc:	fb 4f       	sbci	r31, 0xFB	; 251
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	96 95       	lsr	r25
     fe2:	6f e3       	ldi	r22, 0x3F	; 63
     fe4:	69 1b       	sub	r22, r25
     fe6:	80 5c       	subi	r24, 0xC0	; 192
     fe8:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_pixel_share>
							for(m=0;m<8;m++) lcd_block(s,m,0);
						}
					}
					else lcd_skip_c++;
					
					for(s=0;s<128;s+=2) {
     fec:	80 91 6c 04 	lds	r24, 0x046C
     ff0:	8e 5f       	subi	r24, 0xFE	; 254
     ff2:	80 93 6c 04 	sts	0x046C, r24
     ff6:	e0 91 6c 04 	lds	r30, 0x046C
     ffa:	e7 ff       	sbrs	r30, 7
     ffc:	e5 cf       	rjmp	.-54     	; 0xfc8 <main+0x75c>
     ffe:	42 c0       	rjmp	.+132    	; 0x1084 <main+0x818>
						lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
					}
				}
			}
			else if(mode==MODE_UART_BUF) {
    1000:	96 30       	cpi	r25, 0x06	; 6
    1002:	89 f5       	brne	.+98     	; 0x1066 <main+0x7fa>
				m=0;u=0;
    1004:	10 92 c8 01 	sts	0x01C8, r1
    1008:	10 92 73 05 	sts	0x0573, r1
    100c:	27 c0       	rjmp	.+78     	; 0x105c <main+0x7f0>
				while(m<ALL_N) {
					s=capture[m++]>>7;
    100e:	e2 2f       	mov	r30, r18
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e3 59       	subi	r30, 0x93	; 147
    1018:	fb 4f       	sbci	r31, 0xFB	; 251
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	88 0f       	add	r24, r24
    1020:	89 2f       	mov	r24, r25
    1022:	88 1f       	adc	r24, r24
    1024:	99 0b       	sbc	r25, r25
    1026:	91 95       	neg	r25
    1028:	80 93 6c 04 	sts	0x046C, r24
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	20 93 c8 01 	sts	0x01C8, r18
					if(s>=256) uart_communicate(254);
					else uart_communicate(s);
    1032:	0e 94 a2 00 	call	0x144	; 0x144 <uart_communicate>
					if(u_c==U_M) u++;
    1036:	80 91 6f 05 	lds	r24, 0x056F
    103a:	90 91 70 05 	lds	r25, 0x0570
    103e:	88 5e       	subi	r24, 0xE8	; 232
    1040:	93 40       	sbci	r25, 0x03	; 3
    1042:	29 f4       	brne	.+10     	; 0x104e <main+0x7e2>
    1044:	80 91 73 05 	lds	r24, 0x0573
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	80 93 73 05 	sts	0x0573, r24
					if(u>=10) m=ALL_N;
    104e:	80 91 73 05 	lds	r24, 0x0573
    1052:	8a 30       	cpi	r24, 0x0A	; 10
    1054:	18 f0       	brcs	.+6      	; 0x105c <main+0x7f0>
    1056:	e0 e8       	ldi	r30, 0x80	; 128
    1058:	e0 93 c8 01 	sts	0x01C8, r30
					}
				}
			}
			else if(mode==MODE_UART_BUF) {
				m=0;u=0;
				while(m<ALL_N) {
    105c:	20 91 c8 01 	lds	r18, 0x01C8
    1060:	27 ff       	sbrs	r18, 7
    1062:	d5 cf       	rjmp	.-86     	; 0x100e <main+0x7a2>
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <main+0x818>
					else uart_communicate(s);
					if(u_c==U_M) u++;
					if(u>=10) m=ALL_N;
				}
			}
			else if(mode==MODE_UART) {
    1066:	95 30       	cpi	r25, 0x05	; 5
    1068:	69 f4       	brne	.+26     	; 0x1084 <main+0x818>
				s=capture[ALL_N-1]>>7;
    106a:	80 91 6b 05 	lds	r24, 0x056B
    106e:	90 91 6c 05 	lds	r25, 0x056C
    1072:	88 0f       	add	r24, r24
    1074:	89 2f       	mov	r24, r25
    1076:	88 1f       	adc	r24, r24
    1078:	99 0b       	sbc	r25, r25
    107a:	91 95       	neg	r25
    107c:	80 93 6c 04 	sts	0x046C, r24
				if(s>=256) uart_communicate(254);
				else uart_communicate(s);
    1080:	0e 94 a2 00 	call	0x144	; 0x144 <uart_communicate>
			}
			
			TIMSK1&=~(1<<TOIE1);
    1084:	80 91 6f 00 	lds	r24, 0x006F
    1088:	8e 7f       	andi	r24, 0xFE	; 254
    108a:	80 93 6f 00 	sts	0x006F, r24
	
			//wait=(ovf*65536+TCNT1)%adc_period;
			
			wait=(ovf*65536+TCNT1);
    108e:	20 91 84 00 	lds	r18, 0x0084
    1092:	30 91 85 00 	lds	r19, 0x0085
    1096:	80 91 d3 01 	lds	r24, 0x01D3
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	6c 01       	movw	r12, r24
    10a2:	bb 24       	eor	r11, r11
    10a4:	aa 24       	eor	r10, r10
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	a2 0e       	add	r10, r18
    10ac:	b3 1e       	adc	r11, r19
    10ae:	c4 1e       	adc	r12, r20
    10b0:	d5 1e       	adc	r13, r21
    10b2:	a0 92 d6 01 	sts	0x01D6, r10
    10b6:	b0 92 d7 01 	sts	0x01D7, r11
    10ba:	c0 92 d8 01 	sts	0x01D8, r12
    10be:	d0 92 d9 01 	sts	0x01D9, r13
			if(maxwait<wait&&menu_state==-1) maxwait=wait+(adc_period-wait%adc_period);
    10c2:	80 91 da 01 	lds	r24, 0x01DA
    10c6:	90 91 db 01 	lds	r25, 0x01DB
    10ca:	a0 91 dc 01 	lds	r26, 0x01DC
    10ce:	b0 91 dd 01 	lds	r27, 0x01DD
    10d2:	8a 15       	cp	r24, r10
    10d4:	9b 05       	cpc	r25, r11
    10d6:	ac 05       	cpc	r26, r12
    10d8:	bd 05       	cpc	r27, r13
    10da:	20 f5       	brcc	.+72     	; 0x1124 <__stack+0x25>
    10dc:	80 91 c7 01 	lds	r24, 0x01C7
    10e0:	8f 3f       	cpi	r24, 0xFF	; 255
    10e2:	01 f5       	brne	.+64     	; 0x1124 <__stack+0x25>
    10e4:	e0 90 8a 00 	lds	r14, 0x008A
    10e8:	f0 90 8b 00 	lds	r15, 0x008B
    10ec:	20 91 8a 00 	lds	r18, 0x008A
    10f0:	30 91 8b 00 	lds	r19, 0x008B
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	ea 0c       	add	r14, r10
    10fa:	fb 1c       	adc	r15, r11
    10fc:	0c 1d       	adc	r16, r12
    10fe:	1d 1d       	adc	r17, r13
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	c6 01       	movw	r24, r12
    1106:	b5 01       	movw	r22, r10
    1108:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__udivmodsi4>
    110c:	e6 1a       	sub	r14, r22
    110e:	f7 0a       	sbc	r15, r23
    1110:	08 0b       	sbc	r16, r24
    1112:	19 0b       	sbc	r17, r25
    1114:	e0 92 da 01 	sts	0x01DA, r14
    1118:	f0 92 db 01 	sts	0x01DB, r15
    111c:	00 93 dc 01 	sts	0x01DC, r16
    1120:	10 93 dd 01 	sts	0x01DD, r17
			if(maxwait>wait&&menu_state==-1) {
    1124:	20 91 da 01 	lds	r18, 0x01DA
    1128:	30 91 db 01 	lds	r19, 0x01DB
    112c:	40 91 dc 01 	lds	r20, 0x01DC
    1130:	50 91 dd 01 	lds	r21, 0x01DD
    1134:	a0 90 d6 01 	lds	r10, 0x01D6
    1138:	b0 90 d7 01 	lds	r11, 0x01D7
    113c:	c0 90 d8 01 	lds	r12, 0x01D8
    1140:	d0 90 d9 01 	lds	r13, 0x01D9
    1144:	a2 16       	cp	r10, r18
    1146:	b3 06       	cpc	r11, r19
    1148:	c4 06       	cpc	r12, r20
    114a:	d5 06       	cpc	r13, r21
    114c:	08 f0       	brcs	.+2      	; 0x1150 <__stack+0x51>
    114e:	56 c0       	rjmp	.+172    	; 0x11fc <__stack+0xfd>
    1150:	80 91 c7 01 	lds	r24, 0x01C7
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	09 f0       	breq	.+2      	; 0x115a <__stack+0x5b>
    1158:	51 c0       	rjmp	.+162    	; 0x11fc <__stack+0xfd>
				wait=maxwait-wait;
    115a:	2a 19       	sub	r18, r10
    115c:	3b 09       	sbc	r19, r11
    115e:	4c 09       	sbc	r20, r12
    1160:	5d 09       	sbc	r21, r13
    1162:	20 93 d6 01 	sts	0x01D6, r18
    1166:	30 93 d7 01 	sts	0x01D7, r19
    116a:	40 93 d8 01 	sts	0x01D8, r20
    116e:	50 93 d9 01 	sts	0x01D9, r21
				TCNT1=0;
    1172:	10 92 85 00 	sts	0x0085, r1
    1176:	10 92 84 00 	sts	0x0084, r1
				OCR1A=wait%65536;
    117a:	30 93 89 00 	sts	0x0089, r19
    117e:	20 93 88 00 	sts	0x0088, r18
				ovf=(wait-OCR1A)/65536;
    1182:	80 91 88 00 	lds	r24, 0x0088
    1186:	90 91 89 00 	lds	r25, 0x0089
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	28 1b       	sub	r18, r24
    1190:	39 0b       	sbc	r19, r25
    1192:	4a 0b       	sbc	r20, r26
    1194:	5b 0b       	sbc	r21, r27
    1196:	9a 01       	movw	r18, r20
    1198:	44 27       	eor	r20, r20
    119a:	55 27       	eor	r21, r21
    119c:	20 93 d3 01 	sts	0x01D3, r18
				wait_ok=0;
    11a0:	10 92 d4 01 	sts	0x01D4, r1
				countdown=1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 d5 01 	sts	0x01D5, r24
				PORTA|=1<<7;
    11aa:	17 9a       	sbi	0x02, 7	; 2
				lcd_num_from_right(60,4,ovf);
    11ac:	8c e3       	ldi	r24, 0x3C	; 60
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	64 e0       	ldi	r22, 0x04	; 4
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	42 2f       	mov	r20, r18
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				lcd_num_from_right(60,5,OCR1A);
    11bc:	40 91 88 00 	lds	r20, 0x0088
    11c0:	50 91 89 00 	lds	r21, 0x0089
    11c4:	8c e3       	ldi	r24, 0x3C	; 60
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	65 e0       	ldi	r22, 0x05	; 5
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				lcd_num_from_right(127,5,wait);
    11d0:	40 91 d6 01 	lds	r20, 0x01D6
    11d4:	50 91 d7 01 	lds	r21, 0x01D7
    11d8:	8f e7       	ldi	r24, 0x7F	; 127
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	65 e0       	ldi	r22, 0x05	; 5
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				TIMSK1|=(1<<TOIE1)|(1<<OCIE1A);
    11e4:	80 91 6f 00 	lds	r24, 0x006F
    11e8:	83 60       	ori	r24, 0x03	; 3
    11ea:	80 93 6f 00 	sts	0x006F, r24
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <__stack+0xf3>
				while((TIMSK1&(1<<OCIE1A))) asm("nop");
    11f0:	00 00       	nop
    11f2:	80 91 6f 00 	lds	r24, 0x006F
    11f6:	81 fd       	sbrc	r24, 1
    11f8:	fb cf       	rjmp	.-10     	; 0x11f0 <__stack+0xf1>
				PORTA&=~(1<<7);
    11fa:	17 98       	cbi	0x02, 7	; 2
			}
			TCNT1=adc_period;
    11fc:	80 91 8a 00 	lds	r24, 0x008A
    1200:	90 91 8b 00 	lds	r25, 0x008B
    1204:	90 93 85 00 	sts	0x0085, r25
    1208:	80 93 84 00 	sts	0x0084, r24
			TIMSK1|=1<<OCIE1B;
    120c:	80 91 6f 00 	lds	r24, 0x006F
    1210:	84 60       	ori	r24, 0x04	; 4
    1212:	80 93 6f 00 	sts	0x006F, r24
			TIMSK0|=1<<TOIE0;
    1216:	80 91 6e 00 	lds	r24, 0x006E
    121a:	81 60       	ori	r24, 0x01	; 1
    121c:	80 93 6e 00 	sts	0x006E, r24
			current=0;
    1220:	10 92 cc 01 	sts	0x01CC, r1
		}
		asm("nop");
    1224:	00 00       	nop
    1226:	5b cb       	rjmp	.-2378   	; 0x8de <main+0x72>

00001228 <__vector_18>:
		if(mode!=MODE_UART) current++;
	}
}


ISR(TIMER0_OVF_vect) {
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	1f 93       	push	r17
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	14 e0       	ldi	r17, 0x04	; 4
    124e:	5b c0       	rjmp	.+182    	; 0x1306 <__vector_18+0xde>
	while(!(pause_state())&&menu_state==-1) {
		if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
    1250:	80 91 c5 01 	lds	r24, 0x01C5
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	11 f0       	breq	.+4      	; 0x125c <__vector_18+0x34>
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	31 f4       	brne	.+12     	; 0x1268 <__vector_18+0x40>
    125c:	8a e7       	ldi	r24, 0x7A	; 122
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	60 e4       	ldi	r22, 0x40	; 64
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    1268:	20 91 8a 00 	lds	r18, 0x008A
    126c:	30 91 8b 00 	lds	r19, 0x008B
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	7b e1       	ldi	r23, 0x1B	; 27
    1278:	87 eb       	ldi	r24, 0xB7	; 183
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    1280:	a4 e0       	ldi	r26, 0x04	; 4
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	37 95       	ror	r19
    1288:	27 95       	ror	r18
    128a:	aa 95       	dec	r26
    128c:	d1 f7       	brne	.-12     	; 0x1282 <__vector_18+0x5a>
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
    129c:	8f e7       	ldi	r24, 0x7F	; 127
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	65 e7       	ldi	r22, 0x75	; 117
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
		if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
    12a8:	80 91 c5 01 	lds	r24, 0x01C5
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <__vector_18+0x8c>
    12b0:	84 30       	cpi	r24, 0x04	; 4
    12b2:	31 f4       	brne	.+12     	; 0x12c0 <__vector_18+0x98>
    12b4:	8c eb       	ldi	r24, 0xBC	; 188
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    12c0:	20 91 8a 00 	lds	r18, 0x008A
    12c4:	30 91 8b 00 	lds	r19, 0x008B
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	60 e8       	ldi	r22, 0x80	; 128
    12ce:	7d e8       	ldi	r23, 0x8D	; 141
    12d0:	8b e5       	ldi	r24, 0x5B	; 91
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    12d8:	8f e3       	ldi	r24, 0x3F	; 63
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
		if(!top_state()&&top_state1) {
    12e6:	18 99       	sbic	0x03, 0	; 3
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <__vector_18+0xd4>
    12ea:	80 91 cd 01 	lds	r24, 0x01CD
    12ee:	88 23       	and	r24, r24
    12f0:	29 f0       	breq	.+10     	; 0x12fc <__vector_18+0xd4>
			menu_state=0;
    12f2:	10 92 c7 01 	sts	0x01C7, r1
			redraw_menu=1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 d2 01 	sts	0x01D2, r24
		}
		buttons_update();
    12fc:	0e 94 0a 03 	call	0x614	; 0x614 <buttons_update>
    1300:	81 2f       	mov	r24, r17
    1302:	8a 95       	dec	r24
    1304:	f1 f7       	brne	.-4      	; 0x1302 <__vector_18+0xda>
	}
}


ISR(TIMER0_OVF_vect) {
	while(!(pause_state())&&menu_state==-1) {
    1306:	1b 99       	sbic	0x03, 3	; 3
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <__vector_18+0xec>
    130a:	80 91 c7 01 	lds	r24, 0x01C7
    130e:	8f 3f       	cpi	r24, 0xFF	; 255
    1310:	09 f4       	brne	.+2      	; 0x1314 <__vector_18+0xec>
    1312:	9e cf       	rjmp	.-196    	; 0x1250 <__vector_18+0x28>
			redraw_menu=1;
		}
		buttons_update();
		delay_us(1);
	}
	if(menu_state==-1) {
    1314:	90 91 c7 01 	lds	r25, 0x01C7
    1318:	9f 3f       	cpi	r25, 0xFF	; 255
    131a:	09 f0       	breq	.+2      	; 0x131e <__vector_18+0xf6>
    131c:	fb c1       	rjmp	.+1014   	; 0x1714 <__vector_18+0x4ec>
		if(!right_state()&&right_state1) {
    131e:	19 99       	sbic	0x03, 1	; 3
    1320:	84 c0       	rjmp	.+264    	; 0x142a <__vector_18+0x202>
    1322:	80 91 cf 01 	lds	r24, 0x01CF
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <__vector_18+0x104>
    132a:	7f c0       	rjmp	.+254    	; 0x142a <__vector_18+0x202>
			incr_step(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX,adc_step);
    132c:	20 91 8a 00 	lds	r18, 0x008A
    1330:	30 91 8b 00 	lds	r19, 0x008B
    1334:	60 91 c6 01 	lds	r22, 0x01C6
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	86 1b       	sub	r24, r22
    1346:	91 09       	sbc	r25, r1
    1348:	a1 09       	sbc	r26, r1
    134a:	b1 09       	sbc	r27, r1
    134c:	82 17       	cp	r24, r18
    134e:	93 07       	cpc	r25, r19
    1350:	a4 07       	cpc	r26, r20
    1352:	b5 07       	cpc	r27, r21
    1354:	1c f4       	brge	.+6      	; 0x135c <__vector_18+0x134>
    1356:	88 e2       	ldi	r24, 0x28	; 40
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <__vector_18+0x140>
    135c:	80 91 8a 00 	lds	r24, 0x008A
    1360:	90 91 8b 00 	lds	r25, 0x008B
    1364:	86 0f       	add	r24, r22
    1366:	91 1d       	adc	r25, r1
    1368:	90 93 8b 00 	sts	0x008B, r25
    136c:	80 93 8a 00 	sts	0x008A, r24
			if(mode==MODE_SPECTRUM||mode==MODE_DUAL) {
    1370:	80 91 c5 01 	lds	r24, 0x01C5
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	19 f0       	breq	.+6      	; 0x137e <__vector_18+0x156>
    1378:	84 30       	cpi	r24, 0x04	; 4
    137a:	09 f0       	breq	.+2      	; 0x137e <__vector_18+0x156>
    137c:	b6 c2       	rjmp	.+1388   	; 0x18ea <__vector_18+0x6c2>
				fft_maxfreq();
    137e:	8a e7       	ldi	r24, 0x7A	; 122
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	60 e4       	ldi	r22, 0x40	; 64
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    138a:	20 91 8a 00 	lds	r18, 0x008A
    138e:	30 91 8b 00 	lds	r19, 0x008B
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	7b e1       	ldi	r23, 0x1B	; 27
    139a:	87 eb       	ldi	r24, 0xB7	; 183
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    13a2:	f4 e0       	ldi	r31, 0x04	; 4
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	37 95       	ror	r19
    13aa:	27 95       	ror	r18
    13ac:	fa 95       	dec	r31
    13ae:	d1 f7       	brne	.-12     	; 0x13a4 <__vector_18+0x17c>
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
    13be:	8f e7       	ldi	r24, 0x7F	; 127
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	65 e7       	ldi	r22, 0x75	; 117
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
				dfreq();
    13ca:	8c eb       	ldi	r24, 0xBC	; 188
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    13d6:	20 91 8a 00 	lds	r18, 0x008A
    13da:	30 91 8b 00 	lds	r19, 0x008B
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	60 e8       	ldi	r22, 0x80	; 128
    13e4:	7d e8       	ldi	r23, 0x8D	; 141
    13e6:	8b e5       	ldi	r24, 0x5B	; 91
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    13ee:	8f e3       	ldi	r24, 0x3F	; 63
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				maxwait=0;
    13fc:	10 92 da 01 	sts	0x01DA, r1
    1400:	10 92 db 01 	sts	0x01DB, r1
    1404:	10 92 dc 01 	sts	0x01DC, r1
    1408:	10 92 dd 01 	sts	0x01DD, r1
    140c:	28 ec       	ldi	r18, 0xC8	; 200
    140e:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1410:	48 eb       	ldi	r20, 0xB8	; 184
    1412:	5b e0       	ldi	r21, 0x0B	; 11
    1414:	03 c0       	rjmp	.+6      	; 0x141c <__vector_18+0x1f4>
    1416:	ca 01       	movw	r24, r20
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <__vector_18+0x1f0>
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	30 40       	sbci	r19, 0x00	; 0
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	2f 3f       	cpi	r18, 0xFF	; 255
    1424:	38 07       	cpc	r19, r24
    1426:	b9 f7       	brne	.-18     	; 0x1416 <__vector_18+0x1ee>
    1428:	60 c2       	rjmp	.+1216   	; 0x18ea <__vector_18+0x6c2>
				delay_ms(200);
			}
		}
		else if(!left_state()&&left_state1) {
    142a:	1a 99       	sbic	0x03, 2	; 3
    142c:	7c c0       	rjmp	.+248    	; 0x1526 <__vector_18+0x2fe>
    142e:	80 91 ce 01 	lds	r24, 0x01CE
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <__vector_18+0x210>
    1436:	77 c0       	rjmp	.+238    	; 0x1526 <__vector_18+0x2fe>
			decr_step(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX,adc_step);
    1438:	20 91 8a 00 	lds	r18, 0x008A
    143c:	30 91 8b 00 	lds	r19, 0x008B
    1440:	80 91 c6 01 	lds	r24, 0x01C6
    1444:	48 2f       	mov	r20, r24
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	ca 01       	movw	r24, r20
    144a:	88 96       	adiw	r24, 0x28	; 40
    144c:	28 17       	cp	r18, r24
    144e:	39 07       	cpc	r19, r25
    1450:	18 f4       	brcc	.+6      	; 0x1458 <__vector_18+0x230>
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <__vector_18+0x23c>
    1458:	80 91 8a 00 	lds	r24, 0x008A
    145c:	90 91 8b 00 	lds	r25, 0x008B
    1460:	84 1b       	sub	r24, r20
    1462:	95 0b       	sbc	r25, r21
    1464:	90 93 8b 00 	sts	0x008B, r25
    1468:	80 93 8a 00 	sts	0x008A, r24
			if(mode==MODE_SPECTRUM||mode==MODE_DUAL) {
    146c:	80 91 c5 01 	lds	r24, 0x01C5
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	19 f0       	breq	.+6      	; 0x147a <__vector_18+0x252>
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	09 f0       	breq	.+2      	; 0x147a <__vector_18+0x252>
    1478:	38 c2       	rjmp	.+1136   	; 0x18ea <__vector_18+0x6c2>
				fft_maxfreq();
    147a:	8a e7       	ldi	r24, 0x7A	; 122
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	60 e4       	ldi	r22, 0x40	; 64
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    1486:	20 91 8a 00 	lds	r18, 0x008A
    148a:	30 91 8b 00 	lds	r19, 0x008B
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	7b e1       	ldi	r23, 0x1B	; 27
    1496:	87 eb       	ldi	r24, 0xB7	; 183
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    149e:	e4 e0       	ldi	r30, 0x04	; 4
    14a0:	55 95       	asr	r21
    14a2:	47 95       	ror	r20
    14a4:	37 95       	ror	r19
    14a6:	27 95       	ror	r18
    14a8:	ea 95       	dec	r30
    14aa:	d1 f7       	brne	.-12     	; 0x14a0 <__vector_18+0x278>
    14ac:	80 e8       	ldi	r24, 0x80	; 128
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
    14ba:	8f e7       	ldi	r24, 0x7F	; 127
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	65 e7       	ldi	r22, 0x75	; 117
    14c0:	41 e0       	ldi	r20, 0x01	; 1
    14c2:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
				dfreq();
    14c6:	8c eb       	ldi	r24, 0xBC	; 188
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    14d2:	20 91 8a 00 	lds	r18, 0x008A
    14d6:	30 91 8b 00 	lds	r19, 0x008B
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	60 e8       	ldi	r22, 0x80	; 128
    14e0:	7d e8       	ldi	r23, 0x8D	; 141
    14e2:	8b e5       	ldi	r24, 0x5B	; 91
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    14ea:	8f e3       	ldi	r24, 0x3F	; 63
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				maxwait=0;
    14f8:	10 92 da 01 	sts	0x01DA, r1
    14fc:	10 92 db 01 	sts	0x01DB, r1
    1500:	10 92 dc 01 	sts	0x01DC, r1
    1504:	10 92 dd 01 	sts	0x01DD, r1
    1508:	28 ec       	ldi	r18, 0xC8	; 200
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	48 eb       	ldi	r20, 0xB8	; 184
    150e:	5b e0       	ldi	r21, 0x0B	; 11
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <__vector_18+0x2f0>
    1512:	ca 01       	movw	r24, r20
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <__vector_18+0x2ec>
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	30 40       	sbci	r19, 0x00	; 0
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	2f 3f       	cpi	r18, 0xFF	; 255
    1520:	38 07       	cpc	r19, r24
    1522:	b9 f7       	brne	.-18     	; 0x1512 <__vector_18+0x2ea>
    1524:	e2 c1       	rjmp	.+964    	; 0x18ea <__vector_18+0x6c2>
				delay_ms(200);
			}
		}
		else if(!up_state()&&up_state1) {
    1526:	1c 99       	sbic	0x03, 4	; 3
    1528:	75 c0       	rjmp	.+234    	; 0x1614 <__vector_18+0x3ec>
    152a:	80 91 d0 01 	lds	r24, 0x01D0
    152e:	88 23       	and	r24, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <__vector_18+0x30c>
    1532:	70 c0       	rjmp	.+224    	; 0x1614 <__vector_18+0x3ec>
			increment(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    1534:	80 91 8a 00 	lds	r24, 0x008A
    1538:	90 91 8b 00 	lds	r25, 0x008B
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	19 f4       	brne	.+6      	; 0x1548 <__vector_18+0x320>
    1542:	88 e2       	ldi	r24, 0x28	; 40
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <__vector_18+0x32a>
    1548:	80 91 8a 00 	lds	r24, 0x008A
    154c:	90 91 8b 00 	lds	r25, 0x008B
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	90 93 8b 00 	sts	0x008B, r25
    1556:	80 93 8a 00 	sts	0x008A, r24
			if(mode==MODE_SPECTRUM||mode==MODE_DUAL) {
    155a:	80 91 c5 01 	lds	r24, 0x01C5
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	19 f0       	breq	.+6      	; 0x1568 <__vector_18+0x340>
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	09 f0       	breq	.+2      	; 0x1568 <__vector_18+0x340>
    1566:	c1 c1       	rjmp	.+898    	; 0x18ea <__vector_18+0x6c2>
				fft_maxfreq();
    1568:	8a e7       	ldi	r24, 0x7A	; 122
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	60 e4       	ldi	r22, 0x40	; 64
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    1574:	20 91 8a 00 	lds	r18, 0x008A
    1578:	30 91 8b 00 	lds	r19, 0x008B
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	7b e1       	ldi	r23, 0x1B	; 27
    1584:	87 eb       	ldi	r24, 0xB7	; 183
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    158c:	74 e0       	ldi	r23, 0x04	; 4
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	37 95       	ror	r19
    1594:	27 95       	ror	r18
    1596:	7a 95       	dec	r23
    1598:	d1 f7       	brne	.-12     	; 0x158e <__vector_18+0x366>
    159a:	80 e8       	ldi	r24, 0x80	; 128
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
    15a8:	8f e7       	ldi	r24, 0x7F	; 127
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	65 e7       	ldi	r22, 0x75	; 117
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
				dfreq();
    15b4:	8c eb       	ldi	r24, 0xBC	; 188
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    15c0:	20 91 8a 00 	lds	r18, 0x008A
    15c4:	30 91 8b 00 	lds	r19, 0x008B
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	60 e8       	ldi	r22, 0x80	; 128
    15ce:	7d e8       	ldi	r23, 0x8D	; 141
    15d0:	8b e5       	ldi	r24, 0x5B	; 91
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    15d8:	8f e3       	ldi	r24, 0x3F	; 63
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				maxwait=0;
    15e6:	10 92 da 01 	sts	0x01DA, r1
    15ea:	10 92 db 01 	sts	0x01DB, r1
    15ee:	10 92 dc 01 	sts	0x01DC, r1
    15f2:	10 92 dd 01 	sts	0x01DD, r1
    15f6:	28 ec       	ldi	r18, 0xC8	; 200
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	48 eb       	ldi	r20, 0xB8	; 184
    15fc:	5b e0       	ldi	r21, 0x0B	; 11
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <__vector_18+0x3de>
    1600:	ca 01       	movw	r24, r20
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <__vector_18+0x3da>
    1606:	21 50       	subi	r18, 0x01	; 1
    1608:	30 40       	sbci	r19, 0x00	; 0
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	2f 3f       	cpi	r18, 0xFF	; 255
    160e:	38 07       	cpc	r19, r24
    1610:	b9 f7       	brne	.-18     	; 0x1600 <__vector_18+0x3d8>
    1612:	6b c1       	rjmp	.+726    	; 0x18ea <__vector_18+0x6c2>
				delay_ms(200);
			}
		}
		else if(!down_state()&&down_state1) {
    1614:	1d 99       	sbic	0x03, 5	; 3
    1616:	74 c0       	rjmp	.+232    	; 0x1700 <__vector_18+0x4d8>
    1618:	80 91 d1 01 	lds	r24, 0x01D1
    161c:	88 23       	and	r24, r24
    161e:	09 f4       	brne	.+2      	; 0x1622 <__vector_18+0x3fa>
    1620:	6f c0       	rjmp	.+222    	; 0x1700 <__vector_18+0x4d8>
			decrement(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    1622:	80 91 8a 00 	lds	r24, 0x008A
    1626:	90 91 8b 00 	lds	r25, 0x008B
    162a:	88 97       	sbiw	r24, 0x28	; 40
    162c:	19 f4       	brne	.+6      	; 0x1634 <__vector_18+0x40c>
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	9f ef       	ldi	r25, 0xFF	; 255
    1632:	05 c0       	rjmp	.+10     	; 0x163e <__vector_18+0x416>
    1634:	80 91 8a 00 	lds	r24, 0x008A
    1638:	90 91 8b 00 	lds	r25, 0x008B
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	90 93 8b 00 	sts	0x008B, r25
    1642:	80 93 8a 00 	sts	0x008A, r24
			if(mode==MODE_SPECTRUM||mode==MODE_DUAL) {
    1646:	80 91 c5 01 	lds	r24, 0x01C5
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	19 f0       	breq	.+6      	; 0x1654 <__vector_18+0x42c>
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	09 f0       	breq	.+2      	; 0x1654 <__vector_18+0x42c>
    1652:	4b c1       	rjmp	.+662    	; 0x18ea <__vector_18+0x6c2>
				fft_maxfreq();
    1654:	8a e7       	ldi	r24, 0x7A	; 122
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	60 e4       	ldi	r22, 0x40	; 64
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    1660:	20 91 8a 00 	lds	r18, 0x008A
    1664:	30 91 8b 00 	lds	r19, 0x008B
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	7b e1       	ldi	r23, 0x1B	; 27
    1670:	87 eb       	ldi	r24, 0xB7	; 183
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    1678:	64 e0       	ldi	r22, 0x04	; 4
    167a:	55 95       	asr	r21
    167c:	47 95       	ror	r20
    167e:	37 95       	ror	r19
    1680:	27 95       	ror	r18
    1682:	6a 95       	dec	r22
    1684:	d1 f7       	brne	.-12     	; 0x167a <__vector_18+0x452>
    1686:	80 e8       	ldi	r24, 0x80	; 128
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
    1694:	8f e7       	ldi	r24, 0x7F	; 127
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	65 e7       	ldi	r22, 0x75	; 117
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
				dfreq();
    16a0:	8c eb       	ldi	r24, 0xBC	; 188
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_str>
    16ac:	20 91 8a 00 	lds	r18, 0x008A
    16b0:	30 91 8b 00 	lds	r19, 0x008B
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	60 e8       	ldi	r22, 0x80	; 128
    16ba:	7d e8       	ldi	r23, 0x8D	; 141
    16bc:	8b e5       	ldi	r24, 0x5B	; 91
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
    16c4:	8f e3       	ldi	r24, 0x3F	; 63
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <lcd_num_from_right>
				maxwait=0;
    16d2:	10 92 da 01 	sts	0x01DA, r1
    16d6:	10 92 db 01 	sts	0x01DB, r1
    16da:	10 92 dc 01 	sts	0x01DC, r1
    16de:	10 92 dd 01 	sts	0x01DD, r1
    16e2:	28 ec       	ldi	r18, 0xC8	; 200
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	48 eb       	ldi	r20, 0xB8	; 184
    16e8:	5b e0       	ldi	r21, 0x0B	; 11
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <__vector_18+0x4ca>
    16ec:	ca 01       	movw	r24, r20
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <__vector_18+0x4c6>
    16f2:	21 50       	subi	r18, 0x01	; 1
    16f4:	30 40       	sbci	r19, 0x00	; 0
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	2f 3f       	cpi	r18, 0xFF	; 255
    16fa:	38 07       	cpc	r19, r24
    16fc:	b9 f7       	brne	.-18     	; 0x16ec <__vector_18+0x4c4>
    16fe:	f5 c0       	rjmp	.+490    	; 0x18ea <__vector_18+0x6c2>
				delay_ms(200);
			}
		}
		else if(!top_state()&&top_state1) {
    1700:	18 99       	sbic	0x03, 0	; 3
    1702:	f3 c0       	rjmp	.+486    	; 0x18ea <__vector_18+0x6c2>
    1704:	80 91 cd 01 	lds	r24, 0x01CD
    1708:	88 23       	and	r24, r24
    170a:	09 f4       	brne	.+2      	; 0x170e <__vector_18+0x4e6>
    170c:	ee c0       	rjmp	.+476    	; 0x18ea <__vector_18+0x6c2>
			menu_state=0;
    170e:	10 92 c7 01 	sts	0x01C7, r1
    1712:	e8 c0       	rjmp	.+464    	; 0x18e4 <__vector_18+0x6bc>
			redraw_menu=1;
		}
	}
	else if(menu_state>MENU_MAX) {
    1714:	96 30       	cpi	r25, 0x06	; 6
    1716:	0c f4       	brge	.+2      	; 0x171a <__vector_18+0x4f2>
    1718:	a2 c0       	rjmp	.+324    	; 0x185e <__vector_18+0x636>
		if(!top_state()&&(top_state1)) {
    171a:	18 99       	sbic	0x03, 0	; 3
    171c:	08 c0       	rjmp	.+16     	; 0x172e <__vector_18+0x506>
    171e:	80 91 cd 01 	lds	r24, 0x01CD
    1722:	88 23       	and	r24, r24
    1724:	21 f0       	breq	.+8      	; 0x172e <__vector_18+0x506>
			menu_state-=MENU_MAX;
    1726:	95 50       	subi	r25, 0x05	; 5
    1728:	90 93 c7 01 	sts	0x01C7, r25
    172c:	db c0       	rjmp	.+438    	; 0x18e4 <__vector_18+0x6bc>
			redraw_menu=1;
		}
		else if(menu_state==(MENU_MAX+MENU_MODE)) {
    172e:	98 30       	cpi	r25, 0x08	; 8
    1730:	29 f5       	brne	.+74     	; 0x177c <__vector_18+0x554>
			if(!right_state()&&right_state1) {
    1732:	19 99       	sbic	0x03, 1	; 3
    1734:	0c c0       	rjmp	.+24     	; 0x174e <__vector_18+0x526>
    1736:	80 91 cf 01 	lds	r24, 0x01CF
    173a:	88 23       	and	r24, r24
    173c:	41 f0       	breq	.+16     	; 0x174e <__vector_18+0x526>
				increment(mode,MODE_MIN,MODE_MAX);
    173e:	80 91 c5 01 	lds	r24, 0x01C5
    1742:	86 30       	cpi	r24, 0x06	; 6
    1744:	11 f4       	brne	.+4      	; 0x174a <__vector_18+0x522>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	10 c0       	rjmp	.+32     	; 0x176a <__vector_18+0x542>
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	0e c0       	rjmp	.+28     	; 0x176a <__vector_18+0x542>
				if(mode!=MODE_XY) ADMUX=0b01100000;
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    174e:	1a 99       	sbic	0x03, 2	; 3
    1750:	cc c0       	rjmp	.+408    	; 0x18ea <__vector_18+0x6c2>
    1752:	80 91 ce 01 	lds	r24, 0x01CE
    1756:	88 23       	and	r24, r24
    1758:	09 f4       	brne	.+2      	; 0x175c <__vector_18+0x534>
    175a:	c7 c0       	rjmp	.+398    	; 0x18ea <__vector_18+0x6c2>
				decrement(mode,MODE_MIN,MODE_MAX);
    175c:	80 91 c5 01 	lds	r24, 0x01C5
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	11 f4       	brne	.+4      	; 0x1768 <__vector_18+0x540>
    1764:	86 e0       	ldi	r24, 0x06	; 6
    1766:	01 c0       	rjmp	.+2      	; 0x176a <__vector_18+0x542>
    1768:	81 50       	subi	r24, 0x01	; 1
    176a:	80 93 c5 01 	sts	0x01C5, r24
				if(mode!=MODE_XY) ADMUX=0b01100000;
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	09 f4       	brne	.+2      	; 0x1774 <__vector_18+0x54c>
    1772:	b8 c0       	rjmp	.+368    	; 0x18e4 <__vector_18+0x6bc>
    1774:	80 e6       	ldi	r24, 0x60	; 96
    1776:	80 93 7c 00 	sts	0x007C, r24
    177a:	b4 c0       	rjmp	.+360    	; 0x18e4 <__vector_18+0x6bc>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCDELAY)) {
    177c:	96 30       	cpi	r25, 0x06	; 6
    177e:	81 f5       	brne	.+96     	; 0x17e0 <__vector_18+0x5b8>
			if(!right_state()&&right_state1) {
    1780:	19 99       	sbic	0x03, 1	; 3
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <__vector_18+0x584>
    1784:	80 91 cf 01 	lds	r24, 0x01CF
    1788:	88 23       	and	r24, r24
    178a:	81 f0       	breq	.+32     	; 0x17ac <__vector_18+0x584>
				increment(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    178c:	80 91 8a 00 	lds	r24, 0x008A
    1790:	90 91 8b 00 	lds	r25, 0x008B
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	19 f4       	brne	.+6      	; 0x17a0 <__vector_18+0x578>
    179a:	88 e2       	ldi	r24, 0x28	; 40
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	1b c0       	rjmp	.+54     	; 0x17d6 <__vector_18+0x5ae>
    17a0:	80 91 8a 00 	lds	r24, 0x008A
    17a4:	90 91 8b 00 	lds	r25, 0x008B
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	15 c0       	rjmp	.+42     	; 0x17d6 <__vector_18+0x5ae>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    17ac:	1a 99       	sbic	0x03, 2	; 3
    17ae:	9d c0       	rjmp	.+314    	; 0x18ea <__vector_18+0x6c2>
    17b0:	80 91 ce 01 	lds	r24, 0x01CE
    17b4:	88 23       	and	r24, r24
    17b6:	09 f4       	brne	.+2      	; 0x17ba <__vector_18+0x592>
    17b8:	98 c0       	rjmp	.+304    	; 0x18ea <__vector_18+0x6c2>
				decrement(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    17ba:	80 91 8a 00 	lds	r24, 0x008A
    17be:	90 91 8b 00 	lds	r25, 0x008B
    17c2:	88 97       	sbiw	r24, 0x28	; 40
    17c4:	19 f4       	brne	.+6      	; 0x17cc <__vector_18+0x5a4>
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <__vector_18+0x5ae>
    17cc:	80 91 8a 00 	lds	r24, 0x008A
    17d0:	90 91 8b 00 	lds	r25, 0x008B
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	90 93 8b 00 	sts	0x008B, r25
    17da:	80 93 8a 00 	sts	0x008A, r24
    17de:	82 c0       	rjmp	.+260    	; 0x18e4 <__vector_18+0x6bc>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCSTEP)) {
    17e0:	97 30       	cpi	r25, 0x07	; 7
    17e2:	d9 f4       	brne	.+54     	; 0x181a <__vector_18+0x5f2>
			if(!right_state()&&right_state1) {
    17e4:	19 99       	sbic	0x03, 1	; 3
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <__vector_18+0x5d0>
    17e8:	80 91 cf 01 	lds	r24, 0x01CF
    17ec:	88 23       	and	r24, r24
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <__vector_18+0x5d0>
				increment(adc_step,ADC_STEP_MIN,ADC_PERIOD_MAX);
    17f0:	80 91 c6 01 	lds	r24, 0x01C6
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <__vector_18+0x5ec>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    17f8:	1a 99       	sbic	0x03, 2	; 3
    17fa:	77 c0       	rjmp	.+238    	; 0x18ea <__vector_18+0x6c2>
    17fc:	80 91 ce 01 	lds	r24, 0x01CE
    1800:	88 23       	and	r24, r24
    1802:	09 f4       	brne	.+2      	; 0x1806 <__vector_18+0x5de>
    1804:	72 c0       	rjmp	.+228    	; 0x18ea <__vector_18+0x6c2>
				decrement(adc_step,ADC_STEP_MIN,ADC_PERIOD_MAX);
    1806:	80 91 c6 01 	lds	r24, 0x01C6
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	11 f4       	brne	.+4      	; 0x1812 <__vector_18+0x5ea>
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <__vector_18+0x5ec>
    1812:	81 50       	subi	r24, 0x01	; 1
    1814:	80 93 c6 01 	sts	0x01C6, r24
    1818:	65 c0       	rjmp	.+202    	; 0x18e4 <__vector_18+0x6bc>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_LCDSKIP)) {
    181a:	99 30       	cpi	r25, 0x09	; 9
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_18+0x5f8>
    181e:	65 c0       	rjmp	.+202    	; 0x18ea <__vector_18+0x6c2>
			if(!right_state()&&right_state1) {
    1820:	19 99       	sbic	0x03, 1	; 3
    1822:	0c c0       	rjmp	.+24     	; 0x183c <__vector_18+0x614>
    1824:	80 91 cf 01 	lds	r24, 0x01CF
    1828:	88 23       	and	r24, r24
    182a:	41 f0       	breq	.+16     	; 0x183c <__vector_18+0x614>
				increment(lcd_skip,LCD_SKIP_MIN,LCD_SKIP_MAX);
    182c:	80 91 c9 01 	lds	r24, 0x01C9
    1830:	8f 3f       	cpi	r24, 0xFF	; 255
    1832:	11 f4       	brne	.+4      	; 0x1838 <__vector_18+0x610>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	10 c0       	rjmp	.+32     	; 0x1858 <__vector_18+0x630>
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <__vector_18+0x630>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    183c:	1a 99       	sbic	0x03, 2	; 3
    183e:	55 c0       	rjmp	.+170    	; 0x18ea <__vector_18+0x6c2>
    1840:	80 91 ce 01 	lds	r24, 0x01CE
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <__vector_18+0x622>
    1848:	50 c0       	rjmp	.+160    	; 0x18ea <__vector_18+0x6c2>
				decrement(lcd_skip,LCD_SKIP_MIN,LCD_SKIP_MAX);
    184a:	80 91 c9 01 	lds	r24, 0x01C9
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	11 f4       	brne	.+4      	; 0x1856 <__vector_18+0x62e>
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <__vector_18+0x630>
    1856:	81 50       	subi	r24, 0x01	; 1
    1858:	80 93 c9 01 	sts	0x01C9, r24
    185c:	43 c0       	rjmp	.+134    	; 0x18e4 <__vector_18+0x6bc>
				redraw_menu=1;
			}
		}
	}
	else {
		if(!right_state()&&right_state1) {
    185e:	19 99       	sbic	0x03, 1	; 3
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <__vector_18+0x658>
    1862:	80 91 cf 01 	lds	r24, 0x01CF
    1866:	88 23       	and	r24, r24
    1868:	59 f0       	breq	.+22     	; 0x1880 <__vector_18+0x658>
			menu_state=(menu_state==MENU_MAX)?0:menu_state+1;
    186a:	95 30       	cpi	r25, 0x05	; 5
    186c:	11 f4       	brne	.+4      	; 0x1872 <__vector_18+0x64a>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <__vector_18+0x64e>
    1872:	89 2f       	mov	r24, r25
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 93 c7 01 	sts	0x01C7, r24
			redraw_menu=1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	80 93 d2 01 	sts	0x01D2, r24
		}
		if(!left_state()&&left_state1) {
    1880:	1a 99       	sbic	0x03, 2	; 3
    1882:	10 c0       	rjmp	.+32     	; 0x18a4 <__vector_18+0x67c>
    1884:	80 91 ce 01 	lds	r24, 0x01CE
    1888:	88 23       	and	r24, r24
    188a:	61 f0       	breq	.+24     	; 0x18a4 <__vector_18+0x67c>
			menu_state=menu_state?menu_state-1:MENU_MAX;
    188c:	80 91 c7 01 	lds	r24, 0x01C7
    1890:	88 23       	and	r24, r24
    1892:	11 f4       	brne	.+4      	; 0x1898 <__vector_18+0x670>
    1894:	85 e0       	ldi	r24, 0x05	; 5
    1896:	01 c0       	rjmp	.+2      	; 0x189a <__vector_18+0x672>
    1898:	81 50       	subi	r24, 0x01	; 1
    189a:	80 93 c7 01 	sts	0x01C7, r24
			redraw_menu=1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 93 d2 01 	sts	0x01D2, r24
		}
		if(!top_state()&&(top_state1)) {
    18a4:	18 99       	sbic	0x03, 0	; 3
    18a6:	21 c0       	rjmp	.+66     	; 0x18ea <__vector_18+0x6c2>
    18a8:	80 91 cd 01 	lds	r24, 0x01CD
    18ac:	88 23       	and	r24, r24
    18ae:	e9 f0       	breq	.+58     	; 0x18ea <__vector_18+0x6c2>
			if(menu_state==0) {
    18b0:	80 91 c7 01 	lds	r24, 0x01C7
    18b4:	88 23       	and	r24, r24
    18b6:	89 f4       	brne	.+34     	; 0x18da <__vector_18+0x6b2>
				maxwait=0;
    18b8:	10 92 da 01 	sts	0x01DA, r1
    18bc:	10 92 db 01 	sts	0x01DB, r1
    18c0:	10 92 dc 01 	sts	0x01DC, r1
    18c4:	10 92 dd 01 	sts	0x01DD, r1
				menu_state=-1;
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	80 93 c7 01 	sts	0x01C7, r24
				redraw_menu=1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	80 93 d2 01 	sts	0x01D2, r24
				top_state1=0;
    18d4:	10 92 cd 01 	sts	0x01CD, r1
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <__vector_18+0x6c2>
			}
			else {
				menu_state+=MENU_MAX;
    18da:	8b 5f       	subi	r24, 0xFB	; 251
    18dc:	80 93 c7 01 	sts	0x01C7, r24
				top_state1=0;
    18e0:	10 92 cd 01 	sts	0x01CD, r1
				redraw_menu=1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	80 93 d2 01 	sts	0x01D2, r24
			}
		}
	}
	buttons_update();
    18ea:	0e 94 0a 03 	call	0x614	; 0x614 <buttons_update>
}
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	1f 91       	pop	r17
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <tbl_window>:
    1912:	3d 0a       	sbc	r3, r29
    1914:	4f 0a       	sbc	r4, r31
    1916:	85 0a       	sbc	r8, r21
    1918:	e0 0a       	sbc	r14, r16
    191a:	5e 0b       	sbc	r21, r30
    191c:	01 0c       	add	r0, r1
    191e:	c6 0c       	add	r12, r6
    1920:	ae 0d       	add	r26, r14
    1922:	b8 0e       	add	r11, r24
    1924:	e4 0f       	add	r30, r20
    1926:	31 11       	cpse	r19, r1
    1928:	9d 12       	cpse	r9, r29
    192a:	29 14       	cp	r2, r9
    192c:	d3 15       	cp	r29, r3
    192e:	9a 17       	cp	r25, r26
    1930:	7d 19       	sub	r23, r13
    1932:	7c 1b       	sub	r23, r28
    1934:	93 1d       	adc	r25, r3
    1936:	c4 1f       	adc	r28, r20
    1938:	0b 22       	and	r0, r27
    193a:	68 24       	eor	r6, r8
    193c:	d9 26       	eor	r13, r25
    193e:	5c 29       	or	r21, r12
    1940:	f1 2b       	or	r31, r17
    1942:	96 2e       	mov	r9, r22
    1944:	48 31       	cpi	r20, 0x18	; 24
    1946:	06 34       	cpi	r16, 0x46	; 70
    1948:	cf 36       	cpi	r28, 0x6F	; 111
    194a:	a1 39       	cpi	r26, 0x91	; 145
    194c:	7a 3c       	cpi	r23, 0xCA	; 202
    194e:	58 3f       	cpi	r21, 0xF8	; 248
    1950:	3a 42       	sbci	r19, 0x2A	; 42
    1952:	1e 45       	sbci	r17, 0x5E	; 94
    1954:	01 48       	sbci	r16, 0x81	; 129
    1956:	e3 4a       	sbci	r30, 0xA3	; 163
    1958:	c1 4d       	sbci	r28, 0xD1	; 209
    195a:	9a 50       	subi	r25, 0x0A	; 10
    195c:	6c 53       	subi	r22, 0x3C	; 60
    195e:	35 56       	subi	r19, 0x65	; 101
    1960:	f4 58       	subi	r31, 0x84	; 132
    1962:	a6 5b       	subi	r26, 0xB6	; 182
    1964:	4a 5e       	subi	r20, 0xEA	; 234
    1966:	df 60       	ori	r29, 0x0F	; 15
    1968:	63 63       	ori	r22, 0x33	; 51
    196a:	d4 65       	ori	r29, 0x54	; 84
    196c:	31 68       	ori	r19, 0x81	; 129
    196e:	78 6a       	ori	r23, 0xA8	; 168
    1970:	a8 6c       	ori	r26, 0xC8	; 200
    1972:	c0 6e       	ori	r28, 0xE0	; 224
    1974:	be 70       	andi	r27, 0x0E	; 14
    1976:	a1 72       	andi	r26, 0x21	; 33
    1978:	68 74       	andi	r22, 0x48	; 72
    197a:	12 76       	andi	r17, 0x62	; 98
    197c:	9e 77       	andi	r25, 0x7E	; 126
    197e:	0b 79       	andi	r16, 0x9B	; 155
    1980:	57 7a       	andi	r21, 0xA7	; 167
    1982:	83 7b       	andi	r24, 0xB3	; 179
    1984:	8d 7c       	andi	r24, 0xCD	; 205
    1986:	75 7d       	andi	r23, 0xD5	; 213
    1988:	3b 7e       	andi	r19, 0xEB	; 235
    198a:	dd 7e       	andi	r29, 0xED	; 237
    198c:	5b 7f       	andi	r21, 0xFB	; 251
    198e:	b6 7f       	andi	r27, 0xF6	; 246
    1990:	ec 7f       	andi	r30, 0xFC	; 252
    1992:	fe 7f       	andi	r31, 0xFE	; 254
    1994:	ec 7f       	andi	r30, 0xFC	; 252
    1996:	b6 7f       	andi	r27, 0xF6	; 246
    1998:	5b 7f       	andi	r21, 0xFB	; 251
    199a:	dd 7e       	andi	r29, 0xED	; 237
    199c:	3b 7e       	andi	r19, 0xEB	; 235
    199e:	75 7d       	andi	r23, 0xD5	; 213
    19a0:	8d 7c       	andi	r24, 0xCD	; 205
    19a2:	83 7b       	andi	r24, 0xB3	; 179
    19a4:	57 7a       	andi	r21, 0xA7	; 167
    19a6:	0b 79       	andi	r16, 0x9B	; 155
    19a8:	9e 77       	andi	r25, 0x7E	; 126
    19aa:	12 76       	andi	r17, 0x62	; 98
    19ac:	68 74       	andi	r22, 0x48	; 72
    19ae:	a1 72       	andi	r26, 0x21	; 33
    19b0:	be 70       	andi	r27, 0x0E	; 14
    19b2:	c0 6e       	ori	r28, 0xE0	; 224
    19b4:	a8 6c       	ori	r26, 0xC8	; 200
    19b6:	78 6a       	ori	r23, 0xA8	; 168
    19b8:	31 68       	ori	r19, 0x81	; 129
    19ba:	d4 65       	ori	r29, 0x54	; 84
    19bc:	63 63       	ori	r22, 0x33	; 51
    19be:	df 60       	ori	r29, 0x0F	; 15
    19c0:	4a 5e       	subi	r20, 0xEA	; 234
    19c2:	a6 5b       	subi	r26, 0xB6	; 182
    19c4:	f4 58       	subi	r31, 0x84	; 132
    19c6:	35 56       	subi	r19, 0x65	; 101
    19c8:	6c 53       	subi	r22, 0x3C	; 60
    19ca:	9a 50       	subi	r25, 0x0A	; 10
    19cc:	c1 4d       	sbci	r28, 0xD1	; 209
    19ce:	e3 4a       	sbci	r30, 0xA3	; 163
    19d0:	01 48       	sbci	r16, 0x81	; 129
    19d2:	1e 45       	sbci	r17, 0x5E	; 94
    19d4:	3a 42       	sbci	r19, 0x2A	; 42
    19d6:	58 3f       	cpi	r21, 0xF8	; 248
    19d8:	7a 3c       	cpi	r23, 0xCA	; 202
    19da:	a1 39       	cpi	r26, 0x91	; 145
    19dc:	cf 36       	cpi	r28, 0x6F	; 111
    19de:	06 34       	cpi	r16, 0x46	; 70
    19e0:	48 31       	cpi	r20, 0x18	; 24
    19e2:	96 2e       	mov	r9, r22
    19e4:	f1 2b       	or	r31, r17
    19e6:	5c 29       	or	r21, r12
    19e8:	d9 26       	eor	r13, r25
    19ea:	68 24       	eor	r6, r8
    19ec:	0b 22       	and	r0, r27
    19ee:	c4 1f       	adc	r28, r20
    19f0:	93 1d       	adc	r25, r3
    19f2:	7c 1b       	sub	r23, r28
    19f4:	7e 19       	sub	r23, r14
    19f6:	9a 17       	cp	r25, r26
    19f8:	d3 15       	cp	r29, r3
    19fa:	29 14       	cp	r2, r9
    19fc:	9d 12       	cpse	r9, r29
    19fe:	31 11       	cpse	r19, r1
    1a00:	e4 0f       	add	r30, r20
    1a02:	b8 0e       	add	r11, r24
    1a04:	ae 0d       	add	r26, r14
    1a06:	c6 0c       	add	r12, r6
    1a08:	01 0c       	add	r0, r1
    1a0a:	5e 0b       	sbc	r21, r30
    1a0c:	e0 0a       	sbc	r14, r16
    1a0e:	85 0a       	sbc	r8, r21
    1a10:	4f 0a       	sbc	r4, r31

00001a12 <tbl_cos_sin>:
    1a12:	ff 7f       	andi	r31, 0xFF	; 255
    1a14:	00 00       	nop
    1a16:	d7 7f       	andi	r29, 0xF7	; 247
    1a18:	47 06       	cpc	r4, r23
    1a1a:	61 7f       	andi	r22, 0xF1	; 241
    1a1c:	8b 0c       	add	r8, r11
    1a1e:	9c 7e       	andi	r25, 0xEC	; 236
    1a20:	c7 12       	cpse	r12, r23
    1a22:	89 7d       	andi	r24, 0xD9	; 217
    1a24:	f8 18       	sub	r15, r8
    1a26:	29 7c       	andi	r18, 0xC9	; 201
    1a28:	19 1f       	adc	r17, r25
    1a2a:	7c 7a       	andi	r23, 0xAC	; 172
    1a2c:	27 25       	eor	r18, r7
    1a2e:	83 78       	andi	r24, 0x83	; 131
    1a30:	1e 2b       	or	r17, r30
    1a32:	40 76       	andi	r20, 0x60	; 96
    1a34:	fb 30       	cpi	r31, 0x0B	; 11
    1a36:	b5 73       	andi	r27, 0x35	; 53
    1a38:	b9 36       	cpi	r27, 0x69	; 105
    1a3a:	e1 70       	andi	r30, 0x01	; 1
    1a3c:	56 3c       	cpi	r21, 0xC6	; 198
    1a3e:	c9 6d       	ori	r28, 0xD9	; 217
    1a40:	cd 41       	sbci	r28, 0x1D	; 29
    1a42:	6c 6a       	ori	r22, 0xAC	; 172
    1a44:	1c 47       	sbci	r17, 0x7C	; 124
    1a46:	ce 66       	ori	r28, 0x6E	; 110
    1a48:	3f 4c       	sbci	r19, 0xCF	; 207
    1a4a:	f1 62       	ori	r31, 0x21	; 33
    1a4c:	33 51       	subi	r19, 0x13	; 19
    1a4e:	d6 5e       	subi	r29, 0xE6	; 230
    1a50:	f4 55       	subi	r31, 0x54	; 84
    1a52:	81 5a       	subi	r24, 0xA1	; 161
    1a54:	81 5a       	subi	r24, 0xA1	; 161
    1a56:	f4 55       	subi	r31, 0x54	; 84
    1a58:	d6 5e       	subi	r29, 0xE6	; 230
    1a5a:	33 51       	subi	r19, 0x13	; 19
    1a5c:	f1 62       	ori	r31, 0x21	; 33
    1a5e:	3f 4c       	sbci	r19, 0xCF	; 207
    1a60:	ce 66       	ori	r28, 0x6E	; 110
    1a62:	1c 47       	sbci	r17, 0x7C	; 124
    1a64:	6c 6a       	ori	r22, 0xAC	; 172
    1a66:	cd 41       	sbci	r28, 0x1D	; 29
    1a68:	c9 6d       	ori	r28, 0xD9	; 217
    1a6a:	56 3c       	cpi	r21, 0xC6	; 198
    1a6c:	e1 70       	andi	r30, 0x01	; 1
    1a6e:	b9 36       	cpi	r27, 0x69	; 105
    1a70:	b5 73       	andi	r27, 0x35	; 53
    1a72:	fb 30       	cpi	r31, 0x0B	; 11
    1a74:	40 76       	andi	r20, 0x60	; 96
    1a76:	1e 2b       	or	r17, r30
    1a78:	83 78       	andi	r24, 0x83	; 131
    1a7a:	27 25       	eor	r18, r7
    1a7c:	7c 7a       	andi	r23, 0xAC	; 172
    1a7e:	19 1f       	adc	r17, r25
    1a80:	29 7c       	andi	r18, 0xC9	; 201
    1a82:	f8 18       	sub	r15, r8
    1a84:	89 7d       	andi	r24, 0xD9	; 217
    1a86:	c7 12       	cpse	r12, r23
    1a88:	9c 7e       	andi	r25, 0xEC	; 236
    1a8a:	8b 0c       	add	r8, r11
    1a8c:	61 7f       	andi	r22, 0xF1	; 241
    1a8e:	47 06       	cpc	r4, r23
    1a90:	d7 7f       	andi	r29, 0xF7	; 247
    1a92:	00 00       	nop
    1a94:	fe 7f       	andi	r31, 0xFE	; 254
    1a96:	b9 f9       	.word	0xf9b9	; ????
    1a98:	d7 7f       	andi	r29, 0xF7	; 247
    1a9a:	75 f3       	brhs	.-36     	; 0x1a78 <tbl_cos_sin+0x66>
    1a9c:	61 7f       	andi	r22, 0xF1	; 241
    1a9e:	39 ed       	ldi	r19, 0xD9	; 217
    1aa0:	9c 7e       	andi	r25, 0xEC	; 236
    1aa2:	08 e7       	ldi	r16, 0x78	; 120
    1aa4:	89 7d       	andi	r24, 0xD9	; 217
    1aa6:	e7 e0       	ldi	r30, 0x07	; 7
    1aa8:	29 7c       	andi	r18, 0xC9	; 201
    1aaa:	d9 da       	rcall	.-2638   	; 0x105e <main+0x7f2>
    1aac:	7c 7a       	andi	r23, 0xAC	; 172
    1aae:	e2 d4       	rcall	.+2500   	; 0x2474 <__data_load_end+0x3a4>
    1ab0:	83 78       	andi	r24, 0x83	; 131
    1ab2:	05 cf       	rjmp	.-502    	; 0x18be <__vector_18+0x696>
    1ab4:	40 76       	andi	r20, 0x60	; 96
    1ab6:	47 c9       	rjmp	.-3442   	; 0xd46 <main+0x4da>
    1ab8:	b5 73       	andi	r27, 0x35	; 53
    1aba:	aa c3       	rjmp	.+1876   	; 0x2210 <__data_load_end+0x140>
    1abc:	e1 70       	andi	r30, 0x01	; 1
    1abe:	33 be       	out	0x33, r3	; 51
    1ac0:	c9 6d       	ori	r28, 0xD9	; 217
    1ac2:	e4 b8       	out	0x04, r14	; 4
    1ac4:	6c 6a       	ori	r22, 0xAC	; 172
    1ac6:	c1 b3       	in	r28, 0x11	; 17
    1ac8:	ce 66       	ori	r28, 0x6E	; 110
    1aca:	cd ae       	std	Y+61, r12	; 0x3d
    1acc:	f1 62       	ori	r31, 0x21	; 33
    1ace:	0c aa       	std	Y+52, r0	; 0x34
    1ad0:	d6 5e       	subi	r29, 0xE6	; 230
    1ad2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ad4:	81 5a       	subi	r24, 0xA1	; 161
    1ad6:	2a a1       	ldd	r18, Y+34	; 0x22
    1ad8:	f5 55       	subi	r31, 0x55	; 85
    1ada:	0f 9d       	mul	r16, r15
    1adc:	33 51       	subi	r19, 0x13	; 19
    1ade:	32 99       	sbic	0x06, 2	; 6
    1ae0:	3f 4c       	sbci	r19, 0xCF	; 207
    1ae2:	94 95       	.word	0x9594	; ????
    1ae4:	1c 47       	sbci	r17, 0x7C	; 124
    1ae6:	37 92       	.word	0x9237	; ????
    1ae8:	cd 41       	sbci	r28, 0x1D	; 29
    1aea:	1f 8f       	std	Y+31, r17	; 0x1f
    1aec:	56 3c       	cpi	r21, 0xC6	; 198
    1aee:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1af0:	b9 36       	cpi	r27, 0x69	; 105
    1af2:	c0 89       	ldd	r28, Z+16	; 0x10
    1af4:	fb 30       	cpi	r31, 0x0B	; 11
    1af6:	7d 87       	std	Y+13, r23	; 0x0d
    1af8:	1e 2b       	or	r17, r30
    1afa:	84 85       	ldd	r24, Z+12	; 0x0c
    1afc:	27 25       	eor	r18, r7
    1afe:	d8 83       	st	Y, r29
    1b00:	19 1f       	adc	r17, r25
    1b02:	77 82       	std	Z+7, r7	; 0x07
    1b04:	f8 18       	sub	r15, r8
    1b06:	64 81       	ldd	r22, Z+4	; 0x04
    1b08:	c7 12       	cpse	r12, r23
    1b0a:	9f 80       	ldd	r9, Y+7	; 0x07
    1b0c:	8b 0c       	add	r8, r11
    1b0e:	29 80       	ldd	r2, Y+1	; 0x01
    1b10:	47 06       	cpc	r4, r23

00001b12 <tbl_bitrev>:
    1b12:	00 00       	nop
    1b14:	00 01       	movw	r0, r0
    1b16:	80 00       	.word	0x0080	; ????
    1b18:	80 01       	movw	r16, r0
    1b1a:	40 00       	.word	0x0040	; ????
    1b1c:	40 01       	movw	r8, r0
    1b1e:	c0 00       	.word	0x00c0	; ????
    1b20:	c0 01       	movw	r24, r0
    1b22:	20 00       	.word	0x0020	; ????
    1b24:	20 01       	movw	r4, r0
    1b26:	a0 00       	.word	0x00a0	; ????
    1b28:	a0 01       	movw	r20, r0
    1b2a:	60 00       	.word	0x0060	; ????
    1b2c:	60 01       	movw	r12, r0
    1b2e:	e0 00       	.word	0x00e0	; ????
    1b30:	e0 01       	movw	r28, r0
    1b32:	10 00       	.word	0x0010	; ????
    1b34:	10 01       	movw	r2, r0
    1b36:	90 00       	.word	0x0090	; ????
    1b38:	90 01       	movw	r18, r0
    1b3a:	50 00       	.word	0x0050	; ????
    1b3c:	50 01       	movw	r10, r0
    1b3e:	d0 00       	.word	0x00d0	; ????
    1b40:	d0 01       	movw	r26, r0
    1b42:	30 00       	.word	0x0030	; ????
    1b44:	30 01       	movw	r6, r0
    1b46:	b0 00       	.word	0x00b0	; ????
    1b48:	b0 01       	movw	r22, r0
    1b4a:	70 00       	.word	0x0070	; ????
    1b4c:	70 01       	movw	r14, r0
    1b4e:	f0 00       	.word	0x00f0	; ????
    1b50:	f0 01       	movw	r30, r0
    1b52:	08 00       	.word	0x0008	; ????
    1b54:	08 01       	movw	r0, r16
    1b56:	88 00       	.word	0x0088	; ????
    1b58:	88 01       	movw	r16, r16
    1b5a:	48 00       	.word	0x0048	; ????
    1b5c:	48 01       	movw	r8, r16
    1b5e:	c8 00       	.word	0x00c8	; ????
    1b60:	c8 01       	movw	r24, r16
    1b62:	28 00       	.word	0x0028	; ????
    1b64:	28 01       	movw	r4, r16
    1b66:	a8 00       	.word	0x00a8	; ????
    1b68:	a8 01       	movw	r20, r16
    1b6a:	68 00       	.word	0x0068	; ????
    1b6c:	68 01       	movw	r12, r16
    1b6e:	e8 00       	.word	0x00e8	; ????
    1b70:	e8 01       	movw	r28, r16
    1b72:	18 00       	.word	0x0018	; ????
    1b74:	18 01       	movw	r2, r16
    1b76:	98 00       	.word	0x0098	; ????
    1b78:	98 01       	movw	r18, r16
    1b7a:	58 00       	.word	0x0058	; ????
    1b7c:	58 01       	movw	r10, r16
    1b7e:	d8 00       	.word	0x00d8	; ????
    1b80:	d8 01       	movw	r26, r16
    1b82:	38 00       	.word	0x0038	; ????
    1b84:	38 01       	movw	r6, r16
    1b86:	b8 00       	.word	0x00b8	; ????
    1b88:	b8 01       	movw	r22, r16
    1b8a:	78 00       	.word	0x0078	; ????
    1b8c:	78 01       	movw	r14, r16
    1b8e:	f8 00       	.word	0x00f8	; ????
    1b90:	f8 01       	movw	r30, r16

00001b92 <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
    1b92:	3f 92       	push	r3
    1b94:	2f 92       	push	r2
	pushw	AH,AL
    1b96:	1f 93       	push	r17
    1b98:	0f 93       	push	r16
	pushw	YH,YL
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
    1b9e:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
    1ba0:	eb 01       	movw	r28, r22
	clr	EH				;Zero
    1ba2:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
    1ba4:	e2 e1       	ldi	r30, 0x12	; 18
    1ba6:	f9 e1       	ldi	r31, 0x19	; 25
	ldiw	AH,AL, FFT_N			;A = FFT_N;
    1ba8:	00 e8       	ldi	r16, 0x80	; 128
    1baa:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
    1bac:	25 91       	lpm	r18, Z+
    1bae:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
    1bb0:	4d 91       	ld	r20, X+
    1bb2:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
    1bb4:	b5 03       	fmuls	r19, r21
    1bb6:	b0 01       	movw	r22, r0
    1bb8:	2c 03       	fmul	r18, r20
    1bba:	10 01       	movw	r2, r0
    1bbc:	69 1f       	adc	r22, r25
    1bbe:	bc 03       	fmulsu	r19, r20
    1bc0:	79 0b       	sbc	r23, r25
    1bc2:	30 0c       	add	r3, r0
    1bc4:	61 1d       	adc	r22, r1
    1bc6:	79 1f       	adc	r23, r25
    1bc8:	da 03       	fmulsu	r21, r18
    1bca:	79 0b       	sbc	r23, r25
    1bcc:	30 0c       	add	r3, r0
    1bce:	61 1d       	adc	r22, r1
    1bd0:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
    1bd2:	69 93       	st	Y+, r22
    1bd4:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
    1bd6:	69 93       	st	Y+, r22
    1bd8:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
    1bda:	01 50       	subi	r16, 0x01	; 1
    1bdc:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
    1bde:	31 f7       	brne	.-52     	; 0x1bac <fft_input+0x1a>

	popw	YH,YL
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
	popw	AH,AL
    1be4:	0f 91       	pop	r16
    1be6:	1f 91       	pop	r17
	popw	T2H,T2L
    1be8:	2f 90       	pop	r2
    1bea:	3f 90       	pop	r3
	clr	r1
    1bec:	11 24       	eor	r1, r1
	ret
    1bee:	08 95       	ret

00001bf0 <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
    1bf0:	3f 92       	push	r3
    1bf2:	2f 92       	push	r2
	pushw	T4H,T4L
    1bf4:	5f 92       	push	r5
    1bf6:	4f 92       	push	r4
	pushw	T6H,T6L
    1bf8:	7f 92       	push	r7
    1bfa:	6f 92       	push	r6
	pushw	T8H,T8L
    1bfc:	9f 92       	push	r9
    1bfe:	8f 92       	push	r8
	pushw	T10H,T10L
    1c00:	bf 92       	push	r11
    1c02:	af 92       	push	r10
	pushw	T12H,T12L
    1c04:	df 92       	push	r13
    1c06:	cf 92       	push	r12
	pushw	T14H,T14L
    1c08:	ff 92       	push	r15
    1c0a:	ef 92       	push	r14
	pushw	AH,AL
    1c0c:	1f 93       	push	r17
    1c0e:	0f 93       	push	r16
	pushw	YH,YL
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
    1c14:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
    1c1a:	a0 e4       	ldi	r26, 0x40	; 64
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4				;T12 = E; (angular speed)
    1c1e:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
    1c20:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
    1c22:	60 01       	movw	r12, r0
	mul	EH, AL				;
    1c24:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
    1c26:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
    1c28:	7c 01       	movw	r14, r24
	pushw	EH,EL
    1c2a:	9f 93       	push	r25
    1c2c:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
    1c2e:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
    1c30:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1c32:	c0 0d       	add	r28, r0
    1c34:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
    1c36:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
    1c38:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
    1c3a:	ff 93       	push	r31
    1c3c:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
    1c3e:	bb 24       	eor	r11, r11
    1c40:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
    1c42:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
    1c44:	00 81       	ld	r16, Z
    1c46:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
    1c48:	15 95       	asr	r17
    1c4a:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
    1c4c:	68 81       	ld	r22, Y
    1c4e:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
    1c50:	75 95       	asr	r23
    1c52:	67 95       	ror	r22
	movw	CL, AL				;
    1c54:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
    1c56:	06 1b       	sub	r16, r22
    1c58:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
    1c5a:	46 0f       	add	r20, r22
    1c5c:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1c5e:	41 93       	st	Z+, r20
    1c60:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
    1c62:	20 81       	ld	r18, Z
    1c64:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
    1c66:	35 95       	asr	r19
    1c68:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
    1c6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c6c:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
    1c6e:	75 95       	asr	r23
    1c70:	67 95       	ror	r22
	movw	CL, BL				;
    1c72:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
    1c74:	26 1b       	sub	r18, r22
    1c76:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
    1c78:	46 0f       	add	r20, r22
    1c7a:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1c7c:	41 93       	st	Z+, r20
    1c7e:	51 93       	st	Z+, r21
	movw	T0L, ZL
    1c80:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
    1c82:	e2 e1       	ldi	r30, 0x12	; 18
    1c84:	fa e1       	ldi	r31, 0x1A	; 26
	addw	ZH,ZL, T10H,T10L		;
    1c86:	ea 0d       	add	r30, r10
    1c88:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
    1c8a:	45 91       	lpm	r20, Z+
    1c8c:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
    1c8e:	65 91       	lpm	r22, Z+
    1c90:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
    1c92:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
    1c94:	95 03       	fmuls	r17, r21
    1c96:	20 01       	movw	r4, r0
    1c98:	0c 03       	fmul	r16, r20
    1c9a:	10 01       	movw	r2, r0
    1c9c:	49 1e       	adc	r4, r25
    1c9e:	9c 03       	fmulsu	r17, r20
    1ca0:	59 0a       	sbc	r5, r25
    1ca2:	30 0c       	add	r3, r0
    1ca4:	41 1c       	adc	r4, r1
    1ca6:	59 1e       	adc	r5, r25
    1ca8:	d8 03       	fmulsu	r21, r16
    1caa:	59 0a       	sbc	r5, r25
    1cac:	30 0c       	add	r3, r0
    1cae:	41 1c       	adc	r4, r1
    1cb0:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
    1cb2:	b7 03       	fmuls	r19, r23
    1cb4:	40 01       	movw	r8, r0
    1cb6:	2e 03       	fmul	r18, r22
    1cb8:	30 01       	movw	r6, r0
    1cba:	89 1e       	adc	r8, r25
    1cbc:	be 03       	fmulsu	r19, r22
    1cbe:	99 0a       	sbc	r9, r25
    1cc0:	70 0c       	add	r7, r0
    1cc2:	81 1c       	adc	r8, r1
    1cc4:	99 1e       	adc	r9, r25
    1cc6:	fa 03       	fmulsu	r23, r18
    1cc8:	99 0a       	sbc	r9, r25
    1cca:	70 0c       	add	r7, r0
    1ccc:	81 1c       	adc	r8, r1
    1cce:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1cd0:	26 0c       	add	r2, r6
    1cd2:	37 1c       	adc	r3, r7
    1cd4:	48 1c       	adc	r4, r8
    1cd6:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
    1cd8:	49 92       	st	Y+, r4
    1cda:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
    1cdc:	b5 03       	fmuls	r19, r21
    1cde:	20 01       	movw	r4, r0
    1ce0:	2c 03       	fmul	r18, r20
    1ce2:	10 01       	movw	r2, r0
    1ce4:	49 1e       	adc	r4, r25
    1ce6:	bc 03       	fmulsu	r19, r20
    1ce8:	59 0a       	sbc	r5, r25
    1cea:	30 0c       	add	r3, r0
    1cec:	41 1c       	adc	r4, r1
    1cee:	59 1e       	adc	r5, r25
    1cf0:	da 03       	fmulsu	r21, r18
    1cf2:	59 0a       	sbc	r5, r25
    1cf4:	30 0c       	add	r3, r0
    1cf6:	41 1c       	adc	r4, r1
    1cf8:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
    1cfa:	97 03       	fmuls	r17, r23
    1cfc:	40 01       	movw	r8, r0
    1cfe:	0e 03       	fmul	r16, r22
    1d00:	30 01       	movw	r6, r0
    1d02:	89 1e       	adc	r8, r25
    1d04:	9e 03       	fmulsu	r17, r22
    1d06:	99 0a       	sbc	r9, r25
    1d08:	70 0c       	add	r7, r0
    1d0a:	81 1c       	adc	r8, r1
    1d0c:	99 1e       	adc	r9, r25
    1d0e:	f8 03       	fmulsu	r23, r16
    1d10:	99 0a       	sbc	r9, r25
    1d12:	70 0c       	add	r7, r0
    1d14:	81 1c       	adc	r8, r1
    1d16:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1d18:	26 18       	sub	r2, r6
    1d1a:	37 08       	sbc	r3, r7
    1d1c:	48 08       	sbc	r4, r8
    1d1e:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
    1d20:	49 92       	st	Y+, r4
    1d22:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
    1d24:	ac 0c       	add	r10, r12
    1d26:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
    1d28:	b0 fe       	sbrs	r11, 0
#else
	sbrs	T10L, FFT_B + 1
#endif
	rjmp	3b				;/
    1d2a:	8c cf       	rjmp	.-232    	; 0x1c44 <fft_execute+0x54>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
    1d2c:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
    1d2e:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1d30:	c0 0d       	add	r28, r0
    1d32:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
    1d34:	e0 0d       	add	r30, r0
    1d36:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
    1d38:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
    1d3a:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
    1d3c:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
    1d40:	e8 1a       	sub	r14, r24
    1d42:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <fft_execute+0x158>
    1d46:	7b cf       	rjmp	.-266    	; 0x1c3e <fft_execute+0x4e>
	popw	ZH,ZL
    1d48:	ef 91       	pop	r30
    1d4a:	ff 91       	pop	r31
	popw	EH,EL
    1d4c:	8f 91       	pop	r24
    1d4e:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
    1d54:	b6 95       	lsr	r27
    1d56:	a7 95       	ror	r26
	adiw	XL, 0				;
    1d58:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <fft_execute+0x16e>
    1d5c:	60 cf       	rjmp	.-320    	; 0x1c1e <fft_execute+0x2e>

	popw	YH,YL
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
	popw	AH,AL
    1d62:	0f 91       	pop	r16
    1d64:	1f 91       	pop	r17
	popw	T14H,T14L
    1d66:	ef 90       	pop	r14
    1d68:	ff 90       	pop	r15
	popw	T12H,T12L
    1d6a:	cf 90       	pop	r12
    1d6c:	df 90       	pop	r13
	popw	T10H,T10L
    1d6e:	af 90       	pop	r10
    1d70:	bf 90       	pop	r11
	popw	T8H,T8L
    1d72:	8f 90       	pop	r8
    1d74:	9f 90       	pop	r9
	popw	T6H,T6L
    1d76:	6f 90       	pop	r6
    1d78:	7f 90       	pop	r7
	popw	T4H,T4L
    1d7a:	4f 90       	pop	r4
    1d7c:	5f 90       	pop	r5
	popw	T2H,T2L
    1d7e:	2f 90       	pop	r2
    1d80:	3f 90       	pop	r3
;	clr	r1
	ret
    1d82:	08 95       	ret

00001d84 <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
    1d84:	3f 92       	push	r3
    1d86:	2f 92       	push	r2
	pushw	T4H,T4L
    1d88:	5f 92       	push	r5
    1d8a:	4f 92       	push	r4
	pushw	T6H,T6L
    1d8c:	7f 92       	push	r7
    1d8e:	6f 92       	push	r6
	pushw	T8H,T8L
    1d90:	9f 92       	push	r9
    1d92:	8f 92       	push	r8
	pushw	T10H,T10L
    1d94:	bf 92       	push	r11
    1d96:	af 92       	push	r10
	pushw	AH,AL
    1d98:	1f 93       	push	r17
    1d9a:	0f 93       	push	r16
	pushw	YH,YL
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
    1da0:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
    1da2:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
    1da4:	e2 e1       	ldi	r30, 0x12	; 18
    1da6:	fb e1       	ldi	r31, 0x1B	; 27
	clr	EH				;Zero
    1da8:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (pluse/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (pluse only)
    1daa:	00 e4       	ldi	r16, 0x40	; 64
    1dac:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
    1dae:	a5 91       	lpm	r26, Z+
    1db0:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
    1db2:	aa 0d       	add	r26, r10
    1db4:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
    1db6:	2d 91       	ld	r18, X+
    1db8:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
    1dba:	4d 91       	ld	r20, X+
    1dbc:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
    1dbe:	b3 03       	fmuls	r19, r19
    1dc0:	20 01       	movw	r4, r0
    1dc2:	2a 03       	fmul	r18, r18
    1dc4:	10 01       	movw	r2, r0
    1dc6:	49 1e       	adc	r4, r25
    1dc8:	ba 03       	fmulsu	r19, r18
    1dca:	59 0a       	sbc	r5, r25
    1dcc:	30 0c       	add	r3, r0
    1dce:	41 1c       	adc	r4, r1
    1dd0:	59 1e       	adc	r5, r25
    1dd2:	ba 03       	fmulsu	r19, r18
    1dd4:	59 0a       	sbc	r5, r25
    1dd6:	30 0c       	add	r3, r0
    1dd8:	41 1c       	adc	r4, r1
    1dda:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
    1ddc:	d5 03       	fmuls	r21, r21
    1dde:	40 01       	movw	r8, r0
    1de0:	4c 03       	fmul	r20, r20
    1de2:	30 01       	movw	r6, r0
    1de4:	89 1e       	adc	r8, r25
    1de6:	dc 03       	fmulsu	r21, r20
    1de8:	99 0a       	sbc	r9, r25
    1dea:	70 0c       	add	r7, r0
    1dec:	81 1c       	adc	r8, r1
    1dee:	99 1e       	adc	r9, r25
    1df0:	dc 03       	fmulsu	r21, r20
    1df2:	99 0a       	sbc	r9, r25
    1df4:	70 0c       	add	r7, r0
    1df6:	81 1c       	adc	r8, r1
    1df8:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
    1dfa:	26 0c       	add	r2, r6
    1dfc:	37 1c       	adc	r3, r7
    1dfe:	48 1c       	adc	r4, r8
    1e00:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
    1e02:	66 24       	eor	r6, r6
    1e04:	77 24       	eor	r7, r7
    1e06:	88 24       	eor	r8, r8
    1e08:	99 24       	eor	r9, r9
    1e0a:	21 e0       	ldi	r18, 0x01	; 1
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	44 27       	eor	r20, r20
    1e10:	55 27       	eor	r21, r21
    1e12:	70 e1       	ldi	r23, 0x10	; 16
    1e14:	22 0c       	add	r2, r2
    1e16:	33 1c       	adc	r3, r3
    1e18:	44 1c       	adc	r4, r4
    1e1a:	55 1c       	adc	r5, r5
    1e1c:	66 1c       	adc	r6, r6
    1e1e:	77 1c       	adc	r7, r7
    1e20:	88 1c       	adc	r8, r8
    1e22:	99 1c       	adc	r9, r9
    1e24:	22 0c       	add	r2, r2
    1e26:	33 1c       	adc	r3, r3
    1e28:	44 1c       	adc	r4, r4
    1e2a:	55 1c       	adc	r5, r5
    1e2c:	66 1c       	adc	r6, r6
    1e2e:	77 1c       	adc	r7, r7
    1e30:	88 1c       	adc	r8, r8
    1e32:	99 1c       	adc	r9, r9
    1e34:	2a f4       	brpl	.+10     	; 0x1e40 <fft_output+0xbc>
    1e36:	62 0e       	add	r6, r18
    1e38:	73 1e       	adc	r7, r19
    1e3a:	84 1e       	adc	r8, r20
    1e3c:	95 1e       	adc	r9, r21
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <fft_output+0xc4>
    1e40:	62 1a       	sub	r6, r18
    1e42:	73 0a       	sbc	r7, r19
    1e44:	84 0a       	sbc	r8, r20
    1e46:	95 0a       	sbc	r9, r21
    1e48:	22 0f       	add	r18, r18
    1e4a:	33 1f       	adc	r19, r19
    1e4c:	44 1f       	adc	r20, r20
    1e4e:	28 7f       	andi	r18, 0xF8	; 248
    1e50:	25 60       	ori	r18, 0x05	; 5
    1e52:	97 fc       	sbrc	r9, 7
    1e54:	22 50       	subi	r18, 0x02	; 2
    1e56:	7a 95       	dec	r23
    1e58:	e9 f6       	brne	.-70     	; 0x1e14 <fft_output+0x90>
    1e5a:	46 95       	lsr	r20
    1e5c:	37 95       	ror	r19
    1e5e:	27 95       	ror	r18
    1e60:	46 95       	lsr	r20
    1e62:	37 95       	ror	r19
    1e64:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
    1e66:	29 93       	st	Y+, r18
    1e68:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
    1e6a:	01 50       	subi	r16, 0x01	; 1
    1e6c:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <fft_output+0xee>
    1e70:	9e cf       	rjmp	.-196    	; 0x1dae <fft_output+0x2a>

	popw	YH,YL
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
	popw	AH,AL
    1e76:	0f 91       	pop	r16
    1e78:	1f 91       	pop	r17
	popw	T10H,T10L
    1e7a:	af 90       	pop	r10
    1e7c:	bf 90       	pop	r11
	popw	T8H,T8L
    1e7e:	8f 90       	pop	r8
    1e80:	9f 90       	pop	r9
	popw	T6H,T6L
    1e82:	6f 90       	pop	r6
    1e84:	7f 90       	pop	r7
	popw	T4H,T4L
    1e86:	4f 90       	pop	r4
    1e88:	5f 90       	pop	r5
	popw	T2H,T2L
    1e8a:	2f 90       	pop	r2
    1e8c:	3f 90       	pop	r3
	clr	r1
    1e8e:	11 24       	eor	r1, r1
	ret
    1e90:	08 95       	ret

00001e92 <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
    1e92:	ac 01       	movw	r20, r24
	clr	EH	;Zero
    1e94:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
    1e96:	d7 03       	fmuls	r21, r23
    1e98:	f0 01       	movw	r30, r0
    1e9a:	4e 03       	fmul	r20, r22
    1e9c:	d0 01       	movw	r26, r0
    1e9e:	e9 1f       	adc	r30, r25
    1ea0:	de 03       	fmulsu	r21, r22
    1ea2:	f9 0b       	sbc	r31, r25
    1ea4:	b0 0d       	add	r27, r0
    1ea6:	e1 1d       	adc	r30, r1
    1ea8:	f9 1f       	adc	r31, r25
    1eaa:	fc 03       	fmulsu	r23, r20
    1eac:	f9 0b       	sbc	r31, r25
    1eae:	b0 0d       	add	r27, r0
    1eb0:	e1 1d       	adc	r30, r1
    1eb2:	f9 1f       	adc	r31, r25
	movw	EL, ZL
    1eb4:	cf 01       	movw	r24, r30
	clr	r1
    1eb6:	11 24       	eor	r1, r1
	ret
    1eb8:	08 95       	ret

00001eba <__udivmodhi4>:
    1eba:	aa 1b       	sub	r26, r26
    1ebc:	bb 1b       	sub	r27, r27
    1ebe:	51 e1       	ldi	r21, 0x11	; 17
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <__udivmodhi4_ep>

00001ec2 <__udivmodhi4_loop>:
    1ec2:	aa 1f       	adc	r26, r26
    1ec4:	bb 1f       	adc	r27, r27
    1ec6:	a6 17       	cp	r26, r22
    1ec8:	b7 07       	cpc	r27, r23
    1eca:	10 f0       	brcs	.+4      	; 0x1ed0 <__udivmodhi4_ep>
    1ecc:	a6 1b       	sub	r26, r22
    1ece:	b7 0b       	sbc	r27, r23

00001ed0 <__udivmodhi4_ep>:
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	5a 95       	dec	r21
    1ed6:	a9 f7       	brne	.-22     	; 0x1ec2 <__udivmodhi4_loop>
    1ed8:	80 95       	com	r24
    1eda:	90 95       	com	r25
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	08 95       	ret

00001ee2 <__divmodhi4>:
    1ee2:	97 fb       	bst	r25, 7
    1ee4:	09 2e       	mov	r0, r25
    1ee6:	07 26       	eor	r0, r23
    1ee8:	0a d0       	rcall	.+20     	; 0x1efe <__divmodhi4_neg1>
    1eea:	77 fd       	sbrc	r23, 7
    1eec:	04 d0       	rcall	.+8      	; 0x1ef6 <__divmodhi4_neg2>
    1eee:	e5 df       	rcall	.-54     	; 0x1eba <__udivmodhi4>
    1ef0:	06 d0       	rcall	.+12     	; 0x1efe <__divmodhi4_neg1>
    1ef2:	00 20       	and	r0, r0
    1ef4:	1a f4       	brpl	.+6      	; 0x1efc <__divmodhi4_exit>

00001ef6 <__divmodhi4_neg2>:
    1ef6:	70 95       	com	r23
    1ef8:	61 95       	neg	r22
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255

00001efc <__divmodhi4_exit>:
    1efc:	08 95       	ret

00001efe <__divmodhi4_neg1>:
    1efe:	f6 f7       	brtc	.-4      	; 0x1efc <__divmodhi4_exit>
    1f00:	90 95       	com	r25
    1f02:	81 95       	neg	r24
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	08 95       	ret

00001f08 <__udivmodsi4>:
    1f08:	a1 e2       	ldi	r26, 0x21	; 33
    1f0a:	1a 2e       	mov	r1, r26
    1f0c:	aa 1b       	sub	r26, r26
    1f0e:	bb 1b       	sub	r27, r27
    1f10:	fd 01       	movw	r30, r26
    1f12:	0d c0       	rjmp	.+26     	; 0x1f2e <__udivmodsi4_ep>

00001f14 <__udivmodsi4_loop>:
    1f14:	aa 1f       	adc	r26, r26
    1f16:	bb 1f       	adc	r27, r27
    1f18:	ee 1f       	adc	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	a2 17       	cp	r26, r18
    1f1e:	b3 07       	cpc	r27, r19
    1f20:	e4 07       	cpc	r30, r20
    1f22:	f5 07       	cpc	r31, r21
    1f24:	20 f0       	brcs	.+8      	; 0x1f2e <__udivmodsi4_ep>
    1f26:	a2 1b       	sub	r26, r18
    1f28:	b3 0b       	sbc	r27, r19
    1f2a:	e4 0b       	sbc	r30, r20
    1f2c:	f5 0b       	sbc	r31, r21

00001f2e <__udivmodsi4_ep>:
    1f2e:	66 1f       	adc	r22, r22
    1f30:	77 1f       	adc	r23, r23
    1f32:	88 1f       	adc	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	1a 94       	dec	r1
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <__udivmodsi4_loop>
    1f3a:	60 95       	com	r22
    1f3c:	70 95       	com	r23
    1f3e:	80 95       	com	r24
    1f40:	90 95       	com	r25
    1f42:	9b 01       	movw	r18, r22
    1f44:	ac 01       	movw	r20, r24
    1f46:	bd 01       	movw	r22, r26
    1f48:	cf 01       	movw	r24, r30
    1f4a:	08 95       	ret

00001f4c <__divmodsi4>:
    1f4c:	97 fb       	bst	r25, 7
    1f4e:	09 2e       	mov	r0, r25
    1f50:	05 26       	eor	r0, r21
    1f52:	0e d0       	rcall	.+28     	; 0x1f70 <__divmodsi4_neg1>
    1f54:	57 fd       	sbrc	r21, 7
    1f56:	04 d0       	rcall	.+8      	; 0x1f60 <__divmodsi4_neg2>
    1f58:	d7 df       	rcall	.-82     	; 0x1f08 <__udivmodsi4>
    1f5a:	0a d0       	rcall	.+20     	; 0x1f70 <__divmodsi4_neg1>
    1f5c:	00 1c       	adc	r0, r0
    1f5e:	38 f4       	brcc	.+14     	; 0x1f6e <__divmodsi4_exit>

00001f60 <__divmodsi4_neg2>:
    1f60:	50 95       	com	r21
    1f62:	40 95       	com	r20
    1f64:	30 95       	com	r19
    1f66:	21 95       	neg	r18
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255

00001f6e <__divmodsi4_exit>:
    1f6e:	08 95       	ret

00001f70 <__divmodsi4_neg1>:
    1f70:	f6 f7       	brtc	.-4      	; 0x1f6e <__divmodsi4_exit>
    1f72:	90 95       	com	r25
    1f74:	80 95       	com	r24
    1f76:	70 95       	com	r23
    1f78:	61 95       	neg	r22
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	08 95       	ret

00001f82 <__prologue_saves__>:
    1f82:	2f 92       	push	r2
    1f84:	3f 92       	push	r3
    1f86:	4f 92       	push	r4
    1f88:	5f 92       	push	r5
    1f8a:	6f 92       	push	r6
    1f8c:	7f 92       	push	r7
    1f8e:	8f 92       	push	r8
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	ca 1b       	sub	r28, r26
    1fac:	db 0b       	sbc	r29, r27
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	09 94       	ijmp

00001fba <__epilogue_restores__>:
    1fba:	2a 88       	ldd	r2, Y+18	; 0x12
    1fbc:	39 88       	ldd	r3, Y+17	; 0x11
    1fbe:	48 88       	ldd	r4, Y+16	; 0x10
    1fc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fca:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fcc:	b9 84       	ldd	r11, Y+9	; 0x09
    1fce:	c8 84       	ldd	r12, Y+8	; 0x08
    1fd0:	df 80       	ldd	r13, Y+7	; 0x07
    1fd2:	ee 80       	ldd	r14, Y+6	; 0x06
    1fd4:	fd 80       	ldd	r15, Y+5	; 0x05
    1fd6:	0c 81       	ldd	r16, Y+4	; 0x04
    1fd8:	1b 81       	ldd	r17, Y+3	; 0x03
    1fda:	aa 81       	ldd	r26, Y+2	; 0x02
    1fdc:	b9 81       	ldd	r27, Y+1	; 0x01
    1fde:	ce 0f       	add	r28, r30
    1fe0:	d1 1d       	adc	r29, r1
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	ed 01       	movw	r28, r26
    1fee:	08 95       	ret

00001ff0 <__eerd_byte_m644>:
    1ff0:	f9 99       	sbic	0x1f, 1	; 31
    1ff2:	fe cf       	rjmp	.-4      	; 0x1ff0 <__eerd_byte_m644>
    1ff4:	92 bd       	out	0x22, r25	; 34
    1ff6:	81 bd       	out	0x21, r24	; 33
    1ff8:	f8 9a       	sbi	0x1f, 0	; 31
    1ffa:	99 27       	eor	r25, r25
    1ffc:	80 b5       	in	r24, 0x20	; 32
    1ffe:	08 95       	ret

00002000 <_exit>:
    2000:	f8 94       	cli

00002002 <__stop_program>:
    2002:	ff cf       	rjmp	.-2      	; 0x2002 <__stop_program>
