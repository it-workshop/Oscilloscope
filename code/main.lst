
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00001fb2  00002046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a3  008001fe  008001fe  00002144  2**0
                  ALLOC
  3 .stab         0000372c  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121d  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_14>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_18>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__vector_24>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e2 eb       	ldi	r30, 0xB2	; 178
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	ae 3f       	cpi	r26, 0xFE	; 254
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	15 e0       	ldi	r17, 0x05	; 5
      94:	ae ef       	ldi	r26, 0xFE	; 254
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 3a       	cpi	r26, 0xA1	; 161
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <main>
      a6:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <uart_init>:
#define BAUD 9600UL
#define UBRRVAL (F_CPU/(BAUD*16)-1)
#define U_M	1000
uint16_t u_c;
void uart_init() {
    UBRRH = UBRRVAL >> 8;
      ae:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
      b2:	81 e8       	ldi	r24, 0x81	; 129
      b4:	80 93 c4 00 	sts	0x00C4, r24
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
      b8:	86 e0       	ldi	r24, 0x06	; 6
      ba:	80 93 c2 00 	sts	0x00C2, r24
    UCSRB = (1 << RXEN) | (1 << TXEN);
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	80 93 c1 00 	sts	0x00C1, r24
}
      c4:	08 95       	ret

000000c6 <uart_putc>:

void uart_putc(uint8_t c) {
      c6:	98 2f       	mov	r25, r24
	u_c=0;
      c8:	10 92 9d 05 	sts	0x059D, r1
      cc:	10 92 9c 05 	sts	0x059C, r1
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <uart_putc+0x14>
    while(!(UCSRA&(1<<UDRE))&&(u_c<U_M)) {
      d6:	2f 5f       	subi	r18, 0xFF	; 255
      d8:	3f 4f       	sbci	r19, 0xFF	; 255
      da:	80 91 c0 00 	lds	r24, 0x00C0
      de:	85 fd       	sbrc	r24, 5
      e0:	04 c0       	rjmp	.+8      	; 0xea <uart_putc+0x24>
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	28 3e       	cpi	r18, 0xE8	; 232
      e6:	38 07       	cpc	r19, r24
      e8:	b0 f3       	brcs	.-20     	; 0xd6 <uart_putc+0x10>
      ea:	30 93 9d 05 	sts	0x059D, r19
      ee:	20 93 9c 05 	sts	0x059C, r18
		u_c++;
	}
    UDR = c;
      f2:	90 93 c6 00 	sts	0x00C6, r25
}
      f6:	08 95       	ret

000000f8 <uart_getc>:

uint8_t uart_getc() {
	u_c=0;
      f8:	10 92 9d 05 	sts	0x059D, r1
      fc:	10 92 9c 05 	sts	0x059C, r1
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <uart_getc+0x12>
	static uint8_t c;
    while(!(UCSRA & (1 << RXC))&&(u_c<U_M)) {
     106:	2f 5f       	subi	r18, 0xFF	; 255
     108:	3f 4f       	sbci	r19, 0xFF	; 255
     10a:	80 91 c0 00 	lds	r24, 0x00C0
     10e:	87 fd       	sbrc	r24, 7
     110:	04 c0       	rjmp	.+8      	; 0x11a <uart_getc+0x22>
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	28 3e       	cpi	r18, 0xE8	; 232
     116:	38 07       	cpc	r19, r24
     118:	b0 f3       	brcs	.-20     	; 0x106 <uart_getc+0xe>
     11a:	30 93 9d 05 	sts	0x059D, r19
     11e:	20 93 9c 05 	sts	0x059C, r18
		u_c++;
	}
	c=UDR;
     122:	80 91 c6 00 	lds	r24, 0x00C6
     126:	80 93 14 02 	sts	0x0214, r24
    return c;
}
     12a:	08 95       	ret

0000012c <uart_flush>:

void uart_flush( void ) {
     12c:	90 91 13 02 	lds	r25, 0x0213
     130:	02 c0       	rjmp	.+4      	; 0x136 <uart_flush+0xa>
  static unsigned char dummy;
  while ( UCSRA & (1<<RXC) ) dummy = UDR;
     132:	90 91 c6 00 	lds	r25, 0x00C6
     136:	80 91 c0 00 	lds	r24, 0x00C0
     13a:	87 fd       	sbrc	r24, 7
     13c:	fa cf       	rjmp	.-12     	; 0x132 <uart_flush+0x6>
     13e:	90 93 13 02 	sts	0x0213, r25
}
     142:	08 95       	ret

00000144 <uart_communicate>:

void uart_communicate(unsigned char w_byte) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
    static uint8_t c;
    c=uart_getc();
     148:	0e 94 7c 00 	call	0xf8	; 0xf8 <uart_getc>
     14c:	80 93 12 02 	sts	0x0212, r24
    if(c=='g') uart_putc(w_byte);
     150:	87 36       	cpi	r24, 0x67	; 103
     152:	19 f4       	brne	.+6      	; 0x15a <uart_communicate+0x16>
     154:	81 2f       	mov	r24, r17
     156:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_putc>
     15a:	90 91 13 02 	lds	r25, 0x0213
     15e:	02 c0       	rjmp	.+4      	; 0x164 <uart_communicate+0x20>
    return c;
}

void uart_flush( void ) {
  static unsigned char dummy;
  while ( UCSRA & (1<<RXC) ) dummy = UDR;
     160:	90 91 c6 00 	lds	r25, 0x00C6
     164:	80 91 c0 00 	lds	r24, 0x00C0
     168:	87 fd       	sbrc	r24, 7
     16a:	fa cf       	rjmp	.-12     	; 0x160 <uart_communicate+0x1c>
     16c:	90 93 13 02 	sts	0x0213, r25
void uart_communicate(unsigned char w_byte) {
    static uint8_t c;
    c=uart_getc();
    if(c=='g') uart_putc(w_byte);
    uart_flush();
}
     170:	1f 91       	pop	r17
     172:	08 95       	ret

00000174 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     174:	28 e8       	ldi	r18, 0x88	; 136
     176:	33 e1       	ldi	r19, 0x13	; 19
     178:	04 c0       	rjmp	.+8      	; 0x182 <delay_ms+0xe>
     17a:	f9 01       	movw	r30, r18
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <delay_ms+0x8>
     180:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	d1 f7       	brne	.-12     	; 0x17a <delay_ms+0x6>
		_delay_ms(1);
}
     186:	08 95       	ret

00000188 <delay_us>:

void delay_us(unsigned long long  int delay) {
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	16 2f       	mov	r17, r22
     194:	f7 2e       	mov	r15, r23
     196:	79 2f       	mov	r23, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     198:	96 e0       	ldi	r25, 0x06	; 6
     19a:	d9 2e       	mov	r13, r25
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <delay_us+0x1c>
     19e:	ed 2d       	mov	r30, r13
     1a0:	ea 95       	dec	r30
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <delay_us+0x18>
	while(delay--)
     1a4:	e2 2e       	mov	r14, r18
     1a6:	ea 94       	dec	r14
     1a8:	f1 e0       	ldi	r31, 0x01	; 1
     1aa:	e2 16       	cp	r14, r18
     1ac:	08 f0       	brcs	.+2      	; 0x1b0 <delay_us+0x28>
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	23 2f       	mov	r18, r19
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	e1 e0       	ldi	r30, 0x01	; 1
     1b6:	23 17       	cp	r18, r19
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <delay_us+0x34>
     1ba:	e0 e0       	ldi	r30, 0x00	; 0
     1bc:	0f 2f       	mov	r16, r31
     1be:	02 0f       	add	r16, r18
     1c0:	31 e0       	ldi	r19, 0x01	; 1
     1c2:	02 17       	cp	r16, r18
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <delay_us+0x40>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	e3 2b       	or	r30, r19
     1ca:	24 2f       	mov	r18, r20
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	24 17       	cp	r18, r20
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <delay_us+0x4e>
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	6e 2f       	mov	r22, r30
     1d8:	62 0f       	add	r22, r18
     1da:	31 e0       	ldi	r19, 0x01	; 1
     1dc:	62 17       	cp	r22, r18
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <delay_us+0x5a>
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f3 2b       	or	r31, r19
     1e4:	25 2f       	mov	r18, r21
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	41 e0       	ldi	r20, 0x01	; 1
     1ea:	25 17       	cp	r18, r21
     1ec:	08 f0       	brcs	.+2      	; 0x1f0 <delay_us+0x68>
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	9f 2f       	mov	r25, r31
     1f2:	92 0f       	add	r25, r18
     1f4:	31 e0       	ldi	r19, 0x01	; 1
     1f6:	92 17       	cp	r25, r18
     1f8:	08 f0       	brcs	.+2      	; 0x1fc <delay_us+0x74>
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	43 2b       	or	r20, r19
     1fe:	21 2f       	mov	r18, r17
     200:	21 50       	subi	r18, 0x01	; 1
     202:	51 e0       	ldi	r21, 0x01	; 1
     204:	21 17       	cp	r18, r17
     206:	08 f0       	brcs	.+2      	; 0x20a <delay_us+0x82>
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	b4 2f       	mov	r27, r20
     20c:	b2 0f       	add	r27, r18
     20e:	31 e0       	ldi	r19, 0x01	; 1
     210:	b2 17       	cp	r27, r18
     212:	08 f0       	brcs	.+2      	; 0x216 <delay_us+0x8e>
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	53 2b       	or	r21, r19
     218:	2f 2d       	mov	r18, r15
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	2f 15       	cp	r18, r15
     220:	08 f0       	brcs	.+2      	; 0x224 <delay_us+0x9c>
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	a5 2f       	mov	r26, r21
     226:	a2 0f       	add	r26, r18
     228:	31 e0       	ldi	r19, 0x01	; 1
     22a:	a2 17       	cp	r26, r18
     22c:	08 f0       	brcs	.+2      	; 0x230 <delay_us+0xa8>
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	43 2b       	or	r20, r19
     232:	28 2f       	mov	r18, r24
     234:	21 50       	subi	r18, 0x01	; 1
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	28 17       	cp	r18, r24
     23a:	08 f0       	brcs	.+2      	; 0x23e <delay_us+0xb6>
     23c:	e0 e0       	ldi	r30, 0x00	; 0
     23e:	f4 2f       	mov	r31, r20
     240:	f2 0f       	add	r31, r18
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	f2 17       	cp	r31, r18
     246:	08 f0       	brcs	.+2      	; 0x24a <delay_us+0xc2>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	e8 2b       	or	r30, r24
     24c:	71 50       	subi	r23, 0x01	; 1
     24e:	2e 2d       	mov	r18, r14
     250:	30 2f       	mov	r19, r16
     252:	46 2f       	mov	r20, r22
     254:	59 2f       	mov	r21, r25
     256:	1b 2f       	mov	r17, r27
     258:	fa 2e       	mov	r15, r26
     25a:	8f 2f       	mov	r24, r31
     25c:	7e 0f       	add	r23, r30
     25e:	2f 3f       	cpi	r18, 0xFF	; 255
     260:	09 f0       	breq	.+2      	; 0x264 <delay_us+0xdc>
     262:	9d cf       	rjmp	.-198    	; 0x19e <delay_us+0x16>
     264:	0f 3f       	cpi	r16, 0xFF	; 255
     266:	09 f0       	breq	.+2      	; 0x26a <delay_us+0xe2>
     268:	9a cf       	rjmp	.-204    	; 0x19e <delay_us+0x16>
     26a:	6f 3f       	cpi	r22, 0xFF	; 255
     26c:	09 f0       	breq	.+2      	; 0x270 <delay_us+0xe8>
     26e:	97 cf       	rjmp	.-210    	; 0x19e <delay_us+0x16>
     270:	9f 3f       	cpi	r25, 0xFF	; 255
     272:	09 f0       	breq	.+2      	; 0x276 <delay_us+0xee>
     274:	94 cf       	rjmp	.-216    	; 0x19e <delay_us+0x16>
     276:	bf 3f       	cpi	r27, 0xFF	; 255
     278:	09 f0       	breq	.+2      	; 0x27c <delay_us+0xf4>
     27a:	91 cf       	rjmp	.-222    	; 0x19e <delay_us+0x16>
     27c:	af 3f       	cpi	r26, 0xFF	; 255
     27e:	09 f0       	breq	.+2      	; 0x282 <delay_us+0xfa>
     280:	8e cf       	rjmp	.-228    	; 0x19e <delay_us+0x16>
     282:	ff 3f       	cpi	r31, 0xFF	; 255
     284:	09 f0       	breq	.+2      	; 0x288 <delay_us+0x100>
     286:	8b cf       	rjmp	.-234    	; 0x19e <delay_us+0x16>
     288:	7f 3f       	cpi	r23, 0xFF	; 255
     28a:	09 f0       	breq	.+2      	; 0x28e <delay_us+0x106>
     28c:	88 cf       	rjmp	.-240    	; 0x19e <delay_us+0x16>
		_delay_us(1);
}
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	08 95       	ret

0000029a <lcd_databits>:

#define SEND_CMD 1
#define SEND_DATA 2

void lcd_databits(uint8_t cmd,uint8_t src) {
  DATAPORT=src;
     29a:	68 b9       	out	0x08, r22	; 8
  if(cmd==SEND_DATA) CMDPORT|=DI;
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	11 f4       	brne	.+4      	; 0x2a4 <lcd_databits+0xa>
     2a0:	5d 9a       	sbi	0x0b, 5	; 11
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <lcd_databits+0xc>
  else CMDPORT&=~DI;
     2a4:	5d 98       	cbi	0x0b, 5	; 11
  CMDPORT|=EN;
     2a6:	5e 9a       	sbi	0x0b, 6	; 11
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	36 e0       	ldi	r19, 0x06	; 6
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <lcd_databits+0x1c>
     2b0:	23 2f       	mov	r18, r19
     2b2:	2a 95       	dec	r18
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_databits+0x18>
     2b6:	01 96       	adiw	r24, 0x01	; 1
	while(delay--)
		_delay_ms(1);
}

void delay_us(unsigned long long  int delay) {
	while(delay--)
     2b8:	87 30       	cpi	r24, 0x07	; 7
     2ba:	91 05       	cpc	r25, r1
     2bc:	c9 f7       	brne	.-14     	; 0x2b0 <lcd_databits+0x16>
  DATAPORT=src;
  if(cmd==SEND_DATA) CMDPORT|=DI;
  else CMDPORT&=~DI;
  CMDPORT|=EN;
  delay_us(6);
  CMDPORT&=~EN;
     2be:	5e 98       	cbi	0x0b, 6	; 11
  CMDPORT&=~DI;
     2c0:	5d 98       	cbi	0x0b, 5	; 11
  DATAPORT=0;
     2c2:	18 b8       	out	0x08, r1	; 8
}
     2c4:	08 95       	ret

000002c6 <lcd_goto_xblock>:

void lcd_goto_xblock(uint8_t s) { //s={0,1...127}
     2c6:	68 2f       	mov	r22, r24
  if(s>=64) {
     2c8:	80 34       	cpi	r24, 0x40	; 64
     2ca:	20 f0       	brcs	.+8      	; 0x2d4 <lcd_goto_xblock+0xe>
    CMDPORT|=CSEL2;
     2cc:	5b 9a       	sbi	0x0b, 3	; 11
    CMDPORT&=~CSEL1;
     2ce:	5a 98       	cbi	0x0b, 2	; 11
    lcd_databits(SEND_CMD,(1<<6)|(s-64));
     2d0:	60 54       	subi	r22, 0x40	; 64
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <lcd_goto_xblock+0x12>
  }
  else {
    CMDPORT|=CSEL1;
     2d4:	5a 9a       	sbi	0x0b, 2	; 11
    CMDPORT&=~CSEL2;
     2d6:	5b 98       	cbi	0x0b, 3	; 11
    lcd_databits(SEND_CMD,(1<<6)|s);
     2d8:	60 64       	ori	r22, 0x40	; 64
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     2e0:	08 95       	ret

000002e2 <lcd_goto_yblock>:
  }
}

void lcd_goto_yblock(uint8_t s) { //s={0,1...7}
  lcd_databits(SEND_CMD,0xb8|s);
     2e2:	68 2f       	mov	r22, r24
     2e4:	68 6b       	ori	r22, 0xB8	; 184
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     2ec:	08 95       	ret

000002ee <lcd_goto>:
void lcd_goto(uint8_t x,uint8_t y) {
     2ee:	1f 93       	push	r17
     2f0:	16 2f       	mov	r17, r22
	lcd_goto_xblock(x);
     2f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
	lcd_goto_yblock(y);
     2f6:	81 2f       	mov	r24, r17
     2f8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
}
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <lcd_block>:
void lcd_block(uint8_t x,uint8_t y,uint8_t block) {
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	16 2f       	mov	r17, r22
     306:	04 2f       	mov	r16, r20
  lcd_goto_xblock(x);
     308:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
  lcd_goto_yblock(y);
     30c:	81 2f       	mov	r24, r17
     30e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
  lcd_databits(SEND_DATA,block);
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	60 2f       	mov	r22, r16
     316:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret

00000320 <lcd_all>:

void lcd_all(uint8_t w) {
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	f8 2e       	mov	r15, r24
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
     32c:	8b b1       	in	r24, 0x0b	; 11
     32e:	8c 60       	ori	r24, 0x0C	; 12
     330:	8b b9       	out	0x0b, r24	; 11
     332:	80 91 0e 02 	lds	r24, 0x020E
     336:	90 91 0f 02 	lds	r25, 0x020F
     33a:	00 e0       	ldi	r16, 0x00	; 0
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	12 c0       	rjmp	.+36     	; 0x364 <lcd_all+0x44>
  for(i=0;i<8;i++) {
   lcd_goto_yblock(i);
     340:	80 2f       	mov	r24, r16
     342:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
     346:	c0 e0       	ldi	r28, 0x00	; 0
     348:	d0 e0       	ldi	r29, 0x00	; 0
     34a:	04 c0       	rjmp	.+8      	; 0x354 <lcd_all+0x34>
   for(si=0;si<64;si++)
     lcd_databits(SEND_DATA,w);
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	6f 2d       	mov	r22, r15
     350:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     354:	21 96       	adiw	r28, 0x01	; 1
void lcd_all(uint8_t w) {
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
  for(i=0;i<8;i++) {
   lcd_goto_yblock(i);
   for(si=0;si<64;si++)
     356:	c1 34       	cpi	r28, 0x41	; 65
     358:	d1 05       	cpc	r29, r1
     35a:	c1 f7       	brne	.-16     	; 0x34c <lcd_all+0x2c>
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	80 e4       	ldi	r24, 0x40	; 64
     362:	90 e0       	ldi	r25, 0x00	; 0
}

void lcd_all(uint8_t w) {
  unsigned static int i,si;
  CMDPORT|=CSEL1|CSEL2;
  for(i=0;i<8;i++) {
     364:	08 30       	cpi	r16, 0x08	; 8
     366:	11 05       	cpc	r17, r1
     368:	58 f3       	brcs	.-42     	; 0x340 <lcd_all+0x20>
     36a:	90 93 0f 02 	sts	0x020F, r25
     36e:	80 93 0e 02 	sts	0x020E, r24
     372:	10 93 11 02 	sts	0x0211, r17
     376:	00 93 10 02 	sts	0x0210, r16
   lcd_goto_yblock(i);
   for(si=0;si<64;si++)
     lcd_databits(SEND_DATA,w);
  }
}
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e5 e0       	ldi	r30, 0x05	; 5
     380:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__epilogue_restores__+0x1a>

00000384 <lcd_init>:

void lcd_init() {
  CMDDDR=CSEL1|CSEL2|RW|RS|EN|DI;
     384:	8c ef       	ldi	r24, 0xFC	; 252
     386:	8a b9       	out	0x0a, r24	; 10
  CMDPORT=0x00;
     388:	1b b8       	out	0x0b, r1	; 11
  DATADDR=0xff;
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	87 b9       	out	0x07, r24	; 7
  DATAPORT=0x00;
     38e:	18 b8       	out	0x08, r1	; 8
     390:	28 ee       	ldi	r18, 0xE8	; 232
     392:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     394:	48 e8       	ldi	r20, 0x88	; 136
     396:	53 e1       	ldi	r21, 0x13	; 19
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_init+0x1c>
     39a:	ca 01       	movw	r24, r20
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x18>
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	30 40       	sbci	r19, 0x00	; 0
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	2f 3f       	cpi	r18, 0xFF	; 255
     3a8:	38 07       	cpc	r19, r24
     3aa:	b9 f7       	brne	.-18     	; 0x39a <lcd_init+0x16>
  CMDDDR=CSEL1|CSEL2|RW|RS|EN|DI;
  CMDPORT=0x00;
  DATADDR=0xff;
  DATAPORT=0x00;
  delay_ms(1000);
  CMDPORT=RS|CSEL1|CSEL2;
     3ac:	8c e8       	ldi	r24, 0x8C	; 140
     3ae:	8b b9       	out	0x0b, r24	; 11
  lcd_databits(SEND_CMD,0x3f);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	6f e3       	ldi	r22, 0x3F	; 63
     3b4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xc0);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	60 ec       	ldi	r22, 0xC0	; 192
     3bc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0x40);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	60 e4       	ldi	r22, 0x40	; 64
     3c4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xb8);
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	68 eb       	ldi	r22, 0xB8	; 184
     3cc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_all(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 90 01 	call	0x320	; 0x320 <lcd_all>
}
     3d6:	08 95       	ret

000003d8 <lcd_read>:
		x+=6;
	}
}

uint8_t lcd_read(uint8_t x,uint8_t y) {
	lcd_goto(x,y);
     3d8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
	CMDPORT|=DI|RW;
     3dc:	8b b1       	in	r24, 0x0b	; 11
     3de:	80 63       	ori	r24, 0x30	; 48
     3e0:	8b b9       	out	0x0b, r24	; 11
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3e6:	36 e0       	ldi	r19, 0x06	; 6
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <lcd_read+0x18>
     3ea:	23 2f       	mov	r18, r19
     3ec:	2a 95       	dec	r18
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_read+0x14>
     3f0:	01 96       	adiw	r24, 0x01	; 1
	while(delay--)
		_delay_ms(1);
}

void delay_us(unsigned long long  int delay) {
	while(delay--)
     3f2:	87 30       	cpi	r24, 0x07	; 7
     3f4:	91 05       	cpc	r25, r1
     3f6:	c9 f7       	brne	.-14     	; 0x3ea <lcd_read+0x12>

uint8_t lcd_read(uint8_t x,uint8_t y) {
	lcd_goto(x,y);
	CMDPORT|=DI|RW;
	delay_us(6);
	CMDPORT&=~(DI|RW);
     3f8:	8b b1       	in	r24, 0x0b	; 11
     3fa:	8f 7c       	andi	r24, 0xCF	; 207
     3fc:	8b b9       	out	0x0b, r24	; 11
	return(DATAPORT);
     3fe:	88 b1       	in	r24, 0x08	; 8
	
}
     400:	08 95       	ret

00000402 <lcd_pixel>:

inline void lcd_pixel(uint8_t x,uint8_t y) {
     402:	e8 2f       	mov	r30, r24
    lcd_block(x,(y-y%8)/8,1<<(y%8));
     404:	26 2f       	mov	r18, r22
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	c9 01       	movw	r24, r18
     40a:	88 7f       	andi	r24, 0xF8	; 248
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     414:	27 70       	andi	r18, 0x07	; 7
     416:	30 70       	andi	r19, 0x00	; 0
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <lcd_pixel+0x20>
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	2a 95       	dec	r18
     424:	e2 f7       	brpl	.-8      	; 0x41e <lcd_pixel+0x1c>
     426:	8e 2f       	mov	r24, r30
     428:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
}
     42c:	08 95       	ret

0000042e <lcd_pixel_share>:

void lcd_pixel_share(uint8_t x,uint8_t y) {
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	e8 2e       	mov	r14, r24
	lcd_block(x,(y-y%8)/8,(1<<(y%8))|lcd_read(x,(y-y%8)/8));
     438:	06 2f       	mov	r16, r22
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	c8 01       	movw	r24, r16
     43e:	88 7f       	andi	r24, 0xF8	; 248
     440:	68 e0       	ldi	r22, 0x08	; 8
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     448:	f6 2e       	mov	r15, r22
     44a:	8e 2d       	mov	r24, r14
     44c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_read>
     450:	07 70       	andi	r16, 0x07	; 7
     452:	10 70       	andi	r17, 0x00	; 0
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <lcd_pixel_share+0x30>
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	0a 95       	dec	r16
     460:	e2 f7       	brpl	.-8      	; 0x45a <lcd_pixel_share+0x2c>
     462:	48 2f       	mov	r20, r24
     464:	42 2b       	or	r20, r18
     466:	8e 2d       	mov	r24, r14
     468:	6f 2d       	mov	r22, r15
     46a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
}
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	08 95       	ret

00000478 <lcd_line_from_bottom>:

void lcd_line_from_bottom(uint8_t x1,uint8_t y1) {
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e2 e4       	ldi	r30, 0x42	; 66
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x16>
     484:	d8 2e       	mov	r13, r24
	int y=0;
	uint8_t res=0;
	for(y=7;y>(7-((y1-y1%8)/8));y--) {
     486:	e6 2e       	mov	r14, r22
     488:	ff 24       	eor	r15, r15
     48a:	c7 01       	movw	r24, r14
     48c:	88 7f       	andi	r24, 0xF8	; 248
     48e:	68 e0       	ldi	r22, 0x08	; 8
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     496:	00 27       	eor	r16, r16
     498:	11 27       	eor	r17, r17
     49a:	06 1b       	sub	r16, r22
     49c:	17 0b       	sbc	r17, r23
     49e:	09 5f       	subi	r16, 0xF9	; 249
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	c7 e0       	ldi	r28, 0x07	; 7
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	0b c0       	rjmp	.+22     	; 0x4be <lcd_line_from_bottom+0x46>
		lcd_goto_xblock(x1);
     4a8:	8d 2d       	mov	r24, r13
     4aa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     4ae:	8c 2f       	mov	r24, r28
     4b0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_databits(SEND_DATA,0xff);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	6f ef       	ldi	r22, 0xFF	; 255
     4b8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}

void lcd_line_from_bottom(uint8_t x1,uint8_t y1) {
	int y=0;
	uint8_t res=0;
	for(y=7;y>(7-((y1-y1%8)/8));y--) {
     4bc:	21 97       	sbiw	r28, 0x01	; 1
     4be:	0c 17       	cp	r16, r28
     4c0:	1d 07       	cpc	r17, r29
     4c2:	94 f3       	brlt	.-28     	; 0x4a8 <lcd_line_from_bottom+0x30>
		lcd_goto_xblock(x1);
		lcd_goto_yblock(y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto_xblock(x1);
     4c4:	8d 2d       	mov	r24, r13
     4c6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
	lcd_goto_yblock(y);
     4ca:	8c 2f       	mov	r24, r28
     4cc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
     4d0:	27 e0       	ldi	r18, 0x07	; 7
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
	for(y=7;y>=(7-y1%8);y--) {
     4d6:	b7 01       	movw	r22, r14
     4d8:	60 95       	com	r22
     4da:	70 95       	com	r23
     4dc:	67 70       	andi	r22, 0x07	; 7
     4de:	70 70       	andi	r23, 0x00	; 0
		res|=1<<y;
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	0a c0       	rjmp	.+20     	; 0x4fa <lcd_line_from_bottom+0x82>
     4e6:	cf 01       	movw	r24, r30
     4e8:	02 2e       	mov	r0, r18
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <lcd_line_from_bottom+0x78>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <lcd_line_from_bottom+0x74>
     4f4:	48 2b       	or	r20, r24
		lcd_goto_yblock(y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto_xblock(x1);
	lcd_goto_yblock(y);
	for(y=7;y>=(7-y1%8);y--) {
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	30 40       	sbci	r19, 0x00	; 0
     4fa:	26 17       	cp	r18, r22
     4fc:	37 07       	cpc	r19, r23
     4fe:	9c f7       	brge	.-26     	; 0x4e6 <lcd_line_from_bottom+0x6e>
		res|=1<<y;
	}
	if(res) lcd_databits(SEND_DATA,res);
     500:	44 23       	and	r20, r20
     502:	21 f0       	breq	.+8      	; 0x50c <lcd_line_from_bottom+0x94>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	64 2f       	mov	r22, r20
     508:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	e7 e0       	ldi	r30, 0x07	; 7
     512:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x16>

00000516 <lcd_pixel_line_from_left>:

void lcd_pixel_line_from_left(uint8_t y, uint16_t v) {
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e1 e9       	ldi	r30, 0x91	; 145
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x16>
     522:	d8 2e       	mov	r13, r24
     524:	7b 01       	movw	r14, r22
	uint16_t s=(v-v%8)/8,x;
     526:	8b 01       	movw	r16, r22
     528:	23 e0       	ldi	r18, 0x03	; 3
     52a:	16 95       	lsr	r17
     52c:	07 95       	ror	r16
     52e:	2a 95       	dec	r18
     530:	e1 f7       	brne	.-8      	; 0x52a <lcd_pixel_line_from_left+0x14>
     532:	c0 e0       	ldi	r28, 0x00	; 0
     534:	d0 e0       	ldi	r29, 0x00	; 0
     536:	09 c0       	rjmp	.+18     	; 0x54a <lcd_pixel_line_from_left+0x34>
	uint8_t r;
	for(x=0;x<s;x++) {
		lcd_goto(x,y);
     538:	8c 2f       	mov	r24, r28
     53a:	6d 2d       	mov	r22, r13
     53c:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
		lcd_databits(SEND_DATA,0xff);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	6f ef       	ldi	r22, 0xFF	; 255
     544:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}

void lcd_pixel_line_from_left(uint8_t y, uint16_t v) {
	uint16_t s=(v-v%8)/8,x;
	uint8_t r;
	for(x=0;x<s;x++) {
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	c0 17       	cp	r28, r16
     54c:	d1 07       	cpc	r29, r17
     54e:	a0 f3       	brcs	.-24     	; 0x538 <lcd_pixel_line_from_left+0x22>
		lcd_goto(x,y);
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto(x,y);
     550:	80 2f       	mov	r24, r16
     552:	6d 2d       	mov	r22, r13
     554:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_goto>
	s=v%8;
     558:	b7 01       	movw	r22, r14
     55a:	67 70       	andi	r22, 0x07	; 7
     55c:	70 70       	andi	r23, 0x00	; 0
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e0       	ldi	r20, 0x00	; 0
	r=0;
	for(x=0;x<=s;x++) {
		r|=1<<(7-x);
     564:	a7 e0       	ldi	r26, 0x07	; 7
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	e1 e0       	ldi	r30, 0x01	; 1
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	cd 01       	movw	r24, r26
     56e:	82 1b       	sub	r24, r18
     570:	93 0b       	sbc	r25, r19
     572:	ef 01       	movw	r28, r30
     574:	02 c0       	rjmp	.+4      	; 0x57a <lcd_pixel_line_from_left+0x64>
     576:	cc 0f       	add	r28, r28
     578:	dd 1f       	adc	r29, r29
     57a:	8a 95       	dec	r24
     57c:	e2 f7       	brpl	.-8      	; 0x576 <lcd_pixel_line_from_left+0x60>
     57e:	4c 2b       	or	r20, r28
		lcd_databits(SEND_DATA,0xff);
	}
	lcd_goto(x,y);
	s=v%8;
	r=0;
	for(x=0;x<=s;x++) {
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	62 17       	cp	r22, r18
     586:	73 07       	cpc	r23, r19
     588:	88 f7       	brcc	.-30     	; 0x56c <lcd_pixel_line_from_left+0x56>
		r|=1<<(7-x);
	}
	lcd_databits(SEND_DATA,r);
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	64 2f       	mov	r22, r20
     58e:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	e7 e0       	ldi	r30, 0x07	; 7
     598:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x16>

0000059c <lcd_yblockof>:
		x-=FONT_SIZE+1;
		n-=m;
		n/=10;
	}
}
inline uint8_t lcd_yblockof(uint8_t y) {
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	88 7f       	andi	r24, 0xF8	; 248
     5a0:	68 e0       	ldi	r22, 0x08	; 8
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     5a8:	86 2f       	mov	r24, r22
	return((y-y%8)/8);
}
     5aa:	08 95       	ret

000005ac <lcd_constx_line>:
void lcd_constx_line(uint8_t x,uint8_t ymin,uint8_t ymax) {
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	e8 2e       	mov	r14, r24
     5ba:	16 2f       	mov	r17, r22
     5bc:	f4 2e       	mov	r15, r20
     5be:	00 e0       	ldi	r16, 0x00	; 0
	static uint8_t buf;
	buf=0;
	while(ymin<=ymax) {
		buf|=1<<(ymin%8);
     5c0:	c1 e0       	ldi	r28, 0x01	; 1
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
     5c4:	1e c0       	rjmp	.+60     	; 0x602 <lcd_constx_line+0x56>
     5c6:	81 2f       	mov	r24, r17
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	87 70       	andi	r24, 0x07	; 7
     5cc:	90 70       	andi	r25, 0x00	; 0
     5ce:	9e 01       	movw	r18, r28
     5d0:	08 2e       	mov	r0, r24
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <lcd_constx_line+0x2c>
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <lcd_constx_line+0x28>
     5dc:	02 2b       	or	r16, r18
		if(((ymin%8)==7)||(ymin==ymax)) {
     5de:	07 97       	sbiw	r24, 0x07	; 7
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <lcd_constx_line+0x3a>
     5e2:	1f 15       	cp	r17, r15
     5e4:	69 f4       	brne	.+26     	; 0x600 <lcd_constx_line+0x54>
			lcd_goto_xblock(x);
     5e6:	8e 2d       	mov	r24, r14
     5e8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
			lcd_goto_yblock(lcd_yblockof(ymin));
     5ec:	81 2f       	mov	r24, r17
     5ee:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_yblockof>
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
			lcd_databits(SEND_DATA,buf);
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	60 2f       	mov	r22, r16
     5fa:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
     5fe:	00 e0       	ldi	r16, 0x00	; 0
			buf=0;
		}
		ymin++;
     600:	1f 5f       	subi	r17, 0xFF	; 255
	return((y-y%8)/8);
}
void lcd_constx_line(uint8_t x,uint8_t ymin,uint8_t ymax) {
	static uint8_t buf;
	buf=0;
	while(ymin<=ymax) {
     602:	f1 16       	cp	r15, r17
     604:	00 f7       	brcc	.-64     	; 0x5c6 <lcd_constx_line+0x1a>
     606:	00 93 0c 02 	sts	0x020C, r16
			lcd_databits(SEND_DATA,buf);
			buf=0;
		}
		ymin++;
	}
}
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	e6 e0       	ldi	r30, 0x06	; 6
     610:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__+0x18>

00000614 <buttons_update>:

//temp
uint16_t ymin,ymax,c,c1;

inline void buttons_update() {
	right_state1=right_state();
     614:	83 b1       	in	r24, 0x03	; 3
     616:	82 70       	andi	r24, 0x02	; 2
     618:	80 93 01 02 	sts	0x0201, r24
	left_state1=left_state();
     61c:	83 b1       	in	r24, 0x03	; 3
     61e:	84 70       	andi	r24, 0x04	; 4
     620:	80 93 00 02 	sts	0x0200, r24
	top_state1=top_state();
     624:	83 b1       	in	r24, 0x03	; 3
     626:	81 70       	andi	r24, 0x01	; 1
     628:	80 93 ff 01 	sts	0x01FF, r24
	up_state1=up_state();
     62c:	83 b1       	in	r24, 0x03	; 3
     62e:	80 71       	andi	r24, 0x10	; 16
     630:	80 93 02 02 	sts	0x0202, r24
	down_state1=down_state();
     634:	83 b1       	in	r24, 0x03	; 3
     636:	80 72       	andi	r24, 0x20	; 32
     638:	80 93 03 02 	sts	0x0203, r24
	pause_state1=pause_state();
     63c:	83 b1       	in	r24, 0x03	; 3
     63e:	88 70       	andi	r24, 0x08	; 8
     640:	80 93 04 02 	sts	0x0204, r24
}
     644:	08 95       	ret

00000646 <todisplay>:
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     646:	80 91 f1 01 	lds	r24, 0x01F1
     64a:	8f 3f       	cpi	r24, 0xFF	; 255
     64c:	21 f4       	brne	.+8      	; 0x656 <todisplay+0x10>
     64e:	96 95       	lsr	r25
     650:	8f e3       	ldi	r24, 0x3F	; 63
     652:	89 1b       	sub	r24, r25
     654:	08 95       	ret
	else return(DISPLAY_Y-1-(a>>10));
     656:	96 95       	lsr	r25
     658:	96 95       	lsr	r25
     65a:	8f e3       	ldi	r24, 0x3F	; 63
     65c:	89 1b       	sub	r24, r25
}
     65e:	08 95       	ret

00000660 <draw_signal>:
		if(menu_state==MENU_MODE) lcd_str("mode",0,1);
		lcd_arrows(0,2);
	}
}

void draw_signal() {
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
	for(m=0;m<ALL_N;m++) {
     664:	10 92 fa 01 	sts	0x01FA, r1
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
	else return(DISPLAY_Y-1-(a>>10));
     668:	1f e3       	ldi	r17, 0x3F	; 63
		}
		if(menu_state==-1) {
			for(s=0;s<8;s++) lcd_block(u,s,0);
		}
		else {
			for(s=4;s<8;s++) lcd_block(u,s,0);
     66a:	04 e0       	ldi	r16, 0x04	; 4
     66c:	46 c1       	rjmp	.+652    	; 0x8fa <draw_signal+0x29a>
	}
}

void draw_signal() {
	for(m=0;m<ALL_N;m++) {
		c=todisplay(capture[m]);
     66e:	a6 2f       	mov	r26, r22
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	fd 01       	movw	r30, r26
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e6 56       	subi	r30, 0x66	; 102
     67a:	fb 4f       	sbci	r31, 0xFB	; 251
     67c:	81 81       	ldd	r24, Z+1	; 0x01
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     67e:	70 91 f1 01 	lds	r23, 0x01F1
     682:	7f 3f       	cpi	r23, 0xFF	; 255
     684:	11 f4       	brne	.+4      	; 0x68a <draw_signal+0x2a>
     686:	86 95       	lsr	r24
     688:	02 c0       	rjmp	.+4      	; 0x68e <draw_signal+0x2e>
	else return(DISPLAY_Y-1-(a>>10));
     68a:	86 95       	lsr	r24
     68c:	86 95       	lsr	r24
     68e:	91 2f       	mov	r25, r17
     690:	98 1b       	sub	r25, r24
	}
}

void draw_signal() {
	for(m=0;m<ALL_N;m++) {
		c=todisplay(capture[m]);
     692:	49 2f       	mov	r20, r25
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	50 93 98 04 	sts	0x0498, r21
     69a:	40 93 97 04 	sts	0x0497, r20
		if(mode==MODE_DUAL)  {
     69e:	80 91 ee 01 	lds	r24, 0x01EE
     6a2:	84 30       	cpi	r24, 0x04	; 4
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <draw_signal+0x48>
     6a6:	7e c0       	rjmp	.+252    	; 0x7a4 <draw_signal+0x144>
			//prev
			if(m>1) {
     6a8:	62 30       	cpi	r22, 0x02	; 2
     6aa:	60 f1       	brcs	.+88     	; 0x704 <draw_signal+0xa4>
				c1=todisplay(capture[m-2]);
     6ac:	fd 01       	movw	r30, r26
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ea 56       	subi	r30, 0x6A	; 106
     6b4:	fb 4f       	sbci	r31, 0xFB	; 251
     6b6:	81 81       	ldd	r24, Z+1	; 0x01
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     6b8:	7f 3f       	cpi	r23, 0xFF	; 255
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <draw_signal+0x60>
     6bc:	86 95       	lsr	r24
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <draw_signal+0x64>
	else return(DISPLAY_Y-1-(a>>10));
     6c0:	86 95       	lsr	r24
     6c2:	86 95       	lsr	r24
     6c4:	91 2f       	mov	r25, r17
     6c6:	98 1b       	sub	r25, r24
	for(m=0;m<ALL_N;m++) {
		c=todisplay(capture[m]);
		if(mode==MODE_DUAL)  {
			//prev
			if(m>1) {
				c1=todisplay(capture[m-2]);
     6c8:	29 2f       	mov	r18, r25
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	30 93 96 04 	sts	0x0496, r19
     6d0:	20 93 95 04 	sts	0x0495, r18
				if(c1<c) ymin=(c1+c)>>1;
     6d4:	24 17       	cp	r18, r20
     6d6:	35 07       	cpc	r19, r21
     6d8:	48 f4       	brcc	.+18     	; 0x6ec <draw_signal+0x8c>
     6da:	c9 01       	movw	r24, r18
     6dc:	84 0f       	add	r24, r20
     6de:	95 1f       	adc	r25, r21
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	90 93 9b 05 	sts	0x059B, r25
     6e8:	80 93 9a 05 	sts	0x059A, r24
				if(c1>c) ymax=(c1+c)>>1;
     6ec:	42 17       	cp	r20, r18
     6ee:	53 07       	cpc	r21, r19
     6f0:	88 f4       	brcc	.+34     	; 0x714 <draw_signal+0xb4>
     6f2:	24 0f       	add	r18, r20
     6f4:	35 1f       	adc	r19, r21
     6f6:	36 95       	lsr	r19
     6f8:	27 95       	ror	r18
     6fa:	30 93 9f 05 	sts	0x059F, r19
     6fe:	20 93 9e 05 	sts	0x059E, r18
     702:	08 c0       	rjmp	.+16     	; 0x714 <draw_signal+0xb4>
			}
			else {
				ymin=c;
     704:	50 93 9b 05 	sts	0x059B, r21
     708:	40 93 9a 05 	sts	0x059A, r20
				ymax=c;
     70c:	50 93 9f 05 	sts	0x059F, r21
     710:	40 93 9e 05 	sts	0x059E, r20
			}
			
			//next
			if(m<(ALL_N-2)) {
     714:	6e 37       	cpi	r22, 0x7E	; 126
     716:	f0 f5       	brcc	.+124    	; 0x794 <draw_signal+0x134>
				c1=todisplay(capture[m+2]);
     718:	aa 0f       	add	r26, r26
     71a:	bb 1f       	adc	r27, r27
     71c:	a2 56       	subi	r26, 0x62	; 98
     71e:	bb 4f       	sbci	r27, 0xFB	; 251
     720:	11 96       	adiw	r26, 0x01	; 1
     722:	ec 91       	ld	r30, X
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     724:	7f 3f       	cpi	r23, 0xFF	; 255
     726:	29 f4       	brne	.+10     	; 0x732 <draw_signal+0xd2>
     728:	e6 95       	lsr	r30
     72a:	81 2f       	mov	r24, r17
     72c:	8e 1b       	sub	r24, r30
     72e:	e8 2f       	mov	r30, r24
     730:	05 c0       	rjmp	.+10     	; 0x73c <draw_signal+0xdc>
	else return(DISPLAY_Y-1-(a>>10));
     732:	e6 95       	lsr	r30
     734:	e6 95       	lsr	r30
     736:	91 2f       	mov	r25, r17
     738:	9e 1b       	sub	r25, r30
     73a:	e9 2f       	mov	r30, r25
				ymax=c;
			}
			
			//next
			if(m<(ALL_N-2)) {
				c1=todisplay(capture[m+2]);
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	f0 93 96 04 	sts	0x0496, r31
     742:	e0 93 95 04 	sts	0x0495, r30
				if(c1<c) ymin=min(ymin,(c+c1)>>1);
     746:	e4 17       	cp	r30, r20
     748:	f5 07       	cpc	r31, r21
     74a:	88 f4       	brcc	.+34     	; 0x76e <draw_signal+0x10e>
     74c:	cf 01       	movw	r24, r30
     74e:	84 0f       	add	r24, r20
     750:	95 1f       	adc	r25, r21
     752:	20 91 9a 05 	lds	r18, 0x059A
     756:	30 91 9b 05 	lds	r19, 0x059B
     75a:	96 95       	lsr	r25
     75c:	87 95       	ror	r24
     75e:	28 17       	cp	r18, r24
     760:	39 07       	cpc	r19, r25
     762:	08 f4       	brcc	.+2      	; 0x766 <draw_signal+0x106>
     764:	c9 01       	movw	r24, r18
     766:	90 93 9b 05 	sts	0x059B, r25
     76a:	80 93 9a 05 	sts	0x059A, r24
				if(c1>c) ymax=max(ymax,(c1+c)>>1);
     76e:	4e 17       	cp	r20, r30
     770:	5f 07       	cpc	r21, r31
     772:	80 f4       	brcc	.+32     	; 0x794 <draw_signal+0x134>
     774:	e4 0f       	add	r30, r20
     776:	f5 1f       	adc	r31, r21
     778:	80 91 9e 05 	lds	r24, 0x059E
     77c:	90 91 9f 05 	lds	r25, 0x059F
     780:	f6 95       	lsr	r31
     782:	e7 95       	ror	r30
     784:	e8 17       	cp	r30, r24
     786:	f9 07       	cpc	r31, r25
     788:	08 f4       	brcc	.+2      	; 0x78c <draw_signal+0x12c>
     78a:	fc 01       	movw	r30, r24
     78c:	f0 93 9f 05 	sts	0x059F, r31
     790:	e0 93 9e 05 	sts	0x059E, r30
			}
			
			u=m/2;
     794:	86 2f       	mov	r24, r22
     796:	86 95       	lsr	r24
     798:	80 93 a0 05 	sts	0x05A0, r24
			m++;
     79c:	6f 5f       	subi	r22, 0xFF	; 255
     79e:	60 93 fa 01 	sts	0x01FA, r22
     7a2:	79 c0       	rjmp	.+242    	; 0x896 <draw_signal+0x236>
		}
		else {
			
			//prev
			if(m) {
     7a4:	66 23       	and	r22, r22
     7a6:	61 f1       	breq	.+88     	; 0x800 <draw_signal+0x1a0>
				c1=todisplay(capture[m-1]);
     7a8:	fd 01       	movw	r30, r26
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e8 56       	subi	r30, 0x68	; 104
     7b0:	fb 4f       	sbci	r31, 0xFB	; 251
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     7b4:	7f 3f       	cpi	r23, 0xFF	; 255
     7b6:	11 f4       	brne	.+4      	; 0x7bc <draw_signal+0x15c>
     7b8:	86 95       	lsr	r24
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <draw_signal+0x160>
	else return(DISPLAY_Y-1-(a>>10));
     7bc:	86 95       	lsr	r24
     7be:	86 95       	lsr	r24
     7c0:	91 2f       	mov	r25, r17
     7c2:	98 1b       	sub	r25, r24
		}
		else {
			
			//prev
			if(m) {
				c1=todisplay(capture[m-1]);
     7c4:	29 2f       	mov	r18, r25
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	30 93 96 04 	sts	0x0496, r19
     7cc:	20 93 95 04 	sts	0x0495, r18
				if(c1<c) ymin=(c1+c)>>1;
     7d0:	24 17       	cp	r18, r20
     7d2:	35 07       	cpc	r19, r21
     7d4:	48 f4       	brcc	.+18     	; 0x7e8 <draw_signal+0x188>
     7d6:	c9 01       	movw	r24, r18
     7d8:	84 0f       	add	r24, r20
     7da:	95 1f       	adc	r25, r21
     7dc:	96 95       	lsr	r25
     7de:	87 95       	ror	r24
     7e0:	90 93 9b 05 	sts	0x059B, r25
     7e4:	80 93 9a 05 	sts	0x059A, r24
				if(c1>c) ymax=(c1+c)>>1;
     7e8:	42 17       	cp	r20, r18
     7ea:	53 07       	cpc	r21, r19
     7ec:	90 f4       	brcc	.+36     	; 0x812 <draw_signal+0x1b2>
     7ee:	24 0f       	add	r18, r20
     7f0:	35 1f       	adc	r19, r21
     7f2:	36 95       	lsr	r19
     7f4:	27 95       	ror	r18
     7f6:	30 93 9f 05 	sts	0x059F, r19
     7fa:	20 93 9e 05 	sts	0x059E, r18
     7fe:	09 c0       	rjmp	.+18     	; 0x812 <draw_signal+0x1b2>
			}
			else {
				ymin=c;
     800:	50 93 9b 05 	sts	0x059B, r21
     804:	40 93 9a 05 	sts	0x059A, r20
				ymax=c;
     808:	50 93 9f 05 	sts	0x059F, r21
     80c:	40 93 9e 05 	sts	0x059E, r20
     810:	02 c0       	rjmp	.+4      	; 0x816 <draw_signal+0x1b6>
			}
			
			//next
			if(m<(ALL_N-1)) {
     812:	6f 37       	cpi	r22, 0x7F	; 127
     814:	f0 f5       	brcc	.+124    	; 0x892 <draw_signal+0x232>
				c1=todisplay(capture[m+1]);
     816:	aa 0f       	add	r26, r26
     818:	bb 1f       	adc	r27, r27
     81a:	a4 56       	subi	r26, 0x64	; 100
     81c:	bb 4f       	sbci	r27, 0xFB	; 251
     81e:	11 96       	adiw	r26, 0x01	; 1
     820:	ec 91       	ld	r30, X
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
}

inline uint8_t todisplay(uint16_t a) {
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
     822:	7f 3f       	cpi	r23, 0xFF	; 255
     824:	29 f4       	brne	.+10     	; 0x830 <draw_signal+0x1d0>
     826:	e6 95       	lsr	r30
     828:	81 2f       	mov	r24, r17
     82a:	8e 1b       	sub	r24, r30
     82c:	e8 2f       	mov	r30, r24
     82e:	05 c0       	rjmp	.+10     	; 0x83a <draw_signal+0x1da>
	else return(DISPLAY_Y-1-(a>>10));
     830:	e6 95       	lsr	r30
     832:	e6 95       	lsr	r30
     834:	91 2f       	mov	r25, r17
     836:	9e 1b       	sub	r25, r30
     838:	e9 2f       	mov	r30, r25
				ymax=c;
			}
			
			//next
			if(m<(ALL_N-1)) {
				c1=todisplay(capture[m+1]);
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	f0 93 96 04 	sts	0x0496, r31
     840:	e0 93 95 04 	sts	0x0495, r30
				if(c1<c) ymin=min(ymin,(c+c1)>>1);
     844:	e4 17       	cp	r30, r20
     846:	f5 07       	cpc	r31, r21
     848:	88 f4       	brcc	.+34     	; 0x86c <draw_signal+0x20c>
     84a:	cf 01       	movw	r24, r30
     84c:	84 0f       	add	r24, r20
     84e:	95 1f       	adc	r25, r21
     850:	20 91 9a 05 	lds	r18, 0x059A
     854:	30 91 9b 05 	lds	r19, 0x059B
     858:	96 95       	lsr	r25
     85a:	87 95       	ror	r24
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	08 f4       	brcc	.+2      	; 0x864 <draw_signal+0x204>
     862:	c9 01       	movw	r24, r18
     864:	90 93 9b 05 	sts	0x059B, r25
     868:	80 93 9a 05 	sts	0x059A, r24
				if(c1>c) ymax=max(ymax,(c1+c)>>1);
     86c:	4e 17       	cp	r20, r30
     86e:	5f 07       	cpc	r21, r31
     870:	80 f4       	brcc	.+32     	; 0x892 <draw_signal+0x232>
     872:	e4 0f       	add	r30, r20
     874:	f5 1f       	adc	r31, r21
     876:	80 91 9e 05 	lds	r24, 0x059E
     87a:	90 91 9f 05 	lds	r25, 0x059F
     87e:	f6 95       	lsr	r31
     880:	e7 95       	ror	r30
     882:	e8 17       	cp	r30, r24
     884:	f9 07       	cpc	r31, r25
     886:	08 f4       	brcc	.+2      	; 0x88a <draw_signal+0x22a>
     888:	fc 01       	movw	r30, r24
     88a:	f0 93 9f 05 	sts	0x059F, r31
     88e:	e0 93 9e 05 	sts	0x059E, r30
			}
			u=m;
     892:	60 93 a0 05 	sts	0x05A0, r22
		}
		if(menu_state==-1) {
     896:	7f 3f       	cpi	r23, 0xFF	; 255
     898:	91 f4       	brne	.+36     	; 0x8be <draw_signal+0x25e>
			for(s=0;s<8;s++) lcd_block(u,s,0);
     89a:	10 92 99 04 	sts	0x0499, r1
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <draw_signal+0x254>
     8a0:	80 91 a0 05 	lds	r24, 0x05A0
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     8aa:	80 91 99 04 	lds	r24, 0x0499
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	80 93 99 04 	sts	0x0499, r24
     8b4:	60 91 99 04 	lds	r22, 0x0499
     8b8:	68 30       	cpi	r22, 0x08	; 8
     8ba:	90 f3       	brcs	.-28     	; 0x8a0 <draw_signal+0x240>
     8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <draw_signal+0x280>
		}
		else {
			for(s=4;s<8;s++) lcd_block(u,s,0);
     8be:	00 93 99 04 	sts	0x0499, r16
     8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <draw_signal+0x278>
     8c4:	80 91 a0 05 	lds	r24, 0x05A0
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
     8ce:	80 91 99 04 	lds	r24, 0x0499
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 99 04 	sts	0x0499, r24
     8d8:	60 91 99 04 	lds	r22, 0x0499
     8dc:	68 30       	cpi	r22, 0x08	; 8
     8de:	90 f3       	brcs	.-28     	; 0x8c4 <draw_signal+0x264>
		}
		lcd_constx_line(u,ymin,ymax);
     8e0:	80 91 a0 05 	lds	r24, 0x05A0
     8e4:	60 91 9a 05 	lds	r22, 0x059A
     8e8:	40 91 9e 05 	lds	r20, 0x059E
     8ec:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_constx_line>
		lcd_arrows(0,2);
	}
}

void draw_signal() {
	for(m=0;m<ALL_N;m++) {
     8f0:	80 91 fa 01 	lds	r24, 0x01FA
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
     8f6:	80 93 fa 01 	sts	0x01FA, r24
     8fa:	60 91 fa 01 	lds	r22, 0x01FA
     8fe:	67 ff       	sbrs	r22, 7
     900:	b6 ce       	rjmp	.-660    	; 0x66e <draw_signal+0xe>
		else {
			for(s=4;s<8;s++) lcd_block(u,s,0);
		}
		lcd_constx_line(u,ymin,ymax);
	}
}
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <__vector_14>:

ISR(TIMER1_COMPB_vect) {
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	8f 93       	push	r24
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
	TCNT1=0;
     918:	10 92 85 00 	sts	0x0085, r1
     91c:	10 92 84 00 	sts	0x0084, r1
	ADCSRA|=1<<6;
     920:	ea e7       	ldi	r30, 0x7A	; 122
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	80 64       	ori	r24, 0x40	; 64
     928:	80 83       	st	Z, r24
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	8f 91       	pop	r24
     930:	0f 90       	pop	r0
     932:	0f be       	out	0x3f, r0	; 63
     934:	0f 90       	pop	r0
     936:	1f 90       	pop	r1
     938:	18 95       	reti

0000093a <__vector_24>:

ISR(ADC_vect) {
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
	if(running&&((current<ALL_N)||mode==MODE_UART)) {
     95a:	80 91 f0 01 	lds	r24, 0x01F0
     95e:	88 23       	and	r24, r24
     960:	09 f4       	brne	.+2      	; 0x964 <__vector_24+0x2a>
     962:	82 c0       	rjmp	.+260    	; 0xa68 <__vector_24+0x12e>
     964:	80 91 fe 01 	lds	r24, 0x01FE
     968:	87 ff       	sbrs	r24, 7
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__vector_24+0x3c>
     96c:	80 91 ee 01 	lds	r24, 0x01EE
     970:	85 30       	cpi	r24, 0x05	; 5
     972:	09 f0       	breq	.+2      	; 0x976 <__vector_24+0x3c>
     974:	79 c0       	rjmp	.+242    	; 0xa68 <__vector_24+0x12e>
		if(mode==MODE_UART) current=ALL_N-1;
     976:	a0 91 ee 01 	lds	r26, 0x01EE
     97a:	a5 30       	cpi	r26, 0x05	; 5
     97c:	19 f4       	brne	.+6      	; 0x984 <__vector_24+0x4a>
     97e:	8f e7       	ldi	r24, 0x7F	; 127
     980:	80 93 fe 01 	sts	0x01FE, r24
		if(mode==MODE_SIGNAL||mode==MODE_SPECTRUM||mode==MODE_DUAL||mode==MODE_UART_BUF) {
     984:	8a 2f       	mov	r24, r26
     986:	81 50       	subi	r24, 0x01	; 1
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	28 f0       	brcs	.+10     	; 0x996 <__vector_24+0x5c>
     98c:	a4 30       	cpi	r26, 0x04	; 4
     98e:	19 f0       	breq	.+6      	; 0x996 <__vector_24+0x5c>
     990:	a6 30       	cpi	r26, 0x06	; 6
     992:	09 f0       	breq	.+2      	; 0x996 <__vector_24+0x5c>
     994:	42 c0       	rjmp	.+132    	; 0xa1a <__vector_24+0xe0>
			if(adc_reset_c>=adc_reset) {
     996:	40 91 0a 02 	lds	r20, 0x020A
     99a:	50 91 0b 02 	lds	r21, 0x020B
     99e:	80 91 f6 01 	lds	r24, 0x01F6
     9a2:	90 91 f7 01 	lds	r25, 0x01F7
     9a6:	48 17       	cp	r20, r24
     9a8:	59 07       	cpc	r21, r25
     9aa:	38 f0       	brcs	.+14     	; 0x9ba <__vector_24+0x80>
				adc_reset_c=0;
     9ac:	10 92 0b 02 	sts	0x020B, r1
     9b0:	10 92 0a 02 	sts	0x020A, r1
				array_filled=0;
     9b4:	10 92 06 02 	sts	0x0206, r1
     9b8:	2d c0       	rjmp	.+90     	; 0xa14 <__vector_24+0xda>
				current=0;
				return;
			}
			if(array_filled&&(abs(ADC-capture[current])>adc_error)&&current<adc_check) {
     9ba:	80 91 06 02 	lds	r24, 0x0206
     9be:	88 23       	and	r24, r24
     9c0:	61 f1       	breq	.+88     	; 0xa1a <__vector_24+0xe0>
     9c2:	80 91 78 00 	lds	r24, 0x0078
     9c6:	90 91 79 00 	lds	r25, 0x0079
     9ca:	20 91 78 00 	lds	r18, 0x0078
     9ce:	30 91 79 00 	lds	r19, 0x0079
     9d2:	80 91 fe 01 	lds	r24, 0x01FE
     9d6:	68 2f       	mov	r22, r24
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	fb 01       	movw	r30, r22
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	e6 56       	subi	r30, 0x66	; 102
     9e2:	fb 4f       	sbci	r31, 0xFB	; 251
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	28 1b       	sub	r18, r24
     9ea:	39 0b       	sbc	r19, r25
     9ec:	80 91 f2 01 	lds	r24, 0x01F2
     9f0:	90 91 f3 01 	lds	r25, 0x01F3
     9f4:	82 17       	cp	r24, r18
     9f6:	93 07       	cpc	r25, r19
     9f8:	80 f4       	brcc	.+32     	; 0xa1a <__vector_24+0xe0>
     9fa:	80 91 f4 01 	lds	r24, 0x01F4
     9fe:	90 91 f5 01 	lds	r25, 0x01F5
     a02:	68 17       	cp	r22, r24
     a04:	79 07       	cpc	r23, r25
     a06:	48 f4       	brcc	.+18     	; 0xa1a <__vector_24+0xe0>
				adc_reset_c++;
     a08:	4f 5f       	subi	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	50 93 0b 02 	sts	0x020B, r21
     a10:	40 93 0a 02 	sts	0x020A, r20
				//error_storage=current;
				current=0;
     a14:	10 92 fe 01 	sts	0x01FE, r1
     a18:	27 c0       	rjmp	.+78     	; 0xa68 <__vector_24+0x12e>
				return;
			}
		}
		capture[current]=ADC>>1;
     a1a:	40 91 fe 01 	lds	r20, 0x01FE
     a1e:	24 2f       	mov	r18, r20
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	80 91 78 00 	lds	r24, 0x0078
     a26:	90 91 79 00 	lds	r25, 0x0079
     a2a:	f9 01       	movw	r30, r18
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	e6 56       	subi	r30, 0x66	; 102
     a32:	fb 4f       	sbci	r31, 0xFB	; 251
     a34:	96 95       	lsr	r25
     a36:	87 95       	ror	r24
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
		if(mode==MODE_XY) {
     a3c:	a3 30       	cpi	r26, 0x03	; 3
     a3e:	79 f4       	brne	.+30     	; 0xa5e <__vector_24+0x124>
			if(!(current%2)) {
     a40:	40 fd       	sbrc	r20, 0
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <__vector_24+0x11c>
				ADMUX=0b01100001;
     a44:	81 e6       	ldi	r24, 0x61	; 97
     a46:	80 93 7c 00 	sts	0x007C, r24
				ADCSRA|=1<<6;
     a4a:	80 91 7a 00 	lds	r24, 0x007A
     a4e:	80 64       	ori	r24, 0x40	; 64
     a50:	80 93 7a 00 	sts	0x007A, r24
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <__vector_24+0x128>
			}
			else ADMUX=0b01100000;
     a56:	80 e6       	ldi	r24, 0x60	; 96
     a58:	80 93 7c 00 	sts	0x007C, r24
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <__vector_24+0x128>
		}
		if(mode!=MODE_UART) current++;
     a5e:	a5 30       	cpi	r26, 0x05	; 5
     a60:	19 f0       	breq	.+6      	; 0xa68 <__vector_24+0x12e>
     a62:	4f 5f       	subi	r20, 0xFF	; 255
     a64:	40 93 fe 01 	sts	0x01FE, r20
	}
}
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <lcd_sym>:
  lcd_databits(SEND_CMD,0xc0);
  lcd_databits(SEND_CMD,0x40);
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
	static uint8_t t;
	for(t=0;t<5;t++)
     a8e:	10 92 0d 02 	sts	0x020D, r1
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
     a92:	95 e0       	ldi	r25, 0x05	; 5
     a94:	89 9f       	mul	r24, r25
     a96:	e0 01       	movw	r28, r0
     a98:	11 24       	eor	r1, r1
     a9a:	0c c0       	rjmp	.+24     	; 0xab4 <lcd_sym+0x2c>
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
	static uint8_t t;
	for(t=0;t<5;t++)
     a9c:	ce 01       	movw	r24, r28
     a9e:	81 0f       	add	r24, r17
     aa0:	91 1d       	adc	r25, r1
     aa2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__eerd_byte_m644>
     aa6:	68 2f       	mov	r22, r24
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
  lcd_databits(SEND_CMD,0xb8);
  lcd_all(0);
}
void lcd_sym(uint8_t sym) {
	static uint8_t t;
	for(t=0;t<5;t++)
     aae:	1f 5f       	subi	r17, 0xFF	; 255
     ab0:	10 93 0d 02 	sts	0x020D, r17
     ab4:	10 91 0d 02 	lds	r17, 0x020D
     ab8:	15 30       	cpi	r17, 0x05	; 5
     aba:	80 f3       	brcs	.-32     	; 0xa9c <lcd_sym+0x14>
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
	lcd_databits(SEND_DATA,0);
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	08 95       	ret

00000acc <lcd_num_from_right>:
	for(x=0;x<=s;x++) {
		r|=1<<(7-x);
	}
	lcd_databits(SEND_DATA,r);
}
void lcd_num_from_right(unsigned int maxx,unsigned int y,uint32_t n) {
     acc:	a0 e0       	ldi	r26, 0x00	; 0
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	ec e6       	ldi	r30, 0x6C	; 108
     ad2:	f5 e0       	ldi	r31, 0x05	; 5
     ad4:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__prologue_saves__+0xe>
     ad8:	96 2e       	mov	r9, r22
     ada:	59 01       	movw	r10, r18
     adc:	6a 01       	movw	r12, r20
	short unsigned int m,x=maxx-FONT_SIZE-1;
     ade:	ec 01       	movw	r28, r24
     ae0:	26 97       	sbiw	r28, 0x06	; 6
	if(!n) {
     ae2:	21 15       	cp	r18, r1
     ae4:	31 05       	cpc	r19, r1
     ae6:	41 05       	cpc	r20, r1
     ae8:	51 05       	cpc	r21, r1
     aea:	91 f5       	brne	.+100    	; 0xb50 <lcd_num_from_right+0x84>
		lcd_goto_xblock(x);
     aec:	8c 2f       	mov	r24, r28
     aee:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     af2:	89 2d       	mov	r24, r9
     af4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_sym('0');
     af8:	80 e3       	ldi	r24, 0x30	; 48
     afa:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_sym>
     afe:	28 c0       	rjmp	.+80     	; 0xb50 <lcd_num_from_right+0x84>
	}
	while(n) {
		m=n%10;
     b00:	c6 01       	movw	r24, r12
     b02:	b5 01       	movw	r22, r10
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__udivmodsi4>
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
		lcd_goto_xblock(x);
     b14:	8c 2f       	mov	r24, r28
     b16:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
		lcd_goto_yblock(y);
     b1a:	89 2d       	mov	r24, r9
     b1c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		lcd_sym('0'+m);
     b20:	8e 2d       	mov	r24, r14
     b22:	80 5d       	subi	r24, 0xD0	; 208
     b24:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_sym>
		x-=FONT_SIZE+1;
     b28:	26 97       	sbiw	r28, 0x06	; 6
		n-=m;
     b2a:	c7 01       	movw	r24, r14
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	a8 1a       	sub	r10, r24
     b32:	b9 0a       	sbc	r11, r25
     b34:	ca 0a       	sbc	r12, r26
     b36:	db 0a       	sbc	r13, r27
		n/=10;
     b38:	c6 01       	movw	r24, r12
     b3a:	b5 01       	movw	r22, r10
     b3c:	2a e0       	ldi	r18, 0x0A	; 10
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__udivmodsi4>
     b48:	c9 01       	movw	r24, r18
     b4a:	da 01       	movw	r26, r20
     b4c:	5c 01       	movw	r10, r24
     b4e:	6d 01       	movw	r12, r26
	if(!n) {
		lcd_goto_xblock(x);
		lcd_goto_yblock(y);
		lcd_sym('0');
	}
	while(n) {
     b50:	a1 14       	cp	r10, r1
     b52:	b1 04       	cpc	r11, r1
     b54:	c1 04       	cpc	r12, r1
     b56:	d1 04       	cpc	r13, r1
     b58:	99 f6       	brne	.-90     	; 0xb00 <lcd_num_from_right+0x34>
		lcd_sym('0'+m);
		x-=FONT_SIZE+1;
		n-=m;
		n/=10;
	}
}
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	eb e0       	ldi	r30, 0x0B	; 11
     b60:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__epilogue_restores__+0xe>

00000b64 <lcd_str>:
		lcd_databits(SEND_DATA,eeprom_read_byte((uint8_t*) (5*sym+t)));
	lcd_databits(SEND_DATA,0);
}


void lcd_str(char* s,uint8_t x,uint8_t y) {
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	ec 01       	movw	r28, r24
     b6e:	16 2f       	mov	r17, r22
     b70:	04 2f       	mov	r16, r20
     b72:	0a c0       	rjmp	.+20     	; 0xb88 <lcd_str+0x24>
	while(*s) {
		if(x!=-1&&y!=-1) {
			lcd_goto_xblock(x);
     b74:	81 2f       	mov	r24, r17
     b76:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
			lcd_goto_yblock(y);
     b7a:	80 2f       	mov	r24, r16
     b7c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
		}
		lcd_sym(*s++);
     b80:	89 91       	ld	r24, Y+
     b82:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_sym>
		x+=6;
     b86:	1a 5f       	subi	r17, 0xFA	; 250
	lcd_databits(SEND_DATA,0);
}


void lcd_str(char* s,uint8_t x,uint8_t y) {
	while(*s) {
     b88:	88 81       	ld	r24, Y
     b8a:	88 23       	and	r24, r24
     b8c:	99 f7       	brne	.-26     	; 0xb74 <lcd_str+0x10>
			lcd_goto_yblock(y);
		}
		lcd_sym(*s++);
		x+=6;
	}
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <draw_menu>:
	if(menu_state==-1) return(DISPLAY_Y-1-(a>>9));
	else return(DISPLAY_Y-1-(a>>10));
}

void draw_menu() {
	if(menu_state>MENU_MAX) {
     b98:	80 91 f1 01 	lds	r24, 0x01F1
     b9c:	8a 30       	cpi	r24, 0x0A	; 10
     b9e:	0c f4       	brge	.+2      	; 0xba2 <draw_menu+0xa>
     ba0:	8c c1       	rjmp	.+792    	; 0xeba <draw_menu+0x322>
		if(menu_state==(MENU_MAX+MENU_ADCPERIOD)) {
     ba2:	8b 30       	cpi	r24, 0x0B	; 11
     ba4:	31 f5       	brne	.+76     	; 0xbf2 <draw_menu+0x5a>
			lcd_str("adc period",0,0);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_pixel_line_from_left(1,(adc_period-ADC_PERIOD_MIN)>>3);
     bb2:	60 91 8a 00 	lds	r22, 0x008A
     bb6:	70 91 8b 00 	lds	r23, 0x008B
     bba:	60 55       	subi	r22, 0x50	; 80
     bbc:	70 40       	sbci	r23, 0x00	; 0
     bbe:	33 e0       	ldi	r19, 0x03	; 3
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	3a 95       	dec	r19
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <draw_menu+0x28>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_pixel_line_from_left>
			lcd_num_from_right(127,2,adc_period);
     bce:	20 91 8a 00 	lds	r18, 0x008A
     bd2:	30 91 8b 00 	lds	r19, 0x008B
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	8f e7       	ldi	r24, 0x7F	; 127
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
			lcd_arrows(0,2);
     be6:	8b e0       	ldi	r24, 0x0B	; 11
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	42 e0       	ldi	r20, 0x02	; 2
     bee:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ABOUT)) {
     bf2:	80 91 f1 01 	lds	r24, 0x01F1
     bf6:	82 31       	cpi	r24, 0x12	; 18
     bf8:	b1 f5       	brne	.+108    	; 0xc66 <draw_menu+0xce>
			lcd_str("digital",0,0);
     bfa:	8f e0       	ldi	r24, 0x0F	; 15
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("oscill.",10,1);
     c06:	87 e1       	ldi	r24, 0x17	; 23
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	6a e0       	ldi	r22, 0x0A	; 10
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("v1.0",0,2);
     c12:	8f e1       	ldi	r24, 0x1F	; 31
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	42 e0       	ldi	r20, 0x02	; 2
     c1a:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("fft lib.",0,4);
     c1e:	84 e2       	ldi	r24, 0x24	; 36
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	44 e0       	ldi	r20, 0x04	; 4
     c26:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("by chan",0,5);
     c2a:	8d e2       	ldi	r24, 0x2D	; 45
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	45 e0       	ldi	r20, 0x05	; 5
     c32:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("sergey",(DISPLAY_X/2),0);
     c36:	85 e3       	ldi	r24, 0x35	; 53
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	60 e4       	ldi	r22, 0x40	; 64
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("volodin",70,1);
     c42:	8c e3       	ldi	r24, 0x3C	; 60
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	66 e4       	ldi	r22, 0x46	; 70
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("2011",80,2);
     c4e:	84 e4       	ldi	r24, 0x44	; 68
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	60 e5       	ldi	r22, 0x50	; 80
     c54:	42 e0       	ldi	r20, 0x02	; 2
     c56:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("i.179e.net",(DISPLAY_X/2),4);
     c5a:	89 e4       	ldi	r24, 0x49	; 73
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	60 e4       	ldi	r22, 0x40	; 64
     c60:	44 e0       	ldi	r20, 0x04	; 4
     c62:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_LCDSKIP)) {
     c66:	80 91 f1 01 	lds	r24, 0x01F1
     c6a:	8f 30       	cpi	r24, 0x0F	; 15
     c6c:	a9 f4       	brne	.+42     	; 0xc98 <draw_menu+0x100>
			lcd_str("lcd skip",0,0);
     c6e:	84 e5       	ldi	r24, 0x54	; 84
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_pixel_line_from_left(1,lcd_skip>>1);
     c7a:	60 91 f8 01 	lds	r22, 0x01F8
     c7e:	70 91 f9 01 	lds	r23, 0x01F9
     c82:	76 95       	lsr	r23
     c84:	67 95       	ror	r22
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_pixel_line_from_left>
			lcd_arrows(0,2);
     c8c:	8b e0       	ldi	r24, 0x0B	; 11
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	42 e0       	ldi	r20, 0x02	; 2
     c94:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ADCSTEP)) {
     c98:	80 91 f1 01 	lds	r24, 0x01F1
     c9c:	8e 30       	cpi	r24, 0x0E	; 14
     c9e:	b9 f4       	brne	.+46     	; 0xcce <draw_menu+0x136>
			lcd_str("adc p step",0,0);
     ca0:	8d e5       	ldi	r24, 0x5D	; 93
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_num_from_right((DISPLAY_X/2),1,adc_step);
     cac:	20 91 ef 01 	lds	r18, 0x01EF
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
			lcd_arrows(0,2);
     cc2:	8b e0       	ldi	r24, 0x0B	; 11
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	42 e0       	ldi	r20, 0x02	; 2
     cca:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ADCERROR)) {
     cce:	80 91 f1 01 	lds	r24, 0x01F1
     cd2:	8d 30       	cpi	r24, 0x0D	; 13
     cd4:	c1 f4       	brne	.+48     	; 0xd06 <draw_menu+0x16e>
			lcd_str("adc error",0,0);
     cd6:	88 e6       	ldi	r24, 0x68	; 104
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_num_from_right((DISPLAY_X/2),1,adc_error);
     ce2:	20 91 f2 01 	lds	r18, 0x01F2
     ce6:	30 91 f3 01 	lds	r19, 0x01F3
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	80 e4       	ldi	r24, 0x40	; 64
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
			lcd_arrows(0,2);
     cfa:	8b e0       	ldi	r24, 0x0B	; 11
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	42 e0       	ldi	r20, 0x02	; 2
     d02:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_ADCCHECK)) {
     d06:	80 91 f1 01 	lds	r24, 0x01F1
     d0a:	8c 30       	cpi	r24, 0x0C	; 12
     d0c:	41 f5       	brne	.+80     	; 0xd5e <draw_menu+0x1c6>
			lcd_str("adc check",0,0);
     d0e:	82 e7       	ldi	r24, 0x72	; 114
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			if(adc_check) lcd_num_from_right((DISPLAY_X/2),1,adc_check);
     d1a:	20 91 f4 01 	lds	r18, 0x01F4
     d1e:	30 91 f5 01 	lds	r19, 0x01F5
     d22:	21 15       	cp	r18, r1
     d24:	31 05       	cpc	r19, r1
     d26:	49 f0       	breq	.+18     	; 0xd3a <draw_menu+0x1a2>
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	80 e4       	ldi	r24, 0x40	; 64
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <draw_menu+0x1ae>
			else lcd_str("disabled",0,1);
     d3a:	8c e7       	ldi	r24, 0x7C	; 124
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_arrows(0,2);
     d46:	8b e0       	ldi	r24, 0x0B	; 11
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	42 e0       	ldi	r20, 0x02	; 2
     d4e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_str("0 to dsbl.",0,3);
     d52:	85 e8       	ldi	r24, 0x85	; 133
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	43 e0       	ldi	r20, 0x03	; 3
     d5a:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_SPECTRUMXZOOM)) {
     d5e:	80 91 f1 01 	lds	r24, 0x01F1
     d62:	80 31       	cpi	r24, 0x10	; 16
     d64:	f9 f4       	brne	.+62     	; 0xda4 <draw_menu+0x20c>
			lcd_str("sp. xzoom",0,0);
     d66:	80 e9       	ldi	r24, 0x90	; 144
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_num_from_right(DISPLAY_X/2-1,1,1<<spectrum_x_zoom);
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	00 90 08 02 	lds	r0, 0x0208
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <draw_menu+0x1e8>
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <draw_menu+0x1e4>
     d84:	44 27       	eor	r20, r20
     d86:	37 fd       	sbrc	r19, 7
     d88:	40 95       	com	r20
     d8a:	54 2f       	mov	r21, r20
     d8c:	8f e3       	ldi	r24, 0x3F	; 63
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
			lcd_arrows(0,2);
     d98:	8b e0       	ldi	r24, 0x0B	; 11
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	42 e0       	ldi	r20, 0x02	; 2
     da0:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_SPECTRUMYZOOM)) {
     da4:	80 91 f1 01 	lds	r24, 0x01F1
     da8:	81 31       	cpi	r24, 0x11	; 17
     daa:	f9 f4       	brne	.+62     	; 0xdea <draw_menu+0x252>
			lcd_str("sp. yzoom",0,0);
     dac:	8a e9       	ldi	r24, 0x9A	; 154
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			lcd_num_from_right(DISPLAY_X/2-1,1,1<<spectrum_y_zoom);
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	00 90 09 02 	lds	r0, 0x0209
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <draw_menu+0x22e>
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <draw_menu+0x22a>
     dca:	44 27       	eor	r20, r20
     dcc:	37 fd       	sbrc	r19, 7
     dce:	40 95       	com	r20
     dd0:	54 2f       	mov	r21, r20
     dd2:	8f e3       	ldi	r24, 0x3F	; 63
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
			lcd_arrows(0,2);
     dde:	8b e0       	ldi	r24, 0x0B	; 11
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	42 e0       	ldi	r20, 0x02	; 2
     de6:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		}
		if(menu_state==(MENU_MAX+MENU_MODE)) {
     dea:	80 91 f1 01 	lds	r24, 0x01F1
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	09 f0       	breq	.+2      	; 0xdf4 <draw_menu+0x25c>
     df2:	d6 c0       	rjmp	.+428    	; 0xfa0 <draw_menu+0x408>
			lcd_str("mode",0,0);
     df4:	84 ea       	ldi	r24, 0xA4	; 164
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			if(mode==MODE_SIGNAL) lcd_str("signal",0,1);
     e00:	80 91 ee 01 	lds	r24, 0x01EE
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	19 f4       	brne	.+6      	; 0xe0e <draw_menu+0x276>
     e08:	89 ea       	ldi	r24, 0xA9	; 169
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	4b c0       	rjmp	.+150    	; 0xea4 <draw_menu+0x30c>
			else if(mode==MODE_SPECTRUM) {
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	19 f4       	brne	.+6      	; 0xe18 <draw_menu+0x280>
				lcd_str("spectrum",0,1);
     e12:	80 eb       	ldi	r24, 0xB0	; 176
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <draw_menu+0x292>
				if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
			}
			else if(mode==MODE_XY) lcd_str("xy",0,1);
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	19 f4       	brne	.+6      	; 0xe22 <draw_menu+0x28a>
     e1c:	81 ec       	ldi	r24, 0xC1	; 193
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	41 c0       	rjmp	.+130    	; 0xea4 <draw_menu+0x30c>
			else if(mode==MODE_DUAL) {
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	b1 f5       	brne	.+108    	; 0xe92 <draw_menu+0x2fa>
				lcd_str("dual",0,1);
     e26:	84 ec       	ldi	r24, 0xC4	; 196
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
				if(mode==MODE_SPECTRUM||mode==MODE_DUAL) fft_maxfreq();
     e32:	80 91 ee 01 	lds	r24, 0x01EE
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	11 f0       	breq	.+4      	; 0xe3e <draw_menu+0x2a6>
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	31 f4       	brne	.+12     	; 0xe4a <draw_menu+0x2b2>
     e3e:	89 eb       	ldi	r24, 0xB9	; 185
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	60 e4       	ldi	r22, 0x40	; 64
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
     e4a:	20 91 8a 00 	lds	r18, 0x008A
     e4e:	30 91 8b 00 	lds	r19, 0x008B
     e52:	00 90 08 02 	lds	r0, 0x0208
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <draw_menu+0x2c4>
     e58:	22 0f       	add	r18, r18
     e5a:	33 1f       	adc	r19, r19
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <draw_menu+0x2c0>
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	7d e2       	ldi	r23, 0x2D	; 45
     e68:	81 e3       	ldi	r24, 0x31	; 49
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__divmodsi4>
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	55 95       	asr	r21
     e74:	47 95       	ror	r20
     e76:	37 95       	ror	r19
     e78:	27 95       	ror	r18
     e7a:	9a 95       	dec	r25
     e7c:	d1 f7       	brne	.-12     	; 0xe72 <draw_menu+0x2da>
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
     e8a:	8e eb       	ldi	r24, 0xBE	; 190
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	65 e7       	ldi	r22, 0x75	; 117
     e90:	0a c0       	rjmp	.+20     	; 0xea6 <draw_menu+0x30e>
			}
			else if(mode==MODE_UART) lcd_str("uart",0,1);
     e92:	85 30       	cpi	r24, 0x05	; 5
     e94:	19 f4       	brne	.+6      	; 0xe9c <draw_menu+0x304>
     e96:	89 ec       	ldi	r24, 0xC9	; 201
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <draw_menu+0x30c>
			else if(mode==MODE_UART_BUF) {
     e9c:	86 30       	cpi	r24, 0x06	; 6
     e9e:	31 f4       	brne	.+12     	; 0xeac <draw_menu+0x314>
				lcd_str("uart buf",0,1);
     ea0:	8e ec       	ldi	r24, 0xCE	; 206
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	41 e0       	ldi	r20, 0x01	; 1
     ea8:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
			}
			lcd_arrows(0,2);
     eac:	8b e0       	ldi	r24, 0x0B	; 11
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	42 e0       	ldi	r20, 0x02	; 2
     eb4:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
     eb8:	08 95       	ret
		}
	}
	else if(menu_state!=-1) {
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	09 f4       	brne	.+2      	; 0xec0 <draw_menu+0x328>
     ebe:	70 c0       	rjmp	.+224    	; 0xfa0 <draw_menu+0x408>
		lcd_str("menu",0,0);
     ec0:	87 ed       	ldi	r24, 0xD7	; 215
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_EXIT) lcd_str("exit",0,1);
     ecc:	80 91 f1 01 	lds	r24, 0x01F1
     ed0:	88 23       	and	r24, r24
     ed2:	31 f4       	brne	.+12     	; 0xee0 <draw_menu+0x348>
     ed4:	8c ed       	ldi	r24, 0xDC	; 220
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_ADCPERIOD) lcd_str("adc period",0,1);
     ee0:	80 91 f1 01 	lds	r24, 0x01F1
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	31 f4       	brne	.+12     	; 0xef4 <draw_menu+0x35c>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_ADCSTEP) lcd_str("adc p step",0,1);
     ef4:	80 91 f1 01 	lds	r24, 0x01F1
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	31 f4       	brne	.+12     	; 0xf08 <draw_menu+0x370>
     efc:	8d e5       	ldi	r24, 0x5D	; 93
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_LCDSKIP) lcd_str("lcd skip",0,1);
     f08:	80 91 f1 01 	lds	r24, 0x01F1
     f0c:	86 30       	cpi	r24, 0x06	; 6
     f0e:	31 f4       	brne	.+12     	; 0xf1c <draw_menu+0x384>
     f10:	84 e5       	ldi	r24, 0x54	; 84
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_ADCCHECK) lcd_str("adc check",0,1);
     f1c:	80 91 f1 01 	lds	r24, 0x01F1
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	31 f4       	brne	.+12     	; 0xf30 <draw_menu+0x398>
     f24:	82 e7       	ldi	r24, 0x72	; 114
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_ADCERROR) lcd_str("adc error",0,1);
     f30:	80 91 f1 01 	lds	r24, 0x01F1
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	31 f4       	brne	.+12     	; 0xf44 <draw_menu+0x3ac>
     f38:	88 e6       	ldi	r24, 0x68	; 104
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_SPECTRUMXZOOM) lcd_str("sp. xzoom",0,1);
     f44:	80 91 f1 01 	lds	r24, 0x01F1
     f48:	87 30       	cpi	r24, 0x07	; 7
     f4a:	31 f4       	brne	.+12     	; 0xf58 <draw_menu+0x3c0>
     f4c:	80 e9       	ldi	r24, 0x90	; 144
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_SPECTRUMYZOOM) lcd_str("sp. yzoom",0,1);
     f58:	80 91 f1 01 	lds	r24, 0x01F1
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	31 f4       	brne	.+12     	; 0xf6c <draw_menu+0x3d4>
     f60:	8a e9       	ldi	r24, 0x9A	; 154
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_ABOUT) lcd_str("about",0,1);
     f6c:	80 91 f1 01 	lds	r24, 0x01F1
     f70:	89 30       	cpi	r24, 0x09	; 9
     f72:	31 f4       	brne	.+12     	; 0xf80 <draw_menu+0x3e8>
     f74:	81 ee       	ldi	r24, 0xE1	; 225
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		if(menu_state==MENU_MODE) lcd_str("mode",0,1);
     f80:	80 91 f1 01 	lds	r24, 0x01F1
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	31 f4       	brne	.+12     	; 0xf94 <draw_menu+0x3fc>
     f88:	84 ea       	ldi	r24, 0xA4	; 164
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
		lcd_arrows(0,2);
     f94:	8b e0       	ldi	r24, 0x0B	; 11
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	42 e0       	ldi	r20, 0x02	; 2
     f9c:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
     fa0:	08 95       	ret

00000fa2 <main>:
		}
	}
	buttons_update();
}

int main() {
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 ed       	ldi	r30, 0xD7	; 215
     fa8:	f7 e0       	ldi	r31, 0x07	; 7
     faa:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__prologue_saves__+0x12>
	// pins init
	DDRB&=~(0x3f);
     fae:	84 b1       	in	r24, 0x04	; 4
     fb0:	80 7c       	andi	r24, 0xC0	; 192
     fb2:	84 b9       	out	0x04, r24	; 4
	DDRA|=1<<7;
     fb4:	0f 9a       	sbi	0x01, 7	; 1
	PORTA&=~(1<<7);
     fb6:	17 98       	cbi	0x02, 7	; 2
	PORTB|=0x3f;
     fb8:	85 b1       	in	r24, 0x05	; 5
     fba:	8f 63       	ori	r24, 0x3F	; 63
     fbc:	85 b9       	out	0x05, r24	; 5
#define BAUD 9600UL
#define UBRRVAL (F_CPU/(BAUD*16)-1)
#define U_M	1000
uint16_t u_c;
void uart_init() {
    UBRRH = UBRRVAL >> 8;
     fbe:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
     fc2:	81 e8       	ldi	r24, 0x81	; 129
     fc4:	80 93 c4 00 	sts	0x00C4, r24
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
     fc8:	86 e0       	ldi	r24, 0x06	; 6
     fca:	80 93 c2 00 	sts	0x00C2, r24
    UCSRB = (1 << RXEN) | (1 << TXEN);
     fce:	88 e1       	ldi	r24, 0x18	; 24
     fd0:	80 93 c1 00 	sts	0x00C1, r24
	
	uart_init();
	lcd_init();
     fd4:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_init>
	
	//adc init
	ADMUX=0b01100000;
     fd8:	80 e6       	ldi	r24, 0x60	; 96
     fda:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0b11011101;
     fde:	8d ed       	ldi	r24, 0xDD	; 221
     fe0:	80 93 7a 00 	sts	0x007A, r24

	//button & adc interrupt init
	TCCR0B=0b101;
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	85 bd       	out	0x25, r24	; 37
	TIMSK0=1<<TOIE0;
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	20 93 6e 00 	sts	0x006E, r18
	TIMSK1=(1<<OCIE1B);
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	80 93 6f 00 	sts	0x006F, r24
	TCNT0=0x00;
     ff4:	16 bc       	out	0x26, r1	; 38
	TCNT1=0x00;
     ff6:	10 92 85 00 	sts	0x0085, r1
     ffa:	10 92 84 00 	sts	0x0084, r1
	adc_period=ADC_PERIOD_MIN;
     ffe:	80 e5       	ldi	r24, 0x50	; 80
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	90 93 8b 00 	sts	0x008B, r25
    1006:	80 93 8a 00 	sts	0x008A, r24
	TCCR1B=0b001;
    100a:	20 93 81 00 	sts	0x0081, r18
	sei();
    100e:	78 94       	sei
						if(c<DISPLAY_X) lcd_line_from_bottom(c,s);
					}
			}
			if((mode==MODE_SIGNAL)||(mode==MODE_DUAL)) {
				if(lcd_skip_c>=lcd_skip) {
					lcd_skip_c=1;
    1010:	c1 e0       	ldi	r28, 0x01	; 1
    1012:	d0 e0       	ldi	r29, 0x00	; 0
				while(m<ALL_N) {
					s=capture[m++]>>7;
					if(s>=256) uart_communicate(254);
					else uart_communicate(s);
					if(u_c==U_M) u++;
					if(u>=10) m=ALL_N;
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	e4 2e       	mov	r14, r20
					}
				}
				else lcd_skip_c++;
				
				for(s=0;s<DISPLAY_X;s+=2) {
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
    1018:	3f e3       	ldi	r19, 0x3F	; 63
    101a:	d3 2e       	mov	r13, r19
    101c:	2f e3       	ldi	r18, 0x3F	; 63
    101e:	c2 2e       	mov	r12, r18
				else lcd_skip_c++;
			}
			else if(mode==MODE_XY) {
				if(lcd_skip_c>=lcd_skip) {
					lcd_skip_c=1;
					for(s=(DISPLAY_X/2);s<DISPLAY_X;s++) {
    1020:	90 e4       	ldi	r25, 0x40	; 64
    1022:	b9 2e       	mov	r11, r25
			if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
					fft_input(capture, bfly_buff);
					fft_execute(bfly_buff);
					fft_output(bfly_buff, output);
					for (m=0;m<ALL_N/2;m++) {
						s=output[m]>>(9-spectrum_y_zoom);
    1024:	09 e0       	ldi	r16, 0x09	; 9
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	f8 2e       	mov	r15, r24
	adc_period=ADC_PERIOD_MIN;
	TCCR1B=0b001;
	sei();

	for(;;) {
		if(redraw_menu) {
    102c:	80 91 05 02 	lds	r24, 0x0205
    1030:	88 23       	and	r24, r24
    1032:	59 f0       	breq	.+22     	; 0x104a <main+0xa8>
			lcd_all(0);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 90 01 	call	0x320	; 0x320 <lcd_all>
			if(running) redraw_menu=0;
    103a:	80 91 f0 01 	lds	r24, 0x01F0
    103e:	88 23       	and	r24, r24
    1040:	11 f0       	breq	.+4      	; 0x1046 <main+0xa4>
    1042:	10 92 05 02 	sts	0x0205, r1
			draw_menu();
    1046:	0e 94 cc 05 	call	0xb98	; 0xb98 <draw_menu>
		}
		if((current>=(ALL_N-1))||((!running)&&redraw_menu)) {
    104a:	80 91 fe 01 	lds	r24, 0x01FE
    104e:	8f 37       	cpi	r24, 0x7F	; 127
    1050:	50 f4       	brcc	.+20     	; 0x1066 <main+0xc4>
    1052:	80 91 f0 01 	lds	r24, 0x01F0
    1056:	88 23       	and	r24, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <main+0xba>
    105a:	43 c1       	rjmp	.+646    	; 0x12e2 <__stack+0x1e3>
    105c:	80 91 05 02 	lds	r24, 0x0205
    1060:	88 23       	and	r24, r24
    1062:	09 f4       	brne	.+2      	; 0x1066 <main+0xc4>
    1064:	3e c1       	rjmp	.+636    	; 0x12e2 <__stack+0x1e3>
			if(!running) redraw_menu=0;
    1066:	80 91 f0 01 	lds	r24, 0x01F0
    106a:	88 23       	and	r24, r24
    106c:	11 f4       	brne	.+4      	; 0x1072 <main+0xd0>
    106e:	10 92 05 02 	sts	0x0205, r1
			if(!array_filled) array_filled=1;
    1072:	80 91 06 02 	lds	r24, 0x0206
    1076:	88 23       	and	r24, r24
    1078:	19 f4       	brne	.+6      	; 0x1080 <main+0xde>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 06 02 	sts	0x0206, r24
			adc_reset_c=0;
    1080:	10 92 0b 02 	sts	0x020B, r1
    1084:	10 92 0a 02 	sts	0x020A, r1
			if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
    1088:	80 91 ee 01 	lds	r24, 0x01EE
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	19 f0       	breq	.+6      	; 0x1096 <main+0xf4>
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	09 f0       	breq	.+2      	; 0x1096 <main+0xf4>
    1094:	6f c0       	rjmp	.+222    	; 0x1174 <__stack+0x75>
					fft_input(capture, bfly_buff);
    1096:	8a e9       	ldi	r24, 0x9A	; 154
    1098:	94 e0       	ldi	r25, 0x04	; 4
    109a:	65 e1       	ldi	r22, 0x15	; 21
    109c:	72 e0       	ldi	r23, 0x02	; 2
    109e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fft_input>
					fft_execute(bfly_buff);
    10a2:	85 e1       	ldi	r24, 0x15	; 21
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <fft_execute>
					fft_output(bfly_buff, output);
    10aa:	85 e1       	ldi	r24, 0x15	; 21
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	65 e1       	ldi	r22, 0x15	; 21
    10b0:	74 e0       	ldi	r23, 0x04	; 4
    10b2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <fft_output>
					for (m=0;m<ALL_N/2;m++) {
    10b6:	10 92 fa 01 	sts	0x01FA, r1
    10ba:	57 c0       	rjmp	.+174    	; 0x116a <__stack+0x6b>
						s=output[m]>>(9-spectrum_y_zoom);
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	eb 5e       	subi	r30, 0xEB	; 235
    10c4:	fb 4f       	sbci	r31, 0xFB	; 251
    10c6:	80 91 09 02 	lds	r24, 0x0209
    10ca:	98 01       	movw	r18, r16
    10cc:	28 1b       	sub	r18, r24
    10ce:	31 09       	sbc	r19, r1
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <main+0x138>
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	2a 95       	dec	r18
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <main+0x134>
    10de:	80 93 99 04 	sts	0x0499, r24
						if(s>63) s=63;
    10e2:	80 34       	cpi	r24, 0x40	; 64
    10e4:	10 f0       	brcs	.+4      	; 0x10ea <main+0x148>
    10e6:	c0 92 99 04 	sts	0x0499, r12
						if(s<0) s=0;
						for(u=0;u<7;u++) lcd_block(ALL_N/2+m,u,0);
    10ea:	10 92 a0 05 	sts	0x05A0, r1
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <__stack+0x5>
    10f0:	82 2f       	mov	r24, r18
    10f2:	80 5c       	subi	r24, 0xC0	; 192
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
    10fa:	80 91 a0 05 	lds	r24, 0x05A0
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	80 93 a0 05 	sts	0x05A0, r24
    1104:	60 91 a0 05 	lds	r22, 0x05A0
    1108:	20 91 fa 01 	lds	r18, 0x01FA
    110c:	67 30       	cpi	r22, 0x07	; 7
    110e:	80 f3       	brcs	.-32     	; 0x10f0 <main+0x14e>
						if(!(m%8)) {
    1110:	82 2f       	mov	r24, r18
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	87 70       	andi	r24, 0x07	; 7
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	89 2b       	or	r24, r25
    111a:	59 f4       	brne	.+22     	; 0x1132 <__stack+0x33>
							lcd_goto_xblock(ALL_N/2+m);
    111c:	82 2f       	mov	r24, r18
    111e:	80 5c       	subi	r24, 0xC0	; 192
    1120:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_goto_xblock>
							lcd_goto_yblock(2);
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_goto_yblock>
							lcd_databits(SEND_DATA,0x1);
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_databits>
						}
						c=(DISPLAY_X/2)+(m<<spectrum_x_zoom);
    1132:	80 91 fa 01 	lds	r24, 0x01FA
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	00 90 08 02 	lds	r0, 0x0208
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <__stack+0x43>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <__stack+0x3f>
    1146:	80 5c       	subi	r24, 0xC0	; 192
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	90 93 98 04 	sts	0x0498, r25
    114e:	80 93 97 04 	sts	0x0497, r24
						if(c<DISPLAY_X) lcd_line_from_bottom(c,s);
    1152:	80 38       	cpi	r24, 0x80	; 128
    1154:	91 05       	cpc	r25, r1
    1156:	20 f4       	brcc	.+8      	; 0x1160 <__stack+0x61>
    1158:	60 91 99 04 	lds	r22, 0x0499
    115c:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_line_from_bottom>
			adc_reset_c=0;
			if((mode==MODE_SPECTRUM)||(mode==MODE_DUAL)) {
					fft_input(capture, bfly_buff);
					fft_execute(bfly_buff);
					fft_output(bfly_buff, output);
					for (m=0;m<ALL_N/2;m++) {
    1160:	80 91 fa 01 	lds	r24, 0x01FA
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 fa 01 	sts	0x01FA, r24
    116a:	e0 91 fa 01 	lds	r30, 0x01FA
    116e:	e0 34       	cpi	r30, 0x40	; 64
    1170:	08 f4       	brcc	.+2      	; 0x1174 <__stack+0x75>
    1172:	a4 cf       	rjmp	.-184    	; 0x10bc <main+0x11a>
						}
						c=(DISPLAY_X/2)+(m<<spectrum_x_zoom);
						if(c<DISPLAY_X) lcd_line_from_bottom(c,s);
					}
			}
			if((mode==MODE_SIGNAL)||(mode==MODE_DUAL)) {
    1174:	80 91 ee 01 	lds	r24, 0x01EE
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	11 f0       	breq	.+4      	; 0x1180 <__stack+0x81>
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	c9 f4       	brne	.+50     	; 0x11b2 <__stack+0xb3>
				if(lcd_skip_c>=lcd_skip) {
    1180:	20 91 fb 01 	lds	r18, 0x01FB
    1184:	30 91 fc 01 	lds	r19, 0x01FC
    1188:	80 91 f8 01 	lds	r24, 0x01F8
    118c:	90 91 f9 01 	lds	r25, 0x01F9
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	38 f0       	brcs	.+14     	; 0x11a4 <__stack+0xa5>
					lcd_skip_c=1;
    1196:	d0 93 fc 01 	sts	0x01FC, r29
    119a:	c0 93 fb 01 	sts	0x01FB, r28
					draw_signal();
    119e:	0e 94 30 03 	call	0x660	; 0x660 <draw_signal>
    11a2:	9d c0       	rjmp	.+314    	; 0x12de <__stack+0x1df>
				}
				else lcd_skip_c++;
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	30 93 fc 01 	sts	0x01FC, r19
    11ac:	20 93 fb 01 	sts	0x01FB, r18
    11b0:	96 c0       	rjmp	.+300    	; 0x12de <__stack+0x1df>
			}
			else if(mode==MODE_XY) {
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <__stack+0xb9>
    11b6:	52 c0       	rjmp	.+164    	; 0x125c <__stack+0x15d>
				if(lcd_skip_c>=lcd_skip) {
    11b8:	20 91 fb 01 	lds	r18, 0x01FB
    11bc:	30 91 fc 01 	lds	r19, 0x01FC
    11c0:	80 91 f8 01 	lds	r24, 0x01F8
    11c4:	90 91 f9 01 	lds	r25, 0x01F9
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	10 f1       	brcs	.+68     	; 0x1212 <__stack+0x113>
					lcd_skip_c=1;
    11ce:	d0 93 fc 01 	sts	0x01FC, r29
    11d2:	c0 93 fb 01 	sts	0x01FB, r28
					for(s=(DISPLAY_X/2);s<DISPLAY_X;s++) {
    11d6:	b0 92 99 04 	sts	0x0499, r11
    11da:	16 c0       	rjmp	.+44     	; 0x1208 <__stack+0x109>
						for(m=0;m<8;m++) lcd_block(s,m,0);
    11dc:	10 92 fa 01 	sts	0x01FA, r1
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <__stack+0xf7>
    11e2:	80 91 99 04 	lds	r24, 0x0499
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_block>
    11ec:	80 91 fa 01 	lds	r24, 0x01FA
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	80 93 fa 01 	sts	0x01FA, r24
    11f6:	60 91 fa 01 	lds	r22, 0x01FA
    11fa:	68 30       	cpi	r22, 0x08	; 8
    11fc:	90 f3       	brcs	.-28     	; 0x11e2 <__stack+0xe3>
				else lcd_skip_c++;
			}
			else if(mode==MODE_XY) {
				if(lcd_skip_c>=lcd_skip) {
					lcd_skip_c=1;
					for(s=(DISPLAY_X/2);s<DISPLAY_X;s++) {
    11fe:	80 91 99 04 	lds	r24, 0x0499
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 99 04 	sts	0x0499, r24
    1208:	80 91 99 04 	lds	r24, 0x0499
    120c:	87 ff       	sbrs	r24, 7
    120e:	e6 cf       	rjmp	.-52     	; 0x11dc <__stack+0xdd>
    1210:	06 c0       	rjmp	.+12     	; 0x121e <__stack+0x11f>
						for(m=0;m<8;m++) lcd_block(s,m,0);
					}
				}
				else lcd_skip_c++;
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	30 93 fc 01 	sts	0x01FC, r19
    121a:	20 93 fb 01 	sts	0x01FB, r18
				
				for(s=0;s<DISPLAY_X;s+=2) {
    121e:	10 92 99 04 	sts	0x0499, r1
    1222:	17 c0       	rjmp	.+46     	; 0x1252 <__stack+0x153>
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	df 01       	movw	r26, r30
    122c:	a6 56       	subi	r26, 0x66	; 102
    122e:	bb 4f       	sbci	r27, 0xFB	; 251
    1230:	11 96       	adiw	r26, 0x01	; 1
    1232:	8c 91       	ld	r24, X
    1234:	86 95       	lsr	r24
    1236:	e4 56       	subi	r30, 0x64	; 100
    1238:	fb 4f       	sbci	r31, 0xFB	; 251
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	96 95       	lsr	r25
    123e:	6d 2d       	mov	r22, r13
    1240:	69 1b       	sub	r22, r25
    1242:	80 5c       	subi	r24, 0xC0	; 192
    1244:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_pixel_share>
						for(m=0;m<8;m++) lcd_block(s,m,0);
					}
				}
				else lcd_skip_c++;
				
				for(s=0;s<DISPLAY_X;s+=2) {
    1248:	80 91 99 04 	lds	r24, 0x0499
    124c:	8e 5f       	subi	r24, 0xFE	; 254
    124e:	80 93 99 04 	sts	0x0499, r24
    1252:	e0 91 99 04 	lds	r30, 0x0499
    1256:	e7 ff       	sbrs	r30, 7
    1258:	e5 cf       	rjmp	.-54     	; 0x1224 <__stack+0x125>
    125a:	41 c0       	rjmp	.+130    	; 0x12de <__stack+0x1df>
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
				}
			}
			else if(mode==MODE_UART_BUF) {
    125c:	86 30       	cpi	r24, 0x06	; 6
    125e:	81 f5       	brne	.+96     	; 0x12c0 <__stack+0x1c1>
				m=0;u=0;
    1260:	10 92 fa 01 	sts	0x01FA, r1
    1264:	10 92 a0 05 	sts	0x05A0, r1
    1268:	26 c0       	rjmp	.+76     	; 0x12b6 <__stack+0x1b7>
				while(m<ALL_N) {
					s=capture[m++]>>7;
    126a:	e2 2f       	mov	r30, r18
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	e6 56       	subi	r30, 0x66	; 102
    1274:	fb 4f       	sbci	r31, 0xFB	; 251
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	88 0f       	add	r24, r24
    127c:	89 2f       	mov	r24, r25
    127e:	88 1f       	adc	r24, r24
    1280:	99 0b       	sbc	r25, r25
    1282:	91 95       	neg	r25
    1284:	80 93 99 04 	sts	0x0499, r24
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	20 93 fa 01 	sts	0x01FA, r18
					if(s>=256) uart_communicate(254);
					else uart_communicate(s);
    128e:	0e 94 a2 00 	call	0x144	; 0x144 <uart_communicate>
					if(u_c==U_M) u++;
    1292:	80 91 9c 05 	lds	r24, 0x059C
    1296:	90 91 9d 05 	lds	r25, 0x059D
    129a:	88 5e       	subi	r24, 0xE8	; 232
    129c:	93 40       	sbci	r25, 0x03	; 3
    129e:	29 f4       	brne	.+10     	; 0x12aa <__stack+0x1ab>
    12a0:	80 91 a0 05 	lds	r24, 0x05A0
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	80 93 a0 05 	sts	0x05A0, r24
					if(u>=10) m=ALL_N;
    12aa:	80 91 a0 05 	lds	r24, 0x05A0
    12ae:	8a 30       	cpi	r24, 0x0A	; 10
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <__stack+0x1b7>
    12b2:	e0 92 fa 01 	sts	0x01FA, r14
					lcd_pixel_share(ALL_N/2+(capture[s]>>9),63-(capture[s+1]>>9));
				}
			}
			else if(mode==MODE_UART_BUF) {
				m=0;u=0;
				while(m<ALL_N) {
    12b6:	20 91 fa 01 	lds	r18, 0x01FA
    12ba:	27 ff       	sbrs	r18, 7
    12bc:	d6 cf       	rjmp	.-84     	; 0x126a <__stack+0x16b>
    12be:	0f c0       	rjmp	.+30     	; 0x12de <__stack+0x1df>
					else uart_communicate(s);
					if(u_c==U_M) u++;
					if(u>=10) m=ALL_N;
				}
			}
			else if(mode==MODE_UART) {
    12c0:	85 30       	cpi	r24, 0x05	; 5
    12c2:	69 f4       	brne	.+26     	; 0x12de <__stack+0x1df>
				s=capture[ALL_N-1]>>7;
    12c4:	80 91 98 05 	lds	r24, 0x0598
    12c8:	90 91 99 05 	lds	r25, 0x0599
    12cc:	88 0f       	add	r24, r24
    12ce:	89 2f       	mov	r24, r25
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 0b       	sbc	r25, r25
    12d4:	91 95       	neg	r25
    12d6:	80 93 99 04 	sts	0x0499, r24
				if(s>=256) uart_communicate(254);
				else uart_communicate(s);
    12da:	0e 94 a2 00 	call	0x144	; 0x144 <uart_communicate>
			}
			current=0;
    12de:	10 92 fe 01 	sts	0x01FE, r1
    12e2:	8f 2d       	mov	r24, r15
    12e4:	8a 95       	dec	r24
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <__stack+0x1e5>
    12e8:	a1 ce       	rjmp	.-702    	; 0x102c <main+0x8a>

000012ea <osd>:
	down_state1=down_state();
	pause_state1=pause_state();
}

void osd() {
	if(mode==MODE_DUAL||mode==MODE_SPECTRUM) fft_maxfreq();
    12ea:	80 91 ee 01 	lds	r24, 0x01EE
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <osd+0xc>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	31 f4       	brne	.+12     	; 0x1302 <osd+0x18>
    12f6:	89 eb       	ldi	r24, 0xB9	; 185
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	60 e4       	ldi	r22, 0x40	; 64
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
    1302:	20 91 8a 00 	lds	r18, 0x008A
    1306:	30 91 8b 00 	lds	r19, 0x008B
    130a:	00 90 08 02 	lds	r0, 0x0208
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <osd+0x2a>
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <osd+0x26>
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	7d e2       	ldi	r23, 0x2D	; 45
    1320:	81 e3       	ldi	r24, 0x31	; 49
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__divmodsi4>
    1328:	64 e0       	ldi	r22, 0x04	; 4
    132a:	55 95       	asr	r21
    132c:	47 95       	ror	r20
    132e:	37 95       	ror	r19
    1330:	27 95       	ror	r18
    1332:	6a 95       	dec	r22
    1334:	d1 f7       	brne	.-12     	; 0x132a <osd+0x40>
    1336:	80 e8       	ldi	r24, 0x80	; 128
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
    1342:	8e eb       	ldi	r24, 0xBE	; 190
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	65 e7       	ldi	r22, 0x75	; 117
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
	if(mode==MODE_SIGNAL||mode==MODE_DUAL) dfreq();
    134e:	80 91 ee 01 	lds	r24, 0x01EE
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	11 f0       	breq	.+4      	; 0x135a <osd+0x70>
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	31 f4       	brne	.+12     	; 0x1366 <osd+0x7c>
    135a:	87 ee       	ldi	r24, 0xE7	; 231
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_str>
    1366:	20 91 8a 00 	lds	r18, 0x008A
    136a:	30 91 8b 00 	lds	r19, 0x008B
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	7d e2       	ldi	r23, 0x2D	; 45
    1376:	81 e3       	ldi	r24, 0x31	; 49
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__divmodsi4>
    137e:	8f e3       	ldi	r24, 0x3F	; 63
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	61 e0       	ldi	r22, 0x01	; 1
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	0e 94 66 05 	call	0xacc	; 0xacc <lcd_num_from_right>
}
    138a:	08 95       	ret

0000138c <__vector_18>:
		}
		if(mode!=MODE_UART) current++;
	}
}

ISR(TIMER0_OVF_vect) {
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
	running=pause_state();
    13ae:	93 b1       	in	r25, 0x03	; 3
    13b0:	98 70       	andi	r25, 0x08	; 8
    13b2:	90 93 f0 01 	sts	0x01F0, r25
	if(!pause_state1&&running) TIMSK1|=(1<<OCIE1B);
    13b6:	80 91 04 02 	lds	r24, 0x0204
    13ba:	88 23       	and	r24, r24
    13bc:	31 f4       	brne	.+12     	; 0x13ca <__vector_18+0x3e>
    13be:	99 23       	and	r25, r25
    13c0:	59 f0       	breq	.+22     	; 0x13d8 <__vector_18+0x4c>
    13c2:	80 91 6f 00 	lds	r24, 0x006F
    13c6:	84 60       	ori	r24, 0x04	; 4
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <__vector_18+0x48>
	if(pause_state1&&!running) TIMSK1&=~(1<<OCIE1B);
    13ca:	99 23       	and	r25, r25
    13cc:	29 f4       	brne	.+10     	; 0x13d8 <__vector_18+0x4c>
    13ce:	80 91 6f 00 	lds	r24, 0x006F
    13d2:	8b 7f       	andi	r24, 0xFB	; 251
    13d4:	80 93 6f 00 	sts	0x006F, r24
	if(menu_state==-1) {
    13d8:	90 91 f1 01 	lds	r25, 0x01F1
    13dc:	9f 3f       	cpi	r25, 0xFF	; 255
    13de:	09 f0       	breq	.+2      	; 0x13e2 <__vector_18+0x56>
    13e0:	cb c0       	rjmp	.+406    	; 0x1578 <__vector_18+0x1ec>
		if(!right_state()&&right_state1) {
    13e2:	19 99       	sbic	0x03, 1	; 3
    13e4:	37 c0       	rjmp	.+110    	; 0x1454 <__vector_18+0xc8>
    13e6:	80 91 01 02 	lds	r24, 0x0201
    13ea:	88 23       	and	r24, r24
    13ec:	99 f1       	breq	.+102    	; 0x1454 <__vector_18+0xc8>
			incr_step(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX,adc_step);
    13ee:	20 91 8a 00 	lds	r18, 0x008A
    13f2:	30 91 8b 00 	lds	r19, 0x008B
    13f6:	60 91 ef 01 	lds	r22, 0x01EF
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	86 1b       	sub	r24, r22
    1408:	91 09       	sbc	r25, r1
    140a:	a1 09       	sbc	r26, r1
    140c:	b1 09       	sbc	r27, r1
    140e:	82 17       	cp	r24, r18
    1410:	93 07       	cpc	r25, r19
    1412:	a4 07       	cpc	r26, r20
    1414:	b5 07       	cpc	r27, r21
    1416:	1c f4       	brge	.+6      	; 0x141e <__vector_18+0x92>
    1418:	80 e5       	ldi	r24, 0x50	; 80
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	06 c0       	rjmp	.+12     	; 0x142a <__vector_18+0x9e>
    141e:	80 91 8a 00 	lds	r24, 0x008A
    1422:	90 91 8b 00 	lds	r25, 0x008B
    1426:	86 0f       	add	r24, r22
    1428:	91 1d       	adc	r25, r1
    142a:	90 93 8b 00 	sts	0x008B, r25
    142e:	80 93 8a 00 	sts	0x008A, r24
			osd();
    1432:	0e 94 75 09 	call	0x12ea	; 0x12ea <osd>
    1436:	28 ec       	ldi	r18, 0xC8	; 200
    1438:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143a:	48 e8       	ldi	r20, 0x88	; 136
    143c:	53 e1       	ldi	r21, 0x13	; 19
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <__vector_18+0xba>
    1440:	ca 01       	movw	r24, r20
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <__vector_18+0xb6>
#include <avr/eeprom.h>

#define lcd_arrows(x,y) lcd_str("< >",x,y)

void delay_ms(unsigned int delay) {
	while(delay--)
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	30 40       	sbci	r19, 0x00	; 0
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	2f 3f       	cpi	r18, 0xFF	; 255
    144e:	38 07       	cpc	r19, r24
    1450:	b9 f7       	brne	.-18     	; 0x1440 <__vector_18+0xb4>
    1452:	85 c0       	rjmp	.+266    	; 0x155e <__vector_18+0x1d2>
			delay_ms(200);
			array_filled=0;
		}
		else if(!left_state()&&left_state1) {
    1454:	1a 99       	sbic	0x03, 2	; 3
    1456:	30 c0       	rjmp	.+96     	; 0x14b8 <__vector_18+0x12c>
    1458:	80 91 00 02 	lds	r24, 0x0200
    145c:	88 23       	and	r24, r24
    145e:	61 f1       	breq	.+88     	; 0x14b8 <__vector_18+0x12c>
			decr_step(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX,adc_step);
    1460:	20 91 8a 00 	lds	r18, 0x008A
    1464:	30 91 8b 00 	lds	r19, 0x008B
    1468:	80 91 ef 01 	lds	r24, 0x01EF
    146c:	48 2f       	mov	r20, r24
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	ca 01       	movw	r24, r20
    1472:	80 5b       	subi	r24, 0xB0	; 176
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	18 f4       	brcc	.+6      	; 0x1482 <__vector_18+0xf6>
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	06 c0       	rjmp	.+12     	; 0x148e <__vector_18+0x102>
    1482:	80 91 8a 00 	lds	r24, 0x008A
    1486:	90 91 8b 00 	lds	r25, 0x008B
    148a:	84 1b       	sub	r24, r20
    148c:	95 0b       	sbc	r25, r21
    148e:	90 93 8b 00 	sts	0x008B, r25
    1492:	80 93 8a 00 	sts	0x008A, r24
			osd();
    1496:	0e 94 75 09 	call	0x12ea	; 0x12ea <osd>
    149a:	28 ec       	ldi	r18, 0xC8	; 200
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	48 e8       	ldi	r20, 0x88	; 136
    14a0:	53 e1       	ldi	r21, 0x13	; 19
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <__vector_18+0x11e>
    14a4:	ca 01       	movw	r24, r20
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <__vector_18+0x11a>
    14aa:	21 50       	subi	r18, 0x01	; 1
    14ac:	30 40       	sbci	r19, 0x00	; 0
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	2f 3f       	cpi	r18, 0xFF	; 255
    14b2:	38 07       	cpc	r19, r24
    14b4:	b9 f7       	brne	.-18     	; 0x14a4 <__vector_18+0x118>
    14b6:	53 c0       	rjmp	.+166    	; 0x155e <__vector_18+0x1d2>
			delay_ms(200);
			array_filled=0;
		}
		else if(!up_state()&&up_state1) {
    14b8:	1c 99       	sbic	0x03, 4	; 3
    14ba:	28 c0       	rjmp	.+80     	; 0x150c <__vector_18+0x180>
    14bc:	80 91 02 02 	lds	r24, 0x0202
    14c0:	88 23       	and	r24, r24
    14c2:	21 f1       	breq	.+72     	; 0x150c <__vector_18+0x180>
			increment(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    14c4:	80 91 8a 00 	lds	r24, 0x008A
    14c8:	90 91 8b 00 	lds	r25, 0x008B
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	19 f4       	brne	.+6      	; 0x14d8 <__vector_18+0x14c>
    14d2:	80 e5       	ldi	r24, 0x50	; 80
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <__vector_18+0x156>
    14d8:	80 91 8a 00 	lds	r24, 0x008A
    14dc:	90 91 8b 00 	lds	r25, 0x008B
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	90 93 8b 00 	sts	0x008B, r25
    14e6:	80 93 8a 00 	sts	0x008A, r24
			osd();
    14ea:	0e 94 75 09 	call	0x12ea	; 0x12ea <osd>
    14ee:	28 ec       	ldi	r18, 0xC8	; 200
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	48 e8       	ldi	r20, 0x88	; 136
    14f4:	53 e1       	ldi	r21, 0x13	; 19
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <__vector_18+0x172>
    14f8:	ca 01       	movw	r24, r20
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <__vector_18+0x16e>
    14fe:	21 50       	subi	r18, 0x01	; 1
    1500:	30 40       	sbci	r19, 0x00	; 0
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	2f 3f       	cpi	r18, 0xFF	; 255
    1506:	38 07       	cpc	r19, r24
    1508:	b9 f7       	brne	.-18     	; 0x14f8 <__vector_18+0x16c>
    150a:	29 c0       	rjmp	.+82     	; 0x155e <__vector_18+0x1d2>
			delay_ms(200);
			array_filled=0;
		}
		else if(!down_state()&&down_state1) {
    150c:	1d 99       	sbic	0x03, 5	; 3
    150e:	2a c0       	rjmp	.+84     	; 0x1564 <__vector_18+0x1d8>
    1510:	80 91 03 02 	lds	r24, 0x0203
    1514:	88 23       	and	r24, r24
    1516:	31 f1       	breq	.+76     	; 0x1564 <__vector_18+0x1d8>
			decrement(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    1518:	80 91 8a 00 	lds	r24, 0x008A
    151c:	90 91 8b 00 	lds	r25, 0x008B
    1520:	80 35       	cpi	r24, 0x50	; 80
    1522:	91 05       	cpc	r25, r1
    1524:	19 f4       	brne	.+6      	; 0x152c <__vector_18+0x1a0>
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <__vector_18+0x1aa>
    152c:	80 91 8a 00 	lds	r24, 0x008A
    1530:	90 91 8b 00 	lds	r25, 0x008B
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	90 93 8b 00 	sts	0x008B, r25
    153a:	80 93 8a 00 	sts	0x008A, r24
			osd();
    153e:	0e 94 75 09 	call	0x12ea	; 0x12ea <osd>
    1542:	28 ec       	ldi	r18, 0xC8	; 200
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	48 e8       	ldi	r20, 0x88	; 136
    1548:	53 e1       	ldi	r21, 0x13	; 19
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <__vector_18+0x1c6>
    154c:	ca 01       	movw	r24, r20
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <__vector_18+0x1c2>
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	30 40       	sbci	r19, 0x00	; 0
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	2f 3f       	cpi	r18, 0xFF	; 255
    155a:	38 07       	cpc	r19, r24
    155c:	b9 f7       	brne	.-18     	; 0x154c <__vector_18+0x1c0>
			delay_ms(200);
			array_filled=0;
    155e:	10 92 06 02 	sts	0x0206, r1
    1562:	9b c1       	rjmp	.+822    	; 0x189a <__vector_18+0x50e>
		}
		else if(!top_state()&&top_state1) {
    1564:	18 99       	sbic	0x03, 0	; 3
    1566:	99 c1       	rjmp	.+818    	; 0x189a <__vector_18+0x50e>
    1568:	80 91 ff 01 	lds	r24, 0x01FF
    156c:	88 23       	and	r24, r24
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_18+0x1e6>
    1570:	94 c1       	rjmp	.+808    	; 0x189a <__vector_18+0x50e>
			menu_state=0;
    1572:	10 92 f1 01 	sts	0x01F1, r1
    1576:	8e c1       	rjmp	.+796    	; 0x1894 <__vector_18+0x508>
			redraw_menu=1;
		}
	}
	else if(menu_state>MENU_MAX) {
    1578:	9a 30       	cpi	r25, 0x0A	; 10
    157a:	0c f4       	brge	.+2      	; 0x157e <__vector_18+0x1f2>
    157c:	50 c1       	rjmp	.+672    	; 0x181e <__vector_18+0x492>
		if(!top_state()&&(top_state1)) {
    157e:	18 99       	sbic	0x03, 0	; 3
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <__vector_18+0x206>
    1582:	80 91 ff 01 	lds	r24, 0x01FF
    1586:	88 23       	and	r24, r24
    1588:	21 f0       	breq	.+8      	; 0x1592 <__vector_18+0x206>
			menu_state-=MENU_MAX;
    158a:	99 50       	subi	r25, 0x09	; 9
    158c:	90 93 f1 01 	sts	0x01F1, r25
    1590:	81 c1       	rjmp	.+770    	; 0x1894 <__vector_18+0x508>
			redraw_menu=1;
		}
		else if(menu_state==(MENU_MAX+MENU_MODE)) {
    1592:	9a 30       	cpi	r25, 0x0A	; 10
    1594:	29 f5       	brne	.+74     	; 0x15e0 <__vector_18+0x254>
			if(!right_state()&&right_state1) {
    1596:	19 99       	sbic	0x03, 1	; 3
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <__vector_18+0x226>
    159a:	80 91 01 02 	lds	r24, 0x0201
    159e:	88 23       	and	r24, r24
    15a0:	41 f0       	breq	.+16     	; 0x15b2 <__vector_18+0x226>
				increment(mode,MODE_MIN,MODE_MAX);
    15a2:	80 91 ee 01 	lds	r24, 0x01EE
    15a6:	86 30       	cpi	r24, 0x06	; 6
    15a8:	11 f4       	brne	.+4      	; 0x15ae <__vector_18+0x222>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	10 c0       	rjmp	.+32     	; 0x15ce <__vector_18+0x242>
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	0e c0       	rjmp	.+28     	; 0x15ce <__vector_18+0x242>
				if(mode!=MODE_XY) ADMUX=0b01100000;
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    15b2:	1a 99       	sbic	0x03, 2	; 3
    15b4:	72 c1       	rjmp	.+740    	; 0x189a <__vector_18+0x50e>
    15b6:	80 91 00 02 	lds	r24, 0x0200
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <__vector_18+0x234>
    15be:	6d c1       	rjmp	.+730    	; 0x189a <__vector_18+0x50e>
				decrement(mode,MODE_MIN,MODE_MAX);
    15c0:	80 91 ee 01 	lds	r24, 0x01EE
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	11 f4       	brne	.+4      	; 0x15cc <__vector_18+0x240>
    15c8:	86 e0       	ldi	r24, 0x06	; 6
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <__vector_18+0x242>
    15cc:	81 50       	subi	r24, 0x01	; 1
    15ce:	80 93 ee 01 	sts	0x01EE, r24
				if(mode!=MODE_XY) ADMUX=0b01100000;
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <__vector_18+0x24c>
    15d6:	5e c1       	rjmp	.+700    	; 0x1894 <__vector_18+0x508>
    15d8:	80 e6       	ldi	r24, 0x60	; 96
    15da:	80 93 7c 00 	sts	0x007C, r24
    15de:	5a c1       	rjmp	.+692    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCPERIOD)) {
    15e0:	9b 30       	cpi	r25, 0x0B	; 11
    15e2:	89 f5       	brne	.+98     	; 0x1646 <__vector_18+0x2ba>
			if(!right_state()&&right_state1) {
    15e4:	19 99       	sbic	0x03, 1	; 3
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <__vector_18+0x284>
    15e8:	80 91 01 02 	lds	r24, 0x0201
    15ec:	88 23       	and	r24, r24
    15ee:	81 f0       	breq	.+32     	; 0x1610 <__vector_18+0x284>
				increment(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    15f0:	80 91 8a 00 	lds	r24, 0x008A
    15f4:	90 91 8b 00 	lds	r25, 0x008B
    15f8:	8f 5f       	subi	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	19 f4       	brne	.+6      	; 0x1604 <__vector_18+0x278>
    15fe:	80 e5       	ldi	r24, 0x50	; 80
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	1c c0       	rjmp	.+56     	; 0x163c <__vector_18+0x2b0>
    1604:	80 91 8a 00 	lds	r24, 0x008A
    1608:	90 91 8b 00 	lds	r25, 0x008B
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	16 c0       	rjmp	.+44     	; 0x163c <__vector_18+0x2b0>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    1610:	1a 99       	sbic	0x03, 2	; 3
    1612:	43 c1       	rjmp	.+646    	; 0x189a <__vector_18+0x50e>
    1614:	80 91 00 02 	lds	r24, 0x0200
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <__vector_18+0x292>
    161c:	3e c1       	rjmp	.+636    	; 0x189a <__vector_18+0x50e>
				decrement(adc_period,ADC_PERIOD_MIN,ADC_PERIOD_MAX);
    161e:	80 91 8a 00 	lds	r24, 0x008A
    1622:	90 91 8b 00 	lds	r25, 0x008B
    1626:	80 35       	cpi	r24, 0x50	; 80
    1628:	91 05       	cpc	r25, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <__vector_18+0x2a6>
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	9f ef       	ldi	r25, 0xFF	; 255
    1630:	05 c0       	rjmp	.+10     	; 0x163c <__vector_18+0x2b0>
    1632:	80 91 8a 00 	lds	r24, 0x008A
    1636:	90 91 8b 00 	lds	r25, 0x008B
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	90 93 8b 00 	sts	0x008B, r25
    1640:	80 93 8a 00 	sts	0x008A, r24
    1644:	27 c1       	rjmp	.+590    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCCHECK)) {
    1646:	9c 30       	cpi	r25, 0x0C	; 12
    1648:	41 f5       	brne	.+80     	; 0x169a <__vector_18+0x30e>
			if(!right_state()&&right_state1) {
    164a:	19 99       	sbic	0x03, 1	; 3
    164c:	10 c0       	rjmp	.+32     	; 0x166e <__vector_18+0x2e2>
    164e:	80 91 01 02 	lds	r24, 0x0201
    1652:	88 23       	and	r24, r24
    1654:	61 f0       	breq	.+24     	; 0x166e <__vector_18+0x2e2>
				increment(adc_check,0,ALL_N-1);
    1656:	80 91 f4 01 	lds	r24, 0x01F4
    165a:	90 91 f5 01 	lds	r25, 0x01F5
    165e:	8f 37       	cpi	r24, 0x7F	; 127
    1660:	91 05       	cpc	r25, r1
    1662:	19 f4       	brne	.+6      	; 0x166a <__vector_18+0x2de>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <__vector_18+0x304>
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <__vector_18+0x304>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    166e:	1a 99       	sbic	0x03, 2	; 3
    1670:	14 c1       	rjmp	.+552    	; 0x189a <__vector_18+0x50e>
    1672:	80 91 00 02 	lds	r24, 0x0200
    1676:	88 23       	and	r24, r24
    1678:	09 f4       	brne	.+2      	; 0x167c <__vector_18+0x2f0>
    167a:	0f c1       	rjmp	.+542    	; 0x189a <__vector_18+0x50e>
				decrement(adc_check,0,ALL_N-1);
    167c:	80 91 f4 01 	lds	r24, 0x01F4
    1680:	90 91 f5 01 	lds	r25, 0x01F5
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	19 f4       	brne	.+6      	; 0x168e <__vector_18+0x302>
    1688:	8f e7       	ldi	r24, 0x7F	; 127
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <__vector_18+0x304>
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	90 93 f5 01 	sts	0x01F5, r25
    1694:	80 93 f4 01 	sts	0x01F4, r24
    1698:	fd c0       	rjmp	.+506    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCERROR)) {
    169a:	9d 30       	cpi	r25, 0x0D	; 13
    169c:	61 f5       	brne	.+88     	; 0x16f6 <__vector_18+0x36a>
			if(!right_state()&&right_state1) {
    169e:	19 99       	sbic	0x03, 1	; 3
    16a0:	12 c0       	rjmp	.+36     	; 0x16c6 <__vector_18+0x33a>
    16a2:	80 91 01 02 	lds	r24, 0x0201
    16a6:	88 23       	and	r24, r24
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <__vector_18+0x33a>
				incr_step(adc_error,ADC_ERROR_STEP,ADC_ERROR_MAX,ADC_ERROR_STEP);
    16aa:	80 91 f2 01 	lds	r24, 0x01F2
    16ae:	90 91 f3 01 	lds	r25, 0x01F3
    16b2:	2f ef       	ldi	r18, 0xFF	; 255
    16b4:	8c 39       	cpi	r24, 0x9C	; 156
    16b6:	92 07       	cpc	r25, r18
    16b8:	18 f0       	brcs	.+6      	; 0x16c0 <__vector_18+0x334>
    16ba:	84 e6       	ldi	r24, 0x64	; 100
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	16 c0       	rjmp	.+44     	; 0x16ec <__vector_18+0x360>
    16c0:	8c 59       	subi	r24, 0x9C	; 156
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	13 c0       	rjmp	.+38     	; 0x16ec <__vector_18+0x360>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    16c6:	1a 99       	sbic	0x03, 2	; 3
    16c8:	e8 c0       	rjmp	.+464    	; 0x189a <__vector_18+0x50e>
    16ca:	80 91 00 02 	lds	r24, 0x0200
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__vector_18+0x348>
    16d2:	e3 c0       	rjmp	.+454    	; 0x189a <__vector_18+0x50e>
				decr_step(adc_error,ADC_ERROR_STEP,ADC_ERROR_MAX,ADC_ERROR_STEP);
    16d4:	80 91 f2 01 	lds	r24, 0x01F2
    16d8:	90 91 f3 01 	lds	r25, 0x01F3
    16dc:	88 3c       	cpi	r24, 0xC8	; 200
    16de:	91 05       	cpc	r25, r1
    16e0:	18 f4       	brcc	.+6      	; 0x16e8 <__vector_18+0x35c>
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	9f ef       	ldi	r25, 0xFF	; 255
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <__vector_18+0x360>
    16e8:	84 56       	subi	r24, 0x64	; 100
    16ea:	90 40       	sbci	r25, 0x00	; 0
    16ec:	90 93 f3 01 	sts	0x01F3, r25
    16f0:	80 93 f2 01 	sts	0x01F2, r24
    16f4:	cf c0       	rjmp	.+414    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_ADCSTEP)) {
    16f6:	9e 30       	cpi	r25, 0x0E	; 14
    16f8:	d9 f4       	brne	.+54     	; 0x1730 <__vector_18+0x3a4>
			if(!right_state()&&right_state1) {
    16fa:	19 99       	sbic	0x03, 1	; 3
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <__vector_18+0x382>
    16fe:	80 91 01 02 	lds	r24, 0x0201
    1702:	88 23       	and	r24, r24
    1704:	21 f0       	breq	.+8      	; 0x170e <__vector_18+0x382>
				increment(adc_step,ADC_STEP_MIN,ADC_PERIOD_MAX);
    1706:	80 91 ef 01 	lds	r24, 0x01EF
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	0e c0       	rjmp	.+28     	; 0x172a <__vector_18+0x39e>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    170e:	1a 99       	sbic	0x03, 2	; 3
    1710:	c4 c0       	rjmp	.+392    	; 0x189a <__vector_18+0x50e>
    1712:	80 91 00 02 	lds	r24, 0x0200
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <__vector_18+0x390>
    171a:	bf c0       	rjmp	.+382    	; 0x189a <__vector_18+0x50e>
				decrement(adc_step,ADC_STEP_MIN,ADC_PERIOD_MAX);
    171c:	80 91 ef 01 	lds	r24, 0x01EF
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	11 f4       	brne	.+4      	; 0x1728 <__vector_18+0x39c>
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	01 c0       	rjmp	.+2      	; 0x172a <__vector_18+0x39e>
    1728:	81 50       	subi	r24, 0x01	; 1
    172a:	80 93 ef 01 	sts	0x01EF, r24
    172e:	b2 c0       	rjmp	.+356    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_LCDSKIP)) {
    1730:	9f 30       	cpi	r25, 0x0F	; 15
    1732:	51 f5       	brne	.+84     	; 0x1788 <__vector_18+0x3fc>
			if(!right_state()&&right_state1) {
    1734:	19 99       	sbic	0x03, 1	; 3
    1736:	11 c0       	rjmp	.+34     	; 0x175a <__vector_18+0x3ce>
    1738:	80 91 01 02 	lds	r24, 0x0201
    173c:	88 23       	and	r24, r24
    173e:	69 f0       	breq	.+26     	; 0x175a <__vector_18+0x3ce>
				increment(lcd_skip,LCD_SKIP_MIN,LCD_SKIP_MAX);
    1740:	80 91 f8 01 	lds	r24, 0x01F8
    1744:	90 91 f9 01 	lds	r25, 0x01F9
    1748:	23 e0       	ldi	r18, 0x03	; 3
    174a:	88 3e       	cpi	r24, 0xE8	; 232
    174c:	92 07       	cpc	r25, r18
    174e:	19 f4       	brne	.+6      	; 0x1756 <__vector_18+0x3ca>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	14 c0       	rjmp	.+40     	; 0x177e <__vector_18+0x3f2>
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	12 c0       	rjmp	.+36     	; 0x177e <__vector_18+0x3f2>
				redraw_menu=1;
			}
			else if(!left_state()&&left_state1) {
    175a:	1a 99       	sbic	0x03, 2	; 3
    175c:	9e c0       	rjmp	.+316    	; 0x189a <__vector_18+0x50e>
    175e:	80 91 00 02 	lds	r24, 0x0200
    1762:	88 23       	and	r24, r24
    1764:	09 f4       	brne	.+2      	; 0x1768 <__vector_18+0x3dc>
    1766:	99 c0       	rjmp	.+306    	; 0x189a <__vector_18+0x50e>
				decrement(lcd_skip,LCD_SKIP_MIN,LCD_SKIP_MAX);
    1768:	80 91 f8 01 	lds	r24, 0x01F8
    176c:	90 91 f9 01 	lds	r25, 0x01F9
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	19 f4       	brne	.+6      	; 0x177c <__vector_18+0x3f0>
    1776:	88 ee       	ldi	r24, 0xE8	; 232
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	01 c0       	rjmp	.+2      	; 0x177e <__vector_18+0x3f2>
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	90 93 f9 01 	sts	0x01F9, r25
    1782:	80 93 f8 01 	sts	0x01F8, r24
    1786:	86 c0       	rjmp	.+268    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_SPECTRUMXZOOM)) {
    1788:	90 31       	cpi	r25, 0x10	; 16
    178a:	19 f5       	brne	.+70     	; 0x17d2 <__vector_18+0x446>
			if(!right_state()&&right_state1) {
    178c:	19 99       	sbic	0x03, 1	; 3
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <__vector_18+0x424>
    1790:	80 91 01 02 	lds	r24, 0x0201
    1794:	88 23       	and	r24, r24
    1796:	61 f0       	breq	.+24     	; 0x17b0 <__vector_18+0x424>
				increment(spectrum_x_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_X);
    1798:	80 91 08 02 	lds	r24, 0x0208
    179c:	85 30       	cpi	r24, 0x05	; 5
    179e:	11 f4       	brne	.+4      	; 0x17a4 <__vector_18+0x418>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <__vector_18+0x41a>
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	80 93 08 02 	sts	0x0208, r24
				redraw_menu=1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	80 93 05 02 	sts	0x0205, r24
			}
			if(!left_state()&&left_state1) {
    17b0:	1a 99       	sbic	0x03, 2	; 3
    17b2:	73 c0       	rjmp	.+230    	; 0x189a <__vector_18+0x50e>
    17b4:	80 91 00 02 	lds	r24, 0x0200
    17b8:	88 23       	and	r24, r24
    17ba:	09 f4       	brne	.+2      	; 0x17be <__vector_18+0x432>
    17bc:	6e c0       	rjmp	.+220    	; 0x189a <__vector_18+0x50e>
				decrement(spectrum_x_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_X);
    17be:	80 91 08 02 	lds	r24, 0x0208
    17c2:	88 23       	and	r24, r24
    17c4:	11 f4       	brne	.+4      	; 0x17ca <__vector_18+0x43e>
    17c6:	85 e0       	ldi	r24, 0x05	; 5
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <__vector_18+0x440>
    17ca:	81 50       	subi	r24, 0x01	; 1
    17cc:	80 93 08 02 	sts	0x0208, r24
    17d0:	61 c0       	rjmp	.+194    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
		else if(menu_state==(MENU_MAX+MENU_SPECTRUMYZOOM)) {
    17d2:	91 31       	cpi	r25, 0x11	; 17
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <__vector_18+0x44c>
    17d6:	61 c0       	rjmp	.+194    	; 0x189a <__vector_18+0x50e>
			if(!right_state()&&right_state1) {
    17d8:	19 99       	sbic	0x03, 1	; 3
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <__vector_18+0x470>
    17dc:	80 91 01 02 	lds	r24, 0x0201
    17e0:	88 23       	and	r24, r24
    17e2:	61 f0       	breq	.+24     	; 0x17fc <__vector_18+0x470>
				increment(spectrum_y_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_Y);
    17e4:	80 91 09 02 	lds	r24, 0x0209
    17e8:	86 30       	cpi	r24, 0x06	; 6
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <__vector_18+0x464>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <__vector_18+0x466>
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	80 93 09 02 	sts	0x0209, r24
				redraw_menu=1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 05 02 	sts	0x0205, r24
			}
			if(!left_state()&&left_state1) {
    17fc:	1a 99       	sbic	0x03, 2	; 3
    17fe:	4d c0       	rjmp	.+154    	; 0x189a <__vector_18+0x50e>
    1800:	80 91 00 02 	lds	r24, 0x0200
    1804:	88 23       	and	r24, r24
    1806:	09 f4       	brne	.+2      	; 0x180a <__vector_18+0x47e>
    1808:	48 c0       	rjmp	.+144    	; 0x189a <__vector_18+0x50e>
				decrement(spectrum_y_zoom,SPECTRUM_ZOOM_MIN,SPECTRUM_ZOOM_MAX_Y);
    180a:	80 91 09 02 	lds	r24, 0x0209
    180e:	88 23       	and	r24, r24
    1810:	11 f4       	brne	.+4      	; 0x1816 <__vector_18+0x48a>
    1812:	86 e0       	ldi	r24, 0x06	; 6
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <__vector_18+0x48c>
    1816:	81 50       	subi	r24, 0x01	; 1
    1818:	80 93 09 02 	sts	0x0209, r24
    181c:	3b c0       	rjmp	.+118    	; 0x1894 <__vector_18+0x508>
				redraw_menu=1;
			}
		}
	}
	else {
		if(!right_state()&&right_state1) {
    181e:	19 99       	sbic	0x03, 1	; 3
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <__vector_18+0x4b4>
    1822:	80 91 01 02 	lds	r24, 0x0201
    1826:	88 23       	and	r24, r24
    1828:	59 f0       	breq	.+22     	; 0x1840 <__vector_18+0x4b4>
			menu_state=(menu_state==MENU_MAX)?0:menu_state+1;
    182a:	99 30       	cpi	r25, 0x09	; 9
    182c:	11 f4       	brne	.+4      	; 0x1832 <__vector_18+0x4a6>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <__vector_18+0x4aa>
    1832:	89 2f       	mov	r24, r25
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	80 93 f1 01 	sts	0x01F1, r24
			redraw_menu=1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 05 02 	sts	0x0205, r24
		}
		if(!left_state()&&left_state1) {
    1840:	1a 99       	sbic	0x03, 2	; 3
    1842:	10 c0       	rjmp	.+32     	; 0x1864 <__vector_18+0x4d8>
    1844:	80 91 00 02 	lds	r24, 0x0200
    1848:	88 23       	and	r24, r24
    184a:	61 f0       	breq	.+24     	; 0x1864 <__vector_18+0x4d8>
			menu_state=menu_state?menu_state-1:MENU_MAX;
    184c:	80 91 f1 01 	lds	r24, 0x01F1
    1850:	88 23       	and	r24, r24
    1852:	11 f4       	brne	.+4      	; 0x1858 <__vector_18+0x4cc>
    1854:	89 e0       	ldi	r24, 0x09	; 9
    1856:	01 c0       	rjmp	.+2      	; 0x185a <__vector_18+0x4ce>
    1858:	81 50       	subi	r24, 0x01	; 1
    185a:	80 93 f1 01 	sts	0x01F1, r24
			redraw_menu=1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 05 02 	sts	0x0205, r24
		}
		if(!top_state()&&(top_state1)) {
    1864:	18 99       	sbic	0x03, 0	; 3
    1866:	19 c0       	rjmp	.+50     	; 0x189a <__vector_18+0x50e>
    1868:	80 91 ff 01 	lds	r24, 0x01FF
    186c:	88 23       	and	r24, r24
    186e:	a9 f0       	breq	.+42     	; 0x189a <__vector_18+0x50e>
			if(menu_state==0) {
    1870:	80 91 f1 01 	lds	r24, 0x01F1
    1874:	88 23       	and	r24, r24
    1876:	49 f4       	brne	.+18     	; 0x188a <__vector_18+0x4fe>
				menu_state=-1;
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	80 93 f1 01 	sts	0x01F1, r24
				redraw_menu=1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 93 05 02 	sts	0x0205, r24
				top_state1=0;
    1884:	10 92 ff 01 	sts	0x01FF, r1
    1888:	08 c0       	rjmp	.+16     	; 0x189a <__vector_18+0x50e>
			}
			else {
				menu_state+=MENU_MAX;
    188a:	87 5f       	subi	r24, 0xF7	; 247
    188c:	80 93 f1 01 	sts	0x01F1, r24
				top_state1=0;
    1890:	10 92 ff 01 	sts	0x01FF, r1
				redraw_menu=1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 05 02 	sts	0x0205, r24
			}
		}
	}
	buttons_update();
    189a:	0e 94 0a 03 	call	0x614	; 0x614 <buttons_update>
}
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <tbl_window>:
    18c0:	3d 0a       	sbc	r3, r29
    18c2:	4f 0a       	sbc	r4, r31
    18c4:	85 0a       	sbc	r8, r21
    18c6:	e0 0a       	sbc	r14, r16
    18c8:	5e 0b       	sbc	r21, r30
    18ca:	01 0c       	add	r0, r1
    18cc:	c6 0c       	add	r12, r6
    18ce:	ae 0d       	add	r26, r14
    18d0:	b8 0e       	add	r11, r24
    18d2:	e4 0f       	add	r30, r20
    18d4:	31 11       	cpse	r19, r1
    18d6:	9d 12       	cpse	r9, r29
    18d8:	29 14       	cp	r2, r9
    18da:	d3 15       	cp	r29, r3
    18dc:	9a 17       	cp	r25, r26
    18de:	7d 19       	sub	r23, r13
    18e0:	7c 1b       	sub	r23, r28
    18e2:	93 1d       	adc	r25, r3
    18e4:	c4 1f       	adc	r28, r20
    18e6:	0b 22       	and	r0, r27
    18e8:	68 24       	eor	r6, r8
    18ea:	d9 26       	eor	r13, r25
    18ec:	5c 29       	or	r21, r12
    18ee:	f1 2b       	or	r31, r17
    18f0:	96 2e       	mov	r9, r22
    18f2:	48 31       	cpi	r20, 0x18	; 24
    18f4:	06 34       	cpi	r16, 0x46	; 70
    18f6:	cf 36       	cpi	r28, 0x6F	; 111
    18f8:	a1 39       	cpi	r26, 0x91	; 145
    18fa:	7a 3c       	cpi	r23, 0xCA	; 202
    18fc:	58 3f       	cpi	r21, 0xF8	; 248
    18fe:	3a 42       	sbci	r19, 0x2A	; 42
    1900:	1e 45       	sbci	r17, 0x5E	; 94
    1902:	01 48       	sbci	r16, 0x81	; 129
    1904:	e3 4a       	sbci	r30, 0xA3	; 163
    1906:	c1 4d       	sbci	r28, 0xD1	; 209
    1908:	9a 50       	subi	r25, 0x0A	; 10
    190a:	6c 53       	subi	r22, 0x3C	; 60
    190c:	35 56       	subi	r19, 0x65	; 101
    190e:	f4 58       	subi	r31, 0x84	; 132
    1910:	a6 5b       	subi	r26, 0xB6	; 182
    1912:	4a 5e       	subi	r20, 0xEA	; 234
    1914:	df 60       	ori	r29, 0x0F	; 15
    1916:	63 63       	ori	r22, 0x33	; 51
    1918:	d4 65       	ori	r29, 0x54	; 84
    191a:	31 68       	ori	r19, 0x81	; 129
    191c:	78 6a       	ori	r23, 0xA8	; 168
    191e:	a8 6c       	ori	r26, 0xC8	; 200
    1920:	c0 6e       	ori	r28, 0xE0	; 224
    1922:	be 70       	andi	r27, 0x0E	; 14
    1924:	a1 72       	andi	r26, 0x21	; 33
    1926:	68 74       	andi	r22, 0x48	; 72
    1928:	12 76       	andi	r17, 0x62	; 98
    192a:	9e 77       	andi	r25, 0x7E	; 126
    192c:	0b 79       	andi	r16, 0x9B	; 155
    192e:	57 7a       	andi	r21, 0xA7	; 167
    1930:	83 7b       	andi	r24, 0xB3	; 179
    1932:	8d 7c       	andi	r24, 0xCD	; 205
    1934:	75 7d       	andi	r23, 0xD5	; 213
    1936:	3b 7e       	andi	r19, 0xEB	; 235
    1938:	dd 7e       	andi	r29, 0xED	; 237
    193a:	5b 7f       	andi	r21, 0xFB	; 251
    193c:	b6 7f       	andi	r27, 0xF6	; 246
    193e:	ec 7f       	andi	r30, 0xFC	; 252
    1940:	fe 7f       	andi	r31, 0xFE	; 254
    1942:	ec 7f       	andi	r30, 0xFC	; 252
    1944:	b6 7f       	andi	r27, 0xF6	; 246
    1946:	5b 7f       	andi	r21, 0xFB	; 251
    1948:	dd 7e       	andi	r29, 0xED	; 237
    194a:	3b 7e       	andi	r19, 0xEB	; 235
    194c:	75 7d       	andi	r23, 0xD5	; 213
    194e:	8d 7c       	andi	r24, 0xCD	; 205
    1950:	83 7b       	andi	r24, 0xB3	; 179
    1952:	57 7a       	andi	r21, 0xA7	; 167
    1954:	0b 79       	andi	r16, 0x9B	; 155
    1956:	9e 77       	andi	r25, 0x7E	; 126
    1958:	12 76       	andi	r17, 0x62	; 98
    195a:	68 74       	andi	r22, 0x48	; 72
    195c:	a1 72       	andi	r26, 0x21	; 33
    195e:	be 70       	andi	r27, 0x0E	; 14
    1960:	c0 6e       	ori	r28, 0xE0	; 224
    1962:	a8 6c       	ori	r26, 0xC8	; 200
    1964:	78 6a       	ori	r23, 0xA8	; 168
    1966:	31 68       	ori	r19, 0x81	; 129
    1968:	d4 65       	ori	r29, 0x54	; 84
    196a:	63 63       	ori	r22, 0x33	; 51
    196c:	df 60       	ori	r29, 0x0F	; 15
    196e:	4a 5e       	subi	r20, 0xEA	; 234
    1970:	a6 5b       	subi	r26, 0xB6	; 182
    1972:	f4 58       	subi	r31, 0x84	; 132
    1974:	35 56       	subi	r19, 0x65	; 101
    1976:	6c 53       	subi	r22, 0x3C	; 60
    1978:	9a 50       	subi	r25, 0x0A	; 10
    197a:	c1 4d       	sbci	r28, 0xD1	; 209
    197c:	e3 4a       	sbci	r30, 0xA3	; 163
    197e:	01 48       	sbci	r16, 0x81	; 129
    1980:	1e 45       	sbci	r17, 0x5E	; 94
    1982:	3a 42       	sbci	r19, 0x2A	; 42
    1984:	58 3f       	cpi	r21, 0xF8	; 248
    1986:	7a 3c       	cpi	r23, 0xCA	; 202
    1988:	a1 39       	cpi	r26, 0x91	; 145
    198a:	cf 36       	cpi	r28, 0x6F	; 111
    198c:	06 34       	cpi	r16, 0x46	; 70
    198e:	48 31       	cpi	r20, 0x18	; 24
    1990:	96 2e       	mov	r9, r22
    1992:	f1 2b       	or	r31, r17
    1994:	5c 29       	or	r21, r12
    1996:	d9 26       	eor	r13, r25
    1998:	68 24       	eor	r6, r8
    199a:	0b 22       	and	r0, r27
    199c:	c4 1f       	adc	r28, r20
    199e:	93 1d       	adc	r25, r3
    19a0:	7c 1b       	sub	r23, r28
    19a2:	7e 19       	sub	r23, r14
    19a4:	9a 17       	cp	r25, r26
    19a6:	d3 15       	cp	r29, r3
    19a8:	29 14       	cp	r2, r9
    19aa:	9d 12       	cpse	r9, r29
    19ac:	31 11       	cpse	r19, r1
    19ae:	e4 0f       	add	r30, r20
    19b0:	b8 0e       	add	r11, r24
    19b2:	ae 0d       	add	r26, r14
    19b4:	c6 0c       	add	r12, r6
    19b6:	01 0c       	add	r0, r1
    19b8:	5e 0b       	sbc	r21, r30
    19ba:	e0 0a       	sbc	r14, r16
    19bc:	85 0a       	sbc	r8, r21
    19be:	4f 0a       	sbc	r4, r31

000019c0 <tbl_cos_sin>:
    19c0:	ff 7f       	andi	r31, 0xFF	; 255
    19c2:	00 00       	nop
    19c4:	d7 7f       	andi	r29, 0xF7	; 247
    19c6:	47 06       	cpc	r4, r23
    19c8:	61 7f       	andi	r22, 0xF1	; 241
    19ca:	8b 0c       	add	r8, r11
    19cc:	9c 7e       	andi	r25, 0xEC	; 236
    19ce:	c7 12       	cpse	r12, r23
    19d0:	89 7d       	andi	r24, 0xD9	; 217
    19d2:	f8 18       	sub	r15, r8
    19d4:	29 7c       	andi	r18, 0xC9	; 201
    19d6:	19 1f       	adc	r17, r25
    19d8:	7c 7a       	andi	r23, 0xAC	; 172
    19da:	27 25       	eor	r18, r7
    19dc:	83 78       	andi	r24, 0x83	; 131
    19de:	1e 2b       	or	r17, r30
    19e0:	40 76       	andi	r20, 0x60	; 96
    19e2:	fb 30       	cpi	r31, 0x0B	; 11
    19e4:	b5 73       	andi	r27, 0x35	; 53
    19e6:	b9 36       	cpi	r27, 0x69	; 105
    19e8:	e1 70       	andi	r30, 0x01	; 1
    19ea:	56 3c       	cpi	r21, 0xC6	; 198
    19ec:	c9 6d       	ori	r28, 0xD9	; 217
    19ee:	cd 41       	sbci	r28, 0x1D	; 29
    19f0:	6c 6a       	ori	r22, 0xAC	; 172
    19f2:	1c 47       	sbci	r17, 0x7C	; 124
    19f4:	ce 66       	ori	r28, 0x6E	; 110
    19f6:	3f 4c       	sbci	r19, 0xCF	; 207
    19f8:	f1 62       	ori	r31, 0x21	; 33
    19fa:	33 51       	subi	r19, 0x13	; 19
    19fc:	d6 5e       	subi	r29, 0xE6	; 230
    19fe:	f4 55       	subi	r31, 0x54	; 84
    1a00:	81 5a       	subi	r24, 0xA1	; 161
    1a02:	81 5a       	subi	r24, 0xA1	; 161
    1a04:	f4 55       	subi	r31, 0x54	; 84
    1a06:	d6 5e       	subi	r29, 0xE6	; 230
    1a08:	33 51       	subi	r19, 0x13	; 19
    1a0a:	f1 62       	ori	r31, 0x21	; 33
    1a0c:	3f 4c       	sbci	r19, 0xCF	; 207
    1a0e:	ce 66       	ori	r28, 0x6E	; 110
    1a10:	1c 47       	sbci	r17, 0x7C	; 124
    1a12:	6c 6a       	ori	r22, 0xAC	; 172
    1a14:	cd 41       	sbci	r28, 0x1D	; 29
    1a16:	c9 6d       	ori	r28, 0xD9	; 217
    1a18:	56 3c       	cpi	r21, 0xC6	; 198
    1a1a:	e1 70       	andi	r30, 0x01	; 1
    1a1c:	b9 36       	cpi	r27, 0x69	; 105
    1a1e:	b5 73       	andi	r27, 0x35	; 53
    1a20:	fb 30       	cpi	r31, 0x0B	; 11
    1a22:	40 76       	andi	r20, 0x60	; 96
    1a24:	1e 2b       	or	r17, r30
    1a26:	83 78       	andi	r24, 0x83	; 131
    1a28:	27 25       	eor	r18, r7
    1a2a:	7c 7a       	andi	r23, 0xAC	; 172
    1a2c:	19 1f       	adc	r17, r25
    1a2e:	29 7c       	andi	r18, 0xC9	; 201
    1a30:	f8 18       	sub	r15, r8
    1a32:	89 7d       	andi	r24, 0xD9	; 217
    1a34:	c7 12       	cpse	r12, r23
    1a36:	9c 7e       	andi	r25, 0xEC	; 236
    1a38:	8b 0c       	add	r8, r11
    1a3a:	61 7f       	andi	r22, 0xF1	; 241
    1a3c:	47 06       	cpc	r4, r23
    1a3e:	d7 7f       	andi	r29, 0xF7	; 247
    1a40:	00 00       	nop
    1a42:	fe 7f       	andi	r31, 0xFE	; 254
    1a44:	b9 f9       	.word	0xf9b9	; ????
    1a46:	d7 7f       	andi	r29, 0xF7	; 247
    1a48:	75 f3       	brhs	.-36     	; 0x1a26 <tbl_cos_sin+0x66>
    1a4a:	61 7f       	andi	r22, 0xF1	; 241
    1a4c:	39 ed       	ldi	r19, 0xD9	; 217
    1a4e:	9c 7e       	andi	r25, 0xEC	; 236
    1a50:	08 e7       	ldi	r16, 0x78	; 120
    1a52:	89 7d       	andi	r24, 0xD9	; 217
    1a54:	e7 e0       	ldi	r30, 0x07	; 7
    1a56:	29 7c       	andi	r18, 0xC9	; 201
    1a58:	d9 da       	rcall	.-2638   	; 0x100c <main+0x6a>
    1a5a:	7c 7a       	andi	r23, 0xAC	; 172
    1a5c:	e2 d4       	rcall	.+2500   	; 0x2422 <__data_load_end+0x372>
    1a5e:	83 78       	andi	r24, 0x83	; 131
    1a60:	05 cf       	rjmp	.-502    	; 0x186c <__vector_18+0x4e0>
    1a62:	40 76       	andi	r20, 0x60	; 96
    1a64:	47 c9       	rjmp	.-3442   	; 0xcf4 <draw_menu+0x15c>
    1a66:	b5 73       	andi	r27, 0x35	; 53
    1a68:	aa c3       	rjmp	.+1876   	; 0x21be <__data_load_end+0x10e>
    1a6a:	e1 70       	andi	r30, 0x01	; 1
    1a6c:	33 be       	out	0x33, r3	; 51
    1a6e:	c9 6d       	ori	r28, 0xD9	; 217
    1a70:	e4 b8       	out	0x04, r14	; 4
    1a72:	6c 6a       	ori	r22, 0xAC	; 172
    1a74:	c1 b3       	in	r28, 0x11	; 17
    1a76:	ce 66       	ori	r28, 0x6E	; 110
    1a78:	cd ae       	std	Y+61, r12	; 0x3d
    1a7a:	f1 62       	ori	r31, 0x21	; 33
    1a7c:	0c aa       	std	Y+52, r0	; 0x34
    1a7e:	d6 5e       	subi	r29, 0xE6	; 230
    1a80:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a82:	81 5a       	subi	r24, 0xA1	; 161
    1a84:	2a a1       	ldd	r18, Y+34	; 0x22
    1a86:	f5 55       	subi	r31, 0x55	; 85
    1a88:	0f 9d       	mul	r16, r15
    1a8a:	33 51       	subi	r19, 0x13	; 19
    1a8c:	32 99       	sbic	0x06, 2	; 6
    1a8e:	3f 4c       	sbci	r19, 0xCF	; 207
    1a90:	94 95       	.word	0x9594	; ????
    1a92:	1c 47       	sbci	r17, 0x7C	; 124
    1a94:	37 92       	.word	0x9237	; ????
    1a96:	cd 41       	sbci	r28, 0x1D	; 29
    1a98:	1f 8f       	std	Y+31, r17	; 0x1f
    1a9a:	56 3c       	cpi	r21, 0xC6	; 198
    1a9c:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1a9e:	b9 36       	cpi	r27, 0x69	; 105
    1aa0:	c0 89       	ldd	r28, Z+16	; 0x10
    1aa2:	fb 30       	cpi	r31, 0x0B	; 11
    1aa4:	7d 87       	std	Y+13, r23	; 0x0d
    1aa6:	1e 2b       	or	r17, r30
    1aa8:	84 85       	ldd	r24, Z+12	; 0x0c
    1aaa:	27 25       	eor	r18, r7
    1aac:	d8 83       	st	Y, r29
    1aae:	19 1f       	adc	r17, r25
    1ab0:	77 82       	std	Z+7, r7	; 0x07
    1ab2:	f8 18       	sub	r15, r8
    1ab4:	64 81       	ldd	r22, Z+4	; 0x04
    1ab6:	c7 12       	cpse	r12, r23
    1ab8:	9f 80       	ldd	r9, Y+7	; 0x07
    1aba:	8b 0c       	add	r8, r11
    1abc:	29 80       	ldd	r2, Y+1	; 0x01
    1abe:	47 06       	cpc	r4, r23

00001ac0 <tbl_bitrev>:
    1ac0:	00 00       	nop
    1ac2:	00 01       	movw	r0, r0
    1ac4:	80 00       	.word	0x0080	; ????
    1ac6:	80 01       	movw	r16, r0
    1ac8:	40 00       	.word	0x0040	; ????
    1aca:	40 01       	movw	r8, r0
    1acc:	c0 00       	.word	0x00c0	; ????
    1ace:	c0 01       	movw	r24, r0
    1ad0:	20 00       	.word	0x0020	; ????
    1ad2:	20 01       	movw	r4, r0
    1ad4:	a0 00       	.word	0x00a0	; ????
    1ad6:	a0 01       	movw	r20, r0
    1ad8:	60 00       	.word	0x0060	; ????
    1ada:	60 01       	movw	r12, r0
    1adc:	e0 00       	.word	0x00e0	; ????
    1ade:	e0 01       	movw	r28, r0
    1ae0:	10 00       	.word	0x0010	; ????
    1ae2:	10 01       	movw	r2, r0
    1ae4:	90 00       	.word	0x0090	; ????
    1ae6:	90 01       	movw	r18, r0
    1ae8:	50 00       	.word	0x0050	; ????
    1aea:	50 01       	movw	r10, r0
    1aec:	d0 00       	.word	0x00d0	; ????
    1aee:	d0 01       	movw	r26, r0
    1af0:	30 00       	.word	0x0030	; ????
    1af2:	30 01       	movw	r6, r0
    1af4:	b0 00       	.word	0x00b0	; ????
    1af6:	b0 01       	movw	r22, r0
    1af8:	70 00       	.word	0x0070	; ????
    1afa:	70 01       	movw	r14, r0
    1afc:	f0 00       	.word	0x00f0	; ????
    1afe:	f0 01       	movw	r30, r0
    1b00:	08 00       	.word	0x0008	; ????
    1b02:	08 01       	movw	r0, r16
    1b04:	88 00       	.word	0x0088	; ????
    1b06:	88 01       	movw	r16, r16
    1b08:	48 00       	.word	0x0048	; ????
    1b0a:	48 01       	movw	r8, r16
    1b0c:	c8 00       	.word	0x00c8	; ????
    1b0e:	c8 01       	movw	r24, r16
    1b10:	28 00       	.word	0x0028	; ????
    1b12:	28 01       	movw	r4, r16
    1b14:	a8 00       	.word	0x00a8	; ????
    1b16:	a8 01       	movw	r20, r16
    1b18:	68 00       	.word	0x0068	; ????
    1b1a:	68 01       	movw	r12, r16
    1b1c:	e8 00       	.word	0x00e8	; ????
    1b1e:	e8 01       	movw	r28, r16
    1b20:	18 00       	.word	0x0018	; ????
    1b22:	18 01       	movw	r2, r16
    1b24:	98 00       	.word	0x0098	; ????
    1b26:	98 01       	movw	r18, r16
    1b28:	58 00       	.word	0x0058	; ????
    1b2a:	58 01       	movw	r10, r16
    1b2c:	d8 00       	.word	0x00d8	; ????
    1b2e:	d8 01       	movw	r26, r16
    1b30:	38 00       	.word	0x0038	; ????
    1b32:	38 01       	movw	r6, r16
    1b34:	b8 00       	.word	0x00b8	; ????
    1b36:	b8 01       	movw	r22, r16
    1b38:	78 00       	.word	0x0078	; ????
    1b3a:	78 01       	movw	r14, r16
    1b3c:	f8 00       	.word	0x00f8	; ????
    1b3e:	f8 01       	movw	r30, r16

00001b40 <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
    1b40:	3f 92       	push	r3
    1b42:	2f 92       	push	r2
	pushw	AH,AL
    1b44:	1f 93       	push	r17
    1b46:	0f 93       	push	r16
	pushw	YH,YL
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
    1b4c:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
    1b4e:	eb 01       	movw	r28, r22
	clr	EH				;Zero
    1b50:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
    1b52:	e0 ec       	ldi	r30, 0xC0	; 192
    1b54:	f8 e1       	ldi	r31, 0x18	; 24
	ldiw	AH,AL, FFT_N			;A = FFT_N;
    1b56:	00 e8       	ldi	r16, 0x80	; 128
    1b58:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
    1b5a:	25 91       	lpm	r18, Z+
    1b5c:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
    1b5e:	4d 91       	ld	r20, X+
    1b60:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
    1b62:	b5 03       	fmuls	r19, r21
    1b64:	b0 01       	movw	r22, r0
    1b66:	2c 03       	fmul	r18, r20
    1b68:	10 01       	movw	r2, r0
    1b6a:	69 1f       	adc	r22, r25
    1b6c:	bc 03       	fmulsu	r19, r20
    1b6e:	79 0b       	sbc	r23, r25
    1b70:	30 0c       	add	r3, r0
    1b72:	61 1d       	adc	r22, r1
    1b74:	79 1f       	adc	r23, r25
    1b76:	da 03       	fmulsu	r21, r18
    1b78:	79 0b       	sbc	r23, r25
    1b7a:	30 0c       	add	r3, r0
    1b7c:	61 1d       	adc	r22, r1
    1b7e:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
    1b80:	69 93       	st	Y+, r22
    1b82:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
    1b84:	69 93       	st	Y+, r22
    1b86:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
    1b88:	01 50       	subi	r16, 0x01	; 1
    1b8a:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
    1b8c:	31 f7       	brne	.-52     	; 0x1b5a <fft_input+0x1a>

	popw	YH,YL
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
	popw	AH,AL
    1b92:	0f 91       	pop	r16
    1b94:	1f 91       	pop	r17
	popw	T2H,T2L
    1b96:	2f 90       	pop	r2
    1b98:	3f 90       	pop	r3
	clr	r1
    1b9a:	11 24       	eor	r1, r1
	ret
    1b9c:	08 95       	ret

00001b9e <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
    1b9e:	3f 92       	push	r3
    1ba0:	2f 92       	push	r2
	pushw	T4H,T4L
    1ba2:	5f 92       	push	r5
    1ba4:	4f 92       	push	r4
	pushw	T6H,T6L
    1ba6:	7f 92       	push	r7
    1ba8:	6f 92       	push	r6
	pushw	T8H,T8L
    1baa:	9f 92       	push	r9
    1bac:	8f 92       	push	r8
	pushw	T10H,T10L
    1bae:	bf 92       	push	r11
    1bb0:	af 92       	push	r10
	pushw	T12H,T12L
    1bb2:	df 92       	push	r13
    1bb4:	cf 92       	push	r12
	pushw	T14H,T14L
    1bb6:	ff 92       	push	r15
    1bb8:	ef 92       	push	r14
	pushw	AH,AL
    1bba:	1f 93       	push	r17
    1bbc:	0f 93       	push	r16
	pushw	YH,YL
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
    1bc2:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
    1bc8:	a0 e4       	ldi	r26, 0x40	; 64
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4				;T12 = E; (angular speed)
    1bcc:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
    1bce:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
    1bd0:	60 01       	movw	r12, r0
	mul	EH, AL				;
    1bd2:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
    1bd4:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
    1bd6:	7c 01       	movw	r14, r24
	pushw	EH,EL
    1bd8:	9f 93       	push	r25
    1bda:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
    1bdc:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
    1bde:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1be0:	c0 0d       	add	r28, r0
    1be2:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
    1be4:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
    1be6:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
    1be8:	ff 93       	push	r31
    1bea:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
    1bec:	bb 24       	eor	r11, r11
    1bee:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
    1bf0:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
    1bf2:	00 81       	ld	r16, Z
    1bf4:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
    1bf6:	15 95       	asr	r17
    1bf8:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
    1bfa:	68 81       	ld	r22, Y
    1bfc:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
    1bfe:	75 95       	asr	r23
    1c00:	67 95       	ror	r22
	movw	CL, AL				;
    1c02:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
    1c04:	06 1b       	sub	r16, r22
    1c06:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
    1c08:	46 0f       	add	r20, r22
    1c0a:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1c0c:	41 93       	st	Z+, r20
    1c0e:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
    1c10:	20 81       	ld	r18, Z
    1c12:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
    1c14:	35 95       	asr	r19
    1c16:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
    1c18:	6a 81       	ldd	r22, Y+2	; 0x02
    1c1a:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
    1c1c:	75 95       	asr	r23
    1c1e:	67 95       	ror	r22
	movw	CL, BL				;
    1c20:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
    1c22:	26 1b       	sub	r18, r22
    1c24:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
    1c26:	46 0f       	add	r20, r22
    1c28:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1c2a:	41 93       	st	Z+, r20
    1c2c:	51 93       	st	Z+, r21
	movw	T0L, ZL
    1c2e:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
    1c30:	e0 ec       	ldi	r30, 0xC0	; 192
    1c32:	f9 e1       	ldi	r31, 0x19	; 25
	addw	ZH,ZL, T10H,T10L		;
    1c34:	ea 0d       	add	r30, r10
    1c36:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
    1c38:	45 91       	lpm	r20, Z+
    1c3a:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
    1c3c:	65 91       	lpm	r22, Z+
    1c3e:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
    1c40:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
    1c42:	95 03       	fmuls	r17, r21
    1c44:	20 01       	movw	r4, r0
    1c46:	0c 03       	fmul	r16, r20
    1c48:	10 01       	movw	r2, r0
    1c4a:	49 1e       	adc	r4, r25
    1c4c:	9c 03       	fmulsu	r17, r20
    1c4e:	59 0a       	sbc	r5, r25
    1c50:	30 0c       	add	r3, r0
    1c52:	41 1c       	adc	r4, r1
    1c54:	59 1e       	adc	r5, r25
    1c56:	d8 03       	fmulsu	r21, r16
    1c58:	59 0a       	sbc	r5, r25
    1c5a:	30 0c       	add	r3, r0
    1c5c:	41 1c       	adc	r4, r1
    1c5e:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
    1c60:	b7 03       	fmuls	r19, r23
    1c62:	40 01       	movw	r8, r0
    1c64:	2e 03       	fmul	r18, r22
    1c66:	30 01       	movw	r6, r0
    1c68:	89 1e       	adc	r8, r25
    1c6a:	be 03       	fmulsu	r19, r22
    1c6c:	99 0a       	sbc	r9, r25
    1c6e:	70 0c       	add	r7, r0
    1c70:	81 1c       	adc	r8, r1
    1c72:	99 1e       	adc	r9, r25
    1c74:	fa 03       	fmulsu	r23, r18
    1c76:	99 0a       	sbc	r9, r25
    1c78:	70 0c       	add	r7, r0
    1c7a:	81 1c       	adc	r8, r1
    1c7c:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1c7e:	26 0c       	add	r2, r6
    1c80:	37 1c       	adc	r3, r7
    1c82:	48 1c       	adc	r4, r8
    1c84:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
    1c86:	49 92       	st	Y+, r4
    1c88:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
    1c8a:	b5 03       	fmuls	r19, r21
    1c8c:	20 01       	movw	r4, r0
    1c8e:	2c 03       	fmul	r18, r20
    1c90:	10 01       	movw	r2, r0
    1c92:	49 1e       	adc	r4, r25
    1c94:	bc 03       	fmulsu	r19, r20
    1c96:	59 0a       	sbc	r5, r25
    1c98:	30 0c       	add	r3, r0
    1c9a:	41 1c       	adc	r4, r1
    1c9c:	59 1e       	adc	r5, r25
    1c9e:	da 03       	fmulsu	r21, r18
    1ca0:	59 0a       	sbc	r5, r25
    1ca2:	30 0c       	add	r3, r0
    1ca4:	41 1c       	adc	r4, r1
    1ca6:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
    1ca8:	97 03       	fmuls	r17, r23
    1caa:	40 01       	movw	r8, r0
    1cac:	0e 03       	fmul	r16, r22
    1cae:	30 01       	movw	r6, r0
    1cb0:	89 1e       	adc	r8, r25
    1cb2:	9e 03       	fmulsu	r17, r22
    1cb4:	99 0a       	sbc	r9, r25
    1cb6:	70 0c       	add	r7, r0
    1cb8:	81 1c       	adc	r8, r1
    1cba:	99 1e       	adc	r9, r25
    1cbc:	f8 03       	fmulsu	r23, r16
    1cbe:	99 0a       	sbc	r9, r25
    1cc0:	70 0c       	add	r7, r0
    1cc2:	81 1c       	adc	r8, r1
    1cc4:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1cc6:	26 18       	sub	r2, r6
    1cc8:	37 08       	sbc	r3, r7
    1cca:	48 08       	sbc	r4, r8
    1ccc:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
    1cce:	49 92       	st	Y+, r4
    1cd0:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
    1cd2:	ac 0c       	add	r10, r12
    1cd4:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
    1cd6:	b0 fe       	sbrs	r11, 0
#else
	sbrs	T10L, FFT_B + 1
#endif
	rjmp	3b				;/
    1cd8:	8c cf       	rjmp	.-232    	; 0x1bf2 <fft_execute+0x54>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
    1cda:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
    1cdc:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1cde:	c0 0d       	add	r28, r0
    1ce0:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
    1ce2:	e0 0d       	add	r30, r0
    1ce4:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
    1ce6:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
    1ce8:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
    1cea:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
    1cec:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
    1cee:	e8 1a       	sub	r14, r24
    1cf0:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <fft_execute+0x158>
    1cf4:	7b cf       	rjmp	.-266    	; 0x1bec <fft_execute+0x4e>
	popw	ZH,ZL
    1cf6:	ef 91       	pop	r30
    1cf8:	ff 91       	pop	r31
	popw	EH,EL
    1cfa:	8f 91       	pop	r24
    1cfc:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
    1d02:	b6 95       	lsr	r27
    1d04:	a7 95       	ror	r26
	adiw	XL, 0				;
    1d06:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <fft_execute+0x16e>
    1d0a:	60 cf       	rjmp	.-320    	; 0x1bcc <fft_execute+0x2e>

	popw	YH,YL
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
	popw	AH,AL
    1d10:	0f 91       	pop	r16
    1d12:	1f 91       	pop	r17
	popw	T14H,T14L
    1d14:	ef 90       	pop	r14
    1d16:	ff 90       	pop	r15
	popw	T12H,T12L
    1d18:	cf 90       	pop	r12
    1d1a:	df 90       	pop	r13
	popw	T10H,T10L
    1d1c:	af 90       	pop	r10
    1d1e:	bf 90       	pop	r11
	popw	T8H,T8L
    1d20:	8f 90       	pop	r8
    1d22:	9f 90       	pop	r9
	popw	T6H,T6L
    1d24:	6f 90       	pop	r6
    1d26:	7f 90       	pop	r7
	popw	T4H,T4L
    1d28:	4f 90       	pop	r4
    1d2a:	5f 90       	pop	r5
	popw	T2H,T2L
    1d2c:	2f 90       	pop	r2
    1d2e:	3f 90       	pop	r3
;	clr	r1
	ret
    1d30:	08 95       	ret

00001d32 <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
    1d32:	3f 92       	push	r3
    1d34:	2f 92       	push	r2
	pushw	T4H,T4L
    1d36:	5f 92       	push	r5
    1d38:	4f 92       	push	r4
	pushw	T6H,T6L
    1d3a:	7f 92       	push	r7
    1d3c:	6f 92       	push	r6
	pushw	T8H,T8L
    1d3e:	9f 92       	push	r9
    1d40:	8f 92       	push	r8
	pushw	T10H,T10L
    1d42:	bf 92       	push	r11
    1d44:	af 92       	push	r10
	pushw	AH,AL
    1d46:	1f 93       	push	r17
    1d48:	0f 93       	push	r16
	pushw	YH,YL
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
    1d4e:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
    1d50:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
    1d52:	e0 ec       	ldi	r30, 0xC0	; 192
    1d54:	fa e1       	ldi	r31, 0x1A	; 26
	clr	EH				;Zero
    1d56:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (pluse/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (pluse only)
    1d58:	00 e4       	ldi	r16, 0x40	; 64
    1d5a:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
    1d5c:	a5 91       	lpm	r26, Z+
    1d5e:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
    1d60:	aa 0d       	add	r26, r10
    1d62:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
    1d64:	2d 91       	ld	r18, X+
    1d66:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
    1d68:	4d 91       	ld	r20, X+
    1d6a:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
    1d6c:	b3 03       	fmuls	r19, r19
    1d6e:	20 01       	movw	r4, r0
    1d70:	2a 03       	fmul	r18, r18
    1d72:	10 01       	movw	r2, r0
    1d74:	49 1e       	adc	r4, r25
    1d76:	ba 03       	fmulsu	r19, r18
    1d78:	59 0a       	sbc	r5, r25
    1d7a:	30 0c       	add	r3, r0
    1d7c:	41 1c       	adc	r4, r1
    1d7e:	59 1e       	adc	r5, r25
    1d80:	ba 03       	fmulsu	r19, r18
    1d82:	59 0a       	sbc	r5, r25
    1d84:	30 0c       	add	r3, r0
    1d86:	41 1c       	adc	r4, r1
    1d88:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
    1d8a:	d5 03       	fmuls	r21, r21
    1d8c:	40 01       	movw	r8, r0
    1d8e:	4c 03       	fmul	r20, r20
    1d90:	30 01       	movw	r6, r0
    1d92:	89 1e       	adc	r8, r25
    1d94:	dc 03       	fmulsu	r21, r20
    1d96:	99 0a       	sbc	r9, r25
    1d98:	70 0c       	add	r7, r0
    1d9a:	81 1c       	adc	r8, r1
    1d9c:	99 1e       	adc	r9, r25
    1d9e:	dc 03       	fmulsu	r21, r20
    1da0:	99 0a       	sbc	r9, r25
    1da2:	70 0c       	add	r7, r0
    1da4:	81 1c       	adc	r8, r1
    1da6:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
    1da8:	26 0c       	add	r2, r6
    1daa:	37 1c       	adc	r3, r7
    1dac:	48 1c       	adc	r4, r8
    1dae:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
    1db0:	66 24       	eor	r6, r6
    1db2:	77 24       	eor	r7, r7
    1db4:	88 24       	eor	r8, r8
    1db6:	99 24       	eor	r9, r9
    1db8:	21 e0       	ldi	r18, 0x01	; 1
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	44 27       	eor	r20, r20
    1dbe:	55 27       	eor	r21, r21
    1dc0:	70 e1       	ldi	r23, 0x10	; 16
    1dc2:	22 0c       	add	r2, r2
    1dc4:	33 1c       	adc	r3, r3
    1dc6:	44 1c       	adc	r4, r4
    1dc8:	55 1c       	adc	r5, r5
    1dca:	66 1c       	adc	r6, r6
    1dcc:	77 1c       	adc	r7, r7
    1dce:	88 1c       	adc	r8, r8
    1dd0:	99 1c       	adc	r9, r9
    1dd2:	22 0c       	add	r2, r2
    1dd4:	33 1c       	adc	r3, r3
    1dd6:	44 1c       	adc	r4, r4
    1dd8:	55 1c       	adc	r5, r5
    1dda:	66 1c       	adc	r6, r6
    1ddc:	77 1c       	adc	r7, r7
    1dde:	88 1c       	adc	r8, r8
    1de0:	99 1c       	adc	r9, r9
    1de2:	2a f4       	brpl	.+10     	; 0x1dee <fft_output+0xbc>
    1de4:	62 0e       	add	r6, r18
    1de6:	73 1e       	adc	r7, r19
    1de8:	84 1e       	adc	r8, r20
    1dea:	95 1e       	adc	r9, r21
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <fft_output+0xc4>
    1dee:	62 1a       	sub	r6, r18
    1df0:	73 0a       	sbc	r7, r19
    1df2:	84 0a       	sbc	r8, r20
    1df4:	95 0a       	sbc	r9, r21
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	44 1f       	adc	r20, r20
    1dfc:	28 7f       	andi	r18, 0xF8	; 248
    1dfe:	25 60       	ori	r18, 0x05	; 5
    1e00:	97 fc       	sbrc	r9, 7
    1e02:	22 50       	subi	r18, 0x02	; 2
    1e04:	7a 95       	dec	r23
    1e06:	e9 f6       	brne	.-70     	; 0x1dc2 <fft_output+0x90>
    1e08:	46 95       	lsr	r20
    1e0a:	37 95       	ror	r19
    1e0c:	27 95       	ror	r18
    1e0e:	46 95       	lsr	r20
    1e10:	37 95       	ror	r19
    1e12:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
    1e14:	29 93       	st	Y+, r18
    1e16:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
    1e18:	01 50       	subi	r16, 0x01	; 1
    1e1a:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <fft_output+0xee>
    1e1e:	9e cf       	rjmp	.-196    	; 0x1d5c <fft_output+0x2a>

	popw	YH,YL
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
	popw	AH,AL
    1e24:	0f 91       	pop	r16
    1e26:	1f 91       	pop	r17
	popw	T10H,T10L
    1e28:	af 90       	pop	r10
    1e2a:	bf 90       	pop	r11
	popw	T8H,T8L
    1e2c:	8f 90       	pop	r8
    1e2e:	9f 90       	pop	r9
	popw	T6H,T6L
    1e30:	6f 90       	pop	r6
    1e32:	7f 90       	pop	r7
	popw	T4H,T4L
    1e34:	4f 90       	pop	r4
    1e36:	5f 90       	pop	r5
	popw	T2H,T2L
    1e38:	2f 90       	pop	r2
    1e3a:	3f 90       	pop	r3
	clr	r1
    1e3c:	11 24       	eor	r1, r1
	ret
    1e3e:	08 95       	ret

00001e40 <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
    1e40:	ac 01       	movw	r20, r24
	clr	EH	;Zero
    1e42:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
    1e44:	d7 03       	fmuls	r21, r23
    1e46:	f0 01       	movw	r30, r0
    1e48:	4e 03       	fmul	r20, r22
    1e4a:	d0 01       	movw	r26, r0
    1e4c:	e9 1f       	adc	r30, r25
    1e4e:	de 03       	fmulsu	r21, r22
    1e50:	f9 0b       	sbc	r31, r25
    1e52:	b0 0d       	add	r27, r0
    1e54:	e1 1d       	adc	r30, r1
    1e56:	f9 1f       	adc	r31, r25
    1e58:	fc 03       	fmulsu	r23, r20
    1e5a:	f9 0b       	sbc	r31, r25
    1e5c:	b0 0d       	add	r27, r0
    1e5e:	e1 1d       	adc	r30, r1
    1e60:	f9 1f       	adc	r31, r25
	movw	EL, ZL
    1e62:	cf 01       	movw	r24, r30
	clr	r1
    1e64:	11 24       	eor	r1, r1
	ret
    1e66:	08 95       	ret

00001e68 <__divmodhi4>:
    1e68:	97 fb       	bst	r25, 7
    1e6a:	09 2e       	mov	r0, r25
    1e6c:	07 26       	eor	r0, r23
    1e6e:	0a d0       	rcall	.+20     	; 0x1e84 <__divmodhi4_neg1>
    1e70:	77 fd       	sbrc	r23, 7
    1e72:	04 d0       	rcall	.+8      	; 0x1e7c <__divmodhi4_neg2>
    1e74:	80 d0       	rcall	.+256    	; 0x1f76 <__udivmodhi4>
    1e76:	06 d0       	rcall	.+12     	; 0x1e84 <__divmodhi4_neg1>
    1e78:	00 20       	and	r0, r0
    1e7a:	1a f4       	brpl	.+6      	; 0x1e82 <__divmodhi4_exit>

00001e7c <__divmodhi4_neg2>:
    1e7c:	70 95       	com	r23
    1e7e:	61 95       	neg	r22
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255

00001e82 <__divmodhi4_exit>:
    1e82:	08 95       	ret

00001e84 <__divmodhi4_neg1>:
    1e84:	f6 f7       	brtc	.-4      	; 0x1e82 <__divmodhi4_exit>
    1e86:	90 95       	com	r25
    1e88:	81 95       	neg	r24
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	08 95       	ret

00001e8e <__udivmodsi4>:
    1e8e:	a1 e2       	ldi	r26, 0x21	; 33
    1e90:	1a 2e       	mov	r1, r26
    1e92:	aa 1b       	sub	r26, r26
    1e94:	bb 1b       	sub	r27, r27
    1e96:	fd 01       	movw	r30, r26
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <__udivmodsi4_ep>

00001e9a <__udivmodsi4_loop>:
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	ee 1f       	adc	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	a2 17       	cp	r26, r18
    1ea4:	b3 07       	cpc	r27, r19
    1ea6:	e4 07       	cpc	r30, r20
    1ea8:	f5 07       	cpc	r31, r21
    1eaa:	20 f0       	brcs	.+8      	; 0x1eb4 <__udivmodsi4_ep>
    1eac:	a2 1b       	sub	r26, r18
    1eae:	b3 0b       	sbc	r27, r19
    1eb0:	e4 0b       	sbc	r30, r20
    1eb2:	f5 0b       	sbc	r31, r21

00001eb4 <__udivmodsi4_ep>:
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	1a 94       	dec	r1
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <__udivmodsi4_loop>
    1ec0:	60 95       	com	r22
    1ec2:	70 95       	com	r23
    1ec4:	80 95       	com	r24
    1ec6:	90 95       	com	r25
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	bd 01       	movw	r22, r26
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret

00001ed2 <__divmodsi4>:
    1ed2:	97 fb       	bst	r25, 7
    1ed4:	09 2e       	mov	r0, r25
    1ed6:	05 26       	eor	r0, r21
    1ed8:	0e d0       	rcall	.+28     	; 0x1ef6 <__divmodsi4_neg1>
    1eda:	57 fd       	sbrc	r21, 7
    1edc:	04 d0       	rcall	.+8      	; 0x1ee6 <__divmodsi4_neg2>
    1ede:	d7 df       	rcall	.-82     	; 0x1e8e <__udivmodsi4>
    1ee0:	0a d0       	rcall	.+20     	; 0x1ef6 <__divmodsi4_neg1>
    1ee2:	00 1c       	adc	r0, r0
    1ee4:	38 f4       	brcc	.+14     	; 0x1ef4 <__divmodsi4_exit>

00001ee6 <__divmodsi4_neg2>:
    1ee6:	50 95       	com	r21
    1ee8:	40 95       	com	r20
    1eea:	30 95       	com	r19
    1eec:	21 95       	neg	r18
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255

00001ef4 <__divmodsi4_exit>:
    1ef4:	08 95       	ret

00001ef6 <__divmodsi4_neg1>:
    1ef6:	f6 f7       	brtc	.-4      	; 0x1ef4 <__divmodsi4_exit>
    1ef8:	90 95       	com	r25
    1efa:	80 95       	com	r24
    1efc:	70 95       	com	r23
    1efe:	61 95       	neg	r22
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	8f 4f       	sbci	r24, 0xFF	; 255
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	08 95       	ret

00001f08 <__prologue_saves__>:
    1f08:	2f 92       	push	r2
    1f0a:	3f 92       	push	r3
    1f0c:	4f 92       	push	r4
    1f0e:	5f 92       	push	r5
    1f10:	6f 92       	push	r6
    1f12:	7f 92       	push	r7
    1f14:	8f 92       	push	r8
    1f16:	9f 92       	push	r9
    1f18:	af 92       	push	r10
    1f1a:	bf 92       	push	r11
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	ca 1b       	sub	r28, r26
    1f32:	db 0b       	sbc	r29, r27
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	09 94       	ijmp

00001f40 <__epilogue_restores__>:
    1f40:	2a 88       	ldd	r2, Y+18	; 0x12
    1f42:	39 88       	ldd	r3, Y+17	; 0x11
    1f44:	48 88       	ldd	r4, Y+16	; 0x10
    1f46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f48:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f50:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f52:	b9 84       	ldd	r11, Y+9	; 0x09
    1f54:	c8 84       	ldd	r12, Y+8	; 0x08
    1f56:	df 80       	ldd	r13, Y+7	; 0x07
    1f58:	ee 80       	ldd	r14, Y+6	; 0x06
    1f5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f5e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f60:	aa 81       	ldd	r26, Y+2	; 0x02
    1f62:	b9 81       	ldd	r27, Y+1	; 0x01
    1f64:	ce 0f       	add	r28, r30
    1f66:	d1 1d       	adc	r29, r1
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	ed 01       	movw	r28, r26
    1f74:	08 95       	ret

00001f76 <__udivmodhi4>:
    1f76:	aa 1b       	sub	r26, r26
    1f78:	bb 1b       	sub	r27, r27
    1f7a:	51 e1       	ldi	r21, 0x11	; 17
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <__udivmodhi4_ep>

00001f7e <__udivmodhi4_loop>:
    1f7e:	aa 1f       	adc	r26, r26
    1f80:	bb 1f       	adc	r27, r27
    1f82:	a6 17       	cp	r26, r22
    1f84:	b7 07       	cpc	r27, r23
    1f86:	10 f0       	brcs	.+4      	; 0x1f8c <__udivmodhi4_ep>
    1f88:	a6 1b       	sub	r26, r22
    1f8a:	b7 0b       	sbc	r27, r23

00001f8c <__udivmodhi4_ep>:
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	5a 95       	dec	r21
    1f92:	a9 f7       	brne	.-22     	; 0x1f7e <__udivmodhi4_loop>
    1f94:	80 95       	com	r24
    1f96:	90 95       	com	r25
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	08 95       	ret

00001f9e <__eerd_byte_m644>:
    1f9e:	f9 99       	sbic	0x1f, 1	; 31
    1fa0:	fe cf       	rjmp	.-4      	; 0x1f9e <__eerd_byte_m644>
    1fa2:	92 bd       	out	0x22, r25	; 34
    1fa4:	81 bd       	out	0x21, r24	; 33
    1fa6:	f8 9a       	sbi	0x1f, 0	; 31
    1fa8:	99 27       	eor	r25, r25
    1faa:	80 b5       	in	r24, 0x20	; 32
    1fac:	08 95       	ret

00001fae <_exit>:
    1fae:	f8 94       	cli

00001fb0 <__stop_program>:
    1fb0:	ff cf       	rjmp	.-2      	; 0x1fb0 <__stop_program>
